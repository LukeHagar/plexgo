// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"io"
	"net/http"
)

type GetBannerImageRequest struct {
	// the id of the library item to return the children of.
	RatingKey int64 `pathParam:"style=simple,explode=false,name=ratingKey"`
	Width     int64 `queryParam:"style=form,explode=true,name=width"`
	Height    int64 `queryParam:"style=form,explode=true,name=height"`
	MinSize   int64 `queryParam:"style=form,explode=true,name=minSize"`
	Upscale   int64 `queryParam:"style=form,explode=true,name=upscale"`
	// An authentication token, obtained from plex.tv
	XPlexToken string `header:"style=simple,explode=false,name=X-Plex-Token"`
}

func (g *GetBannerImageRequest) GetRatingKey() int64 {
	if g == nil {
		return 0
	}
	return g.RatingKey
}

func (g *GetBannerImageRequest) GetWidth() int64 {
	if g == nil {
		return 0
	}
	return g.Width
}

func (g *GetBannerImageRequest) GetHeight() int64 {
	if g == nil {
		return 0
	}
	return g.Height
}

func (g *GetBannerImageRequest) GetMinSize() int64 {
	if g == nil {
		return 0
	}
	return g.MinSize
}

func (g *GetBannerImageRequest) GetUpscale() int64 {
	if g == nil {
		return 0
	}
	return g.Upscale
}

func (g *GetBannerImageRequest) GetXPlexToken() string {
	if g == nil {
		return ""
	}
	return g.XPlexToken
}

type GetBannerImageResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response returning an image
	// The Close method must be called on this field, even if it is not used, to prevent resource leaks.
	ResponseStream io.ReadCloser
	Headers        map[string][]string
}

func (g *GetBannerImageResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetBannerImageResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetBannerImageResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetBannerImageResponse) GetResponseStream() io.ReadCloser {
	if g == nil {
		return nil
	}
	return g.ResponseStream
}

func (g *GetBannerImageResponse) GetHeaders() map[string][]string {
	if g == nil {
		return map[string][]string{}
	}
	return g.Headers
}
