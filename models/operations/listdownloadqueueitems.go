// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type ListDownloadQueueItemsGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (l ListDownloadQueueItemsGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDownloadQueueItemsGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *ListDownloadQueueItemsGlobals) GetAccepts() *components.Accepts {
	if l == nil {
		return nil
	}
	return l.Accepts
}

func (l *ListDownloadQueueItemsGlobals) GetClientIdentifier() *string {
	if l == nil {
		return nil
	}
	return l.ClientIdentifier
}

func (l *ListDownloadQueueItemsGlobals) GetProduct() *string {
	if l == nil {
		return nil
	}
	return l.Product
}

func (l *ListDownloadQueueItemsGlobals) GetVersion() *string {
	if l == nil {
		return nil
	}
	return l.Version
}

func (l *ListDownloadQueueItemsGlobals) GetPlatform() *string {
	if l == nil {
		return nil
	}
	return l.Platform
}

func (l *ListDownloadQueueItemsGlobals) GetPlatformVersion() *string {
	if l == nil {
		return nil
	}
	return l.PlatformVersion
}

func (l *ListDownloadQueueItemsGlobals) GetDevice() *string {
	if l == nil {
		return nil
	}
	return l.Device
}

func (l *ListDownloadQueueItemsGlobals) GetModel() *string {
	if l == nil {
		return nil
	}
	return l.Model
}

func (l *ListDownloadQueueItemsGlobals) GetDeviceVendor() *string {
	if l == nil {
		return nil
	}
	return l.DeviceVendor
}

func (l *ListDownloadQueueItemsGlobals) GetDeviceName() *string {
	if l == nil {
		return nil
	}
	return l.DeviceName
}

func (l *ListDownloadQueueItemsGlobals) GetMarketplace() *string {
	if l == nil {
		return nil
	}
	return l.Marketplace
}

type ListDownloadQueueItemsRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The queue id
	QueueID int64 `pathParam:"style=simple,explode=false,name=queueId"`
}

func (l ListDownloadQueueItemsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDownloadQueueItemsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"queueId"}); err != nil {
		return err
	}
	return nil
}

func (l *ListDownloadQueueItemsRequest) GetAccepts() *components.Accepts {
	if l == nil {
		return nil
	}
	return l.Accepts
}

func (l *ListDownloadQueueItemsRequest) GetClientIdentifier() *string {
	if l == nil {
		return nil
	}
	return l.ClientIdentifier
}

func (l *ListDownloadQueueItemsRequest) GetProduct() *string {
	if l == nil {
		return nil
	}
	return l.Product
}

func (l *ListDownloadQueueItemsRequest) GetVersion() *string {
	if l == nil {
		return nil
	}
	return l.Version
}

func (l *ListDownloadQueueItemsRequest) GetPlatform() *string {
	if l == nil {
		return nil
	}
	return l.Platform
}

func (l *ListDownloadQueueItemsRequest) GetPlatformVersion() *string {
	if l == nil {
		return nil
	}
	return l.PlatformVersion
}

func (l *ListDownloadQueueItemsRequest) GetDevice() *string {
	if l == nil {
		return nil
	}
	return l.Device
}

func (l *ListDownloadQueueItemsRequest) GetModel() *string {
	if l == nil {
		return nil
	}
	return l.Model
}

func (l *ListDownloadQueueItemsRequest) GetDeviceVendor() *string {
	if l == nil {
		return nil
	}
	return l.DeviceVendor
}

func (l *ListDownloadQueueItemsRequest) GetDeviceName() *string {
	if l == nil {
		return nil
	}
	return l.DeviceName
}

func (l *ListDownloadQueueItemsRequest) GetMarketplace() *string {
	if l == nil {
		return nil
	}
	return l.Marketplace
}

func (l *ListDownloadQueueItemsRequest) GetQueueID() int64 {
	if l == nil {
		return 0
	}
	return l.QueueID
}

type DecisionResult struct {
	// The maximum bitrate set when item was added
	AvailableBandwidth     *int64  `json:"availableBandwidth,omitempty"`
	DirectPlayDecisionCode *int64  `json:"directPlayDecisionCode,omitempty"`
	DirectPlayDecisionText *string `json:"directPlayDecisionText,omitempty"`
	GeneralDecisionCode    *int64  `json:"generalDecisionCode,omitempty"`
	GeneralDecisionText    *string `json:"generalDecisionText,omitempty"`
	// The code indicating the status of evaluation of playback when client indicates `hasMDE=1`
	MdeDecisionCode *int64 `json:"mdeDecisionCode,omitempty"`
	// Descriptive text for the above code
	MdeDecisionText       *string `json:"mdeDecisionText,omitempty"`
	TranscodeDecisionCode *int64  `json:"transcodeDecisionCode,omitempty"`
	TranscodeDecisionText *string `json:"transcodeDecisionText,omitempty"`
}

func (d *DecisionResult) GetAvailableBandwidth() *int64 {
	if d == nil {
		return nil
	}
	return d.AvailableBandwidth
}

func (d *DecisionResult) GetDirectPlayDecisionCode() *int64 {
	if d == nil {
		return nil
	}
	return d.DirectPlayDecisionCode
}

func (d *DecisionResult) GetDirectPlayDecisionText() *string {
	if d == nil {
		return nil
	}
	return d.DirectPlayDecisionText
}

func (d *DecisionResult) GetGeneralDecisionCode() *int64 {
	if d == nil {
		return nil
	}
	return d.GeneralDecisionCode
}

func (d *DecisionResult) GetGeneralDecisionText() *string {
	if d == nil {
		return nil
	}
	return d.GeneralDecisionText
}

func (d *DecisionResult) GetMdeDecisionCode() *int64 {
	if d == nil {
		return nil
	}
	return d.MdeDecisionCode
}

func (d *DecisionResult) GetMdeDecisionText() *string {
	if d == nil {
		return nil
	}
	return d.MdeDecisionText
}

func (d *DecisionResult) GetTranscodeDecisionCode() *int64 {
	if d == nil {
		return nil
	}
	return d.TranscodeDecisionCode
}

func (d *DecisionResult) GetTranscodeDecisionText() *string {
	if d == nil {
		return nil
	}
	return d.TranscodeDecisionText
}

// ListDownloadQueueItemsStatus - The state of the item:
//   - deciding: The item decision is pending
//   - waiting: The item is waiting for transcode
//   - processing: The item is being transcoded
//   - available: The item is available for download
//   - error: The item encountered an error in the decision or transcode
//   - expired: The transcoded item has timed out and is no longer available
type ListDownloadQueueItemsStatus string

const (
	ListDownloadQueueItemsStatusDeciding   ListDownloadQueueItemsStatus = "deciding"
	ListDownloadQueueItemsStatusWaiting    ListDownloadQueueItemsStatus = "waiting"
	ListDownloadQueueItemsStatusProcessing ListDownloadQueueItemsStatus = "processing"
	ListDownloadQueueItemsStatusAvailable  ListDownloadQueueItemsStatus = "available"
	ListDownloadQueueItemsStatusError      ListDownloadQueueItemsStatus = "error"
	ListDownloadQueueItemsStatusExpired    ListDownloadQueueItemsStatus = "expired"
)

func (e ListDownloadQueueItemsStatus) ToPointer() *ListDownloadQueueItemsStatus {
	return &e
}
func (e *ListDownloadQueueItemsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deciding":
		fallthrough
	case "waiting":
		fallthrough
	case "processing":
		fallthrough
	case "available":
		fallthrough
	case "error":
		fallthrough
	case "expired":
		*e = ListDownloadQueueItemsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDownloadQueueItemsStatus: %v", v)
	}
}

// Transcode - The transcode session object which is not yet documented otherwise it'd be a $ref here.
type Transcode struct {
}

type DownloadQueueItem struct {
	DecisionResult *DecisionResult `json:"DecisionResult,omitempty"`
	// The error encountered in transcoding or decision
	Error   *string `json:"error,omitempty"`
	ID      *int64  `json:"id,omitempty"`
	Key     *string `json:"key,omitempty"`
	QueueID *int64  `json:"queueId,omitempty"`
	// The state of the item:
	//   - deciding: The item decision is pending
	//   - waiting: The item is waiting for transcode
	//   - processing: The item is being transcoded
	//   - available: The item is available for download
	//   - error: The item encountered an error in the decision or transcode
	//   - expired: The transcoded item has timed out and is no longer available
	//
	Status *ListDownloadQueueItemsStatus `json:"status,omitempty"`
	// The transcode session object which is not yet documented otherwise it'd be a $ref here.
	Transcode *Transcode `json:"transcode,omitempty"`
	// The transcode session if item is currently being transcoded
	TranscodeSession *components.TranscodeSession `json:"TranscodeSession,omitempty"`
}

func (d *DownloadQueueItem) GetDecisionResult() *DecisionResult {
	if d == nil {
		return nil
	}
	return d.DecisionResult
}

func (d *DownloadQueueItem) GetError() *string {
	if d == nil {
		return nil
	}
	return d.Error
}

func (d *DownloadQueueItem) GetID() *int64 {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DownloadQueueItem) GetKey() *string {
	if d == nil {
		return nil
	}
	return d.Key
}

func (d *DownloadQueueItem) GetQueueID() *int64 {
	if d == nil {
		return nil
	}
	return d.QueueID
}

func (d *DownloadQueueItem) GetStatus() *ListDownloadQueueItemsStatus {
	if d == nil {
		return nil
	}
	return d.Status
}

func (d *DownloadQueueItem) GetTranscode() *Transcode {
	if d == nil {
		return nil
	}
	return d.Transcode
}

func (d *DownloadQueueItem) GetTranscodeSession() *components.TranscodeSession {
	if d == nil {
		return nil
	}
	return d.TranscodeSession
}

// ListDownloadQueueItemsMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type ListDownloadQueueItemsMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize         *int64              `json:"totalSize,omitempty"`
	DownloadQueueItem []DownloadQueueItem `json:"DownloadQueueItem,omitempty"`
}

func (l *ListDownloadQueueItemsMediaContainer) GetIdentifier() *string {
	if l == nil {
		return nil
	}
	return l.Identifier
}

func (l *ListDownloadQueueItemsMediaContainer) GetOffset() *int64 {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListDownloadQueueItemsMediaContainer) GetSize() *int64 {
	if l == nil {
		return nil
	}
	return l.Size
}

func (l *ListDownloadQueueItemsMediaContainer) GetTotalSize() *int64 {
	if l == nil {
		return nil
	}
	return l.TotalSize
}

func (l *ListDownloadQueueItemsMediaContainer) GetDownloadQueueItem() []DownloadQueueItem {
	if l == nil {
		return nil
	}
	return l.DownloadQueueItem
}

// ListDownloadQueueItemsResponseBody - OK
type ListDownloadQueueItemsResponseBody struct {
	MediaContainer *ListDownloadQueueItemsMediaContainer `json:"MediaContainer,omitempty"`
}

func (l *ListDownloadQueueItemsResponseBody) GetMediaContainer() *ListDownloadQueueItemsMediaContainer {
	if l == nil {
		return nil
	}
	return l.MediaContainer
}

type ListDownloadQueueItemsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object *ListDownloadQueueItemsResponseBody
}

func (l *ListDownloadQueueItemsResponse) GetContentType() string {
	if l == nil {
		return ""
	}
	return l.ContentType
}

func (l *ListDownloadQueueItemsResponse) GetStatusCode() int {
	if l == nil {
		return 0
	}
	return l.StatusCode
}

func (l *ListDownloadQueueItemsResponse) GetRawResponse() *http.Response {
	if l == nil {
		return nil
	}
	return l.RawResponse
}

func (l *ListDownloadQueueItemsResponse) GetObject() *ListDownloadQueueItemsResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
