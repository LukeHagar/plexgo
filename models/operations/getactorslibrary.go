// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

// GetActorsLibraryQueryParamType - The type of media to retrieve or filter by.
// 1 = movie
// 2 = show
// 3 = season
// 4 = episode
// E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
type GetActorsLibraryQueryParamType int64

const (
	GetActorsLibraryQueryParamTypeMovie   GetActorsLibraryQueryParamType = 1
	GetActorsLibraryQueryParamTypeTvShow  GetActorsLibraryQueryParamType = 2
	GetActorsLibraryQueryParamTypeSeason  GetActorsLibraryQueryParamType = 3
	GetActorsLibraryQueryParamTypeEpisode GetActorsLibraryQueryParamType = 4
	GetActorsLibraryQueryParamTypeAudio   GetActorsLibraryQueryParamType = 8
	GetActorsLibraryQueryParamTypeAlbum   GetActorsLibraryQueryParamType = 9
	GetActorsLibraryQueryParamTypeTrack   GetActorsLibraryQueryParamType = 10
)

func (e GetActorsLibraryQueryParamType) ToPointer() *GetActorsLibraryQueryParamType {
	return &e
}

type GetActorsLibraryRequest struct {
	// The unique key of the Plex library.
	// Note: This is unique in the context of the Plex server.
	//
	SectionKey int `pathParam:"style=simple,explode=false,name=sectionKey"`
	// The type of media to retrieve or filter by.
	// 1 = movie
	// 2 = show
	// 3 = season
	// 4 = episode
	// E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
	//
	Type GetActorsLibraryQueryParamType `queryParam:"style=form,explode=true,name=type"`
}

func (o *GetActorsLibraryRequest) GetSectionKey() int {
	if o == nil {
		return 0
	}
	return o.SectionKey
}

func (o *GetActorsLibraryRequest) GetType() GetActorsLibraryQueryParamType {
	if o == nil {
		return GetActorsLibraryQueryParamType(0)
	}
	return o.Type
}

type GetActorsLibraryDirectory struct {
	// A fast lookup key for the actor relative url.
	FastKey string `json:"fastKey"`
	// URL for the thumbnail image of the actor.
	Thumb string `json:"thumb"`
	// A unique key representing the actor.
	Key string `json:"key"`
	// The name of the actor.
	Title string `json:"title"`
}

func (o *GetActorsLibraryDirectory) GetFastKey() string {
	if o == nil {
		return ""
	}
	return o.FastKey
}

func (o *GetActorsLibraryDirectory) GetThumb() string {
	if o == nil {
		return ""
	}
	return o.Thumb
}

func (o *GetActorsLibraryDirectory) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetActorsLibraryDirectory) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetActorsLibraryMediaContainer struct {
	// Number of media items returned in this response.
	Size int `json:"size"`
	// Indicates whether syncing is allowed.
	AllowSync bool `json:"allowSync"`
	// URL for the background artwork of the media container.
	Art string `json:"art"`
	// An plugin identifier for the media container.
	Identifier string `json:"identifier"`
	// The prefix used for media tag resource paths.
	MediaTagPrefix string `json:"mediaTagPrefix"`
	// The version number for media tags.
	MediaTagVersion int64 `json:"mediaTagVersion"`
	// Specifies whether caching is disabled.
	Nocache bool `json:"nocache"`
	// URL for the thumbnail image of the media container.
	Thumb string `json:"thumb"`
	// The primary title of the media container.
	Title1 string `json:"title1"`
	// The secondary title of the media container.
	Title2 string `json:"title2"`
	// Identifier for the view group layout.
	ViewGroup string `json:"viewGroup"`
	// Identifier for the view mode.
	ViewMode string `json:"viewMode"`
	// An array of actor entries for media items.
	Directory []GetActorsLibraryDirectory `json:"Directory,omitempty"`
}

func (o *GetActorsLibraryMediaContainer) GetSize() int {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *GetActorsLibraryMediaContainer) GetAllowSync() bool {
	if o == nil {
		return false
	}
	return o.AllowSync
}

func (o *GetActorsLibraryMediaContainer) GetArt() string {
	if o == nil {
		return ""
	}
	return o.Art
}

func (o *GetActorsLibraryMediaContainer) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetActorsLibraryMediaContainer) GetMediaTagPrefix() string {
	if o == nil {
		return ""
	}
	return o.MediaTagPrefix
}

func (o *GetActorsLibraryMediaContainer) GetMediaTagVersion() int64 {
	if o == nil {
		return 0
	}
	return o.MediaTagVersion
}

func (o *GetActorsLibraryMediaContainer) GetNocache() bool {
	if o == nil {
		return false
	}
	return o.Nocache
}

func (o *GetActorsLibraryMediaContainer) GetThumb() string {
	if o == nil {
		return ""
	}
	return o.Thumb
}

func (o *GetActorsLibraryMediaContainer) GetTitle1() string {
	if o == nil {
		return ""
	}
	return o.Title1
}

func (o *GetActorsLibraryMediaContainer) GetTitle2() string {
	if o == nil {
		return ""
	}
	return o.Title2
}

func (o *GetActorsLibraryMediaContainer) GetViewGroup() string {
	if o == nil {
		return ""
	}
	return o.ViewGroup
}

func (o *GetActorsLibraryMediaContainer) GetViewMode() string {
	if o == nil {
		return ""
	}
	return o.ViewMode
}

func (o *GetActorsLibraryMediaContainer) GetDirectory() []GetActorsLibraryDirectory {
	if o == nil {
		return nil
	}
	return o.Directory
}

// GetActorsLibraryResponseBody - Successful response containing media container data.
type GetActorsLibraryResponseBody struct {
	MediaContainer *GetActorsLibraryMediaContainer `json:"MediaContainer,omitempty"`
}

func (o *GetActorsLibraryResponseBody) GetMediaContainer() *GetActorsLibraryMediaContainer {
	if o == nil {
		return nil
	}
	return o.MediaContainer
}

type GetActorsLibraryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response containing media container data.
	Object *GetActorsLibraryResponseBody
}

func (o *GetActorsLibraryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetActorsLibraryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetActorsLibraryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetActorsLibraryResponse) GetObject() *GetActorsLibraryResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
