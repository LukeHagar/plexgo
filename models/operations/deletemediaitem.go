// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type DeleteMediaItemGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (d DeleteMediaItemGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeleteMediaItemGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *DeleteMediaItemGlobals) GetAccepts() *components.Accepts {
	if d == nil {
		return nil
	}
	return d.Accepts
}

func (d *DeleteMediaItemGlobals) GetClientIdentifier() *string {
	if d == nil {
		return nil
	}
	return d.ClientIdentifier
}

func (d *DeleteMediaItemGlobals) GetProduct() *string {
	if d == nil {
		return nil
	}
	return d.Product
}

func (d *DeleteMediaItemGlobals) GetVersion() *string {
	if d == nil {
		return nil
	}
	return d.Version
}

func (d *DeleteMediaItemGlobals) GetPlatform() *string {
	if d == nil {
		return nil
	}
	return d.Platform
}

func (d *DeleteMediaItemGlobals) GetPlatformVersion() *string {
	if d == nil {
		return nil
	}
	return d.PlatformVersion
}

func (d *DeleteMediaItemGlobals) GetDevice() *string {
	if d == nil {
		return nil
	}
	return d.Device
}

func (d *DeleteMediaItemGlobals) GetModel() *string {
	if d == nil {
		return nil
	}
	return d.Model
}

func (d *DeleteMediaItemGlobals) GetDeviceVendor() *string {
	if d == nil {
		return nil
	}
	return d.DeviceVendor
}

func (d *DeleteMediaItemGlobals) GetDeviceName() *string {
	if d == nil {
		return nil
	}
	return d.DeviceName
}

func (d *DeleteMediaItemGlobals) GetMarketplace() *string {
	if d == nil {
		return nil
	}
	return d.Marketplace
}

type DeleteMediaItemRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	Ids         string  `pathParam:"style=simple,explode=false,name=ids"`
	MediaItem   string  `pathParam:"style=simple,explode=false,name=mediaItem"`
	// Whether proxy items, such as media optimized versions, should also be deleted.  Defaults to false.
	Proxy *components.BoolInt `queryParam:"style=form,explode=true,name=proxy"`
}

func (d DeleteMediaItemRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeleteMediaItemRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"ids", "mediaItem"}); err != nil {
		return err
	}
	return nil
}

func (d *DeleteMediaItemRequest) GetAccepts() *components.Accepts {
	if d == nil {
		return nil
	}
	return d.Accepts
}

func (d *DeleteMediaItemRequest) GetClientIdentifier() *string {
	if d == nil {
		return nil
	}
	return d.ClientIdentifier
}

func (d *DeleteMediaItemRequest) GetProduct() *string {
	if d == nil {
		return nil
	}
	return d.Product
}

func (d *DeleteMediaItemRequest) GetVersion() *string {
	if d == nil {
		return nil
	}
	return d.Version
}

func (d *DeleteMediaItemRequest) GetPlatform() *string {
	if d == nil {
		return nil
	}
	return d.Platform
}

func (d *DeleteMediaItemRequest) GetPlatformVersion() *string {
	if d == nil {
		return nil
	}
	return d.PlatformVersion
}

func (d *DeleteMediaItemRequest) GetDevice() *string {
	if d == nil {
		return nil
	}
	return d.Device
}

func (d *DeleteMediaItemRequest) GetModel() *string {
	if d == nil {
		return nil
	}
	return d.Model
}

func (d *DeleteMediaItemRequest) GetDeviceVendor() *string {
	if d == nil {
		return nil
	}
	return d.DeviceVendor
}

func (d *DeleteMediaItemRequest) GetDeviceName() *string {
	if d == nil {
		return nil
	}
	return d.DeviceName
}

func (d *DeleteMediaItemRequest) GetMarketplace() *string {
	if d == nil {
		return nil
	}
	return d.Marketplace
}

func (d *DeleteMediaItemRequest) GetIds() string {
	if d == nil {
		return ""
	}
	return d.Ids
}

func (d *DeleteMediaItemRequest) GetMediaItem() string {
	if d == nil {
		return ""
	}
	return d.MediaItem
}

func (d *DeleteMediaItemRequest) GetProxy() *components.BoolInt {
	if d == nil {
		return nil
	}
	return d.Proxy
}

type DeleteMediaItemResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (d *DeleteMediaItemResponse) GetContentType() string {
	if d == nil {
		return ""
	}
	return d.ContentType
}

func (d *DeleteMediaItemResponse) GetStatusCode() int {
	if d == nil {
		return 0
	}
	return d.StatusCode
}

func (d *DeleteMediaItemResponse) GetRawResponse() *http.Response {
	if d == nil {
		return nil
	}
	return d.RawResponse
}
