// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type GetDownloadQueueGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (g GetDownloadQueueGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDownloadQueueGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetDownloadQueueGlobals) GetAccepts() *components.Accepts {
	if g == nil {
		return nil
	}
	return g.Accepts
}

func (g *GetDownloadQueueGlobals) GetClientIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.ClientIdentifier
}

func (g *GetDownloadQueueGlobals) GetProduct() *string {
	if g == nil {
		return nil
	}
	return g.Product
}

func (g *GetDownloadQueueGlobals) GetVersion() *string {
	if g == nil {
		return nil
	}
	return g.Version
}

func (g *GetDownloadQueueGlobals) GetPlatform() *string {
	if g == nil {
		return nil
	}
	return g.Platform
}

func (g *GetDownloadQueueGlobals) GetPlatformVersion() *string {
	if g == nil {
		return nil
	}
	return g.PlatformVersion
}

func (g *GetDownloadQueueGlobals) GetDevice() *string {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetDownloadQueueGlobals) GetModel() *string {
	if g == nil {
		return nil
	}
	return g.Model
}

func (g *GetDownloadQueueGlobals) GetDeviceVendor() *string {
	if g == nil {
		return nil
	}
	return g.DeviceVendor
}

func (g *GetDownloadQueueGlobals) GetDeviceName() *string {
	if g == nil {
		return nil
	}
	return g.DeviceName
}

func (g *GetDownloadQueueGlobals) GetMarketplace() *string {
	if g == nil {
		return nil
	}
	return g.Marketplace
}

type GetDownloadQueueRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The queue id
	QueueID int64 `pathParam:"style=simple,explode=false,name=queueId"`
}

func (g GetDownloadQueueRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDownloadQueueRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"queueId"}); err != nil {
		return err
	}
	return nil
}

func (g *GetDownloadQueueRequest) GetAccepts() *components.Accepts {
	if g == nil {
		return nil
	}
	return g.Accepts
}

func (g *GetDownloadQueueRequest) GetClientIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.ClientIdentifier
}

func (g *GetDownloadQueueRequest) GetProduct() *string {
	if g == nil {
		return nil
	}
	return g.Product
}

func (g *GetDownloadQueueRequest) GetVersion() *string {
	if g == nil {
		return nil
	}
	return g.Version
}

func (g *GetDownloadQueueRequest) GetPlatform() *string {
	if g == nil {
		return nil
	}
	return g.Platform
}

func (g *GetDownloadQueueRequest) GetPlatformVersion() *string {
	if g == nil {
		return nil
	}
	return g.PlatformVersion
}

func (g *GetDownloadQueueRequest) GetDevice() *string {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetDownloadQueueRequest) GetModel() *string {
	if g == nil {
		return nil
	}
	return g.Model
}

func (g *GetDownloadQueueRequest) GetDeviceVendor() *string {
	if g == nil {
		return nil
	}
	return g.DeviceVendor
}

func (g *GetDownloadQueueRequest) GetDeviceName() *string {
	if g == nil {
		return nil
	}
	return g.DeviceName
}

func (g *GetDownloadQueueRequest) GetMarketplace() *string {
	if g == nil {
		return nil
	}
	return g.Marketplace
}

func (g *GetDownloadQueueRequest) GetQueueID() int64 {
	if g == nil {
		return 0
	}
	return g.QueueID
}

// GetDownloadQueueStatus - The state of this queue
//   - deciding: At least one item is still being decided
//   - waiting: At least one item is waiting for transcode and none are currently transcoding
//   - processing: At least one item is being transcoded
//   - done: All items are available (or potentially expired)
//   - error: At least one item has encountered an error
type GetDownloadQueueStatus string

const (
	GetDownloadQueueStatusDeciding   GetDownloadQueueStatus = "deciding"
	GetDownloadQueueStatusWaiting    GetDownloadQueueStatus = "waiting"
	GetDownloadQueueStatusProcessing GetDownloadQueueStatus = "processing"
	GetDownloadQueueStatusDone       GetDownloadQueueStatus = "done"
	GetDownloadQueueStatusError      GetDownloadQueueStatus = "error"
)

func (e GetDownloadQueueStatus) ToPointer() *GetDownloadQueueStatus {
	return &e
}
func (e *GetDownloadQueueStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deciding":
		fallthrough
	case "waiting":
		fallthrough
	case "processing":
		fallthrough
	case "done":
		fallthrough
	case "error":
		*e = GetDownloadQueueStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDownloadQueueStatus: %v", v)
	}
}

type GetDownloadQueueDownloadQueue struct {
	ID        *int64 `json:"id,omitempty"`
	ItemCount *int64 `json:"itemCount,omitempty"`
	// The state of this queue
	//   - deciding: At least one item is still being decided
	//   - waiting: At least one item is waiting for transcode and none are currently transcoding
	//   - processing: At least one item is being transcoded
	//   - done: All items are available (or potentially expired)
	//   - error: At least one item has encountered an error
	//
	Status *GetDownloadQueueStatus `json:"status,omitempty"`
}

func (g *GetDownloadQueueDownloadQueue) GetID() *int64 {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetDownloadQueueDownloadQueue) GetItemCount() *int64 {
	if g == nil {
		return nil
	}
	return g.ItemCount
}

func (g *GetDownloadQueueDownloadQueue) GetStatus() *GetDownloadQueueStatus {
	if g == nil {
		return nil
	}
	return g.Status
}

// GetDownloadQueueMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type GetDownloadQueueMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize     *int64                          `json:"totalSize,omitempty"`
	DownloadQueue []GetDownloadQueueDownloadQueue `json:"DownloadQueue,omitempty"`
}

func (g *GetDownloadQueueMediaContainer) GetIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.Identifier
}

func (g *GetDownloadQueueMediaContainer) GetOffset() *int64 {
	if g == nil {
		return nil
	}
	return g.Offset
}

func (g *GetDownloadQueueMediaContainer) GetSize() *int64 {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetDownloadQueueMediaContainer) GetTotalSize() *int64 {
	if g == nil {
		return nil
	}
	return g.TotalSize
}

func (g *GetDownloadQueueMediaContainer) GetDownloadQueue() []GetDownloadQueueDownloadQueue {
	if g == nil {
		return nil
	}
	return g.DownloadQueue
}

// GetDownloadQueueResponseBody - OK
type GetDownloadQueueResponseBody struct {
	MediaContainer *GetDownloadQueueMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetDownloadQueueResponseBody) GetMediaContainer() *GetDownloadQueueMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetDownloadQueueResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object *GetDownloadQueueResponseBody
}

func (g *GetDownloadQueueResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetDownloadQueueResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetDownloadQueueResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetDownloadQueueResponse) GetObject() *GetDownloadQueueResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
