// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type CreateDVRGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (c CreateDVRGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDVRGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CreateDVRGlobals) GetAccepts() *components.Accepts {
	if c == nil {
		return nil
	}
	return c.Accepts
}

func (c *CreateDVRGlobals) GetClientIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.ClientIdentifier
}

func (c *CreateDVRGlobals) GetProduct() *string {
	if c == nil {
		return nil
	}
	return c.Product
}

func (c *CreateDVRGlobals) GetVersion() *string {
	if c == nil {
		return nil
	}
	return c.Version
}

func (c *CreateDVRGlobals) GetPlatform() *string {
	if c == nil {
		return nil
	}
	return c.Platform
}

func (c *CreateDVRGlobals) GetPlatformVersion() *string {
	if c == nil {
		return nil
	}
	return c.PlatformVersion
}

func (c *CreateDVRGlobals) GetDevice() *string {
	if c == nil {
		return nil
	}
	return c.Device
}

func (c *CreateDVRGlobals) GetModel() *string {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *CreateDVRGlobals) GetDeviceVendor() *string {
	if c == nil {
		return nil
	}
	return c.DeviceVendor
}

func (c *CreateDVRGlobals) GetDeviceName() *string {
	if c == nil {
		return nil
	}
	return c.DeviceName
}

func (c *CreateDVRGlobals) GetMarketplace() *string {
	if c == nil {
		return nil
	}
	return c.Marketplace
}

type CreateDVRRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The EPG lineup.
	Lineup *string `queryParam:"style=form,explode=true,name=lineup"`
	// The device.
	DeviceQueryParameter []string `queryParam:"style=form,explode=true,name=device"`
	// The language.
	Language *string `queryParam:"style=form,explode=true,name=language"`
}

func (c CreateDVRRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDVRRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CreateDVRRequest) GetAccepts() *components.Accepts {
	if c == nil {
		return nil
	}
	return c.Accepts
}

func (c *CreateDVRRequest) GetClientIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.ClientIdentifier
}

func (c *CreateDVRRequest) GetProduct() *string {
	if c == nil {
		return nil
	}
	return c.Product
}

func (c *CreateDVRRequest) GetVersion() *string {
	if c == nil {
		return nil
	}
	return c.Version
}

func (c *CreateDVRRequest) GetPlatform() *string {
	if c == nil {
		return nil
	}
	return c.Platform
}

func (c *CreateDVRRequest) GetPlatformVersion() *string {
	if c == nil {
		return nil
	}
	return c.PlatformVersion
}

func (c *CreateDVRRequest) GetDevice() *string {
	if c == nil {
		return nil
	}
	return c.Device
}

func (c *CreateDVRRequest) GetModel() *string {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *CreateDVRRequest) GetDeviceVendor() *string {
	if c == nil {
		return nil
	}
	return c.DeviceVendor
}

func (c *CreateDVRRequest) GetDeviceName() *string {
	if c == nil {
		return nil
	}
	return c.DeviceName
}

func (c *CreateDVRRequest) GetMarketplace() *string {
	if c == nil {
		return nil
	}
	return c.Marketplace
}

func (c *CreateDVRRequest) GetLineup() *string {
	if c == nil {
		return nil
	}
	return c.Lineup
}

func (c *CreateDVRRequest) GetDeviceQueryParameter() []string {
	if c == nil {
		return nil
	}
	return c.DeviceQueryParameter
}

func (c *CreateDVRRequest) GetLanguage() *string {
	if c == nil {
		return nil
	}
	return c.Language
}

type CreateDVRResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	DvrRequestHandlerSlashGetResponses200 *components.DvrRequestHandlerSlashGetResponses200
	Headers                               map[string][]string
}

func (c *CreateDVRResponse) GetContentType() string {
	if c == nil {
		return ""
	}
	return c.ContentType
}

func (c *CreateDVRResponse) GetStatusCode() int {
	if c == nil {
		return 0
	}
	return c.StatusCode
}

func (c *CreateDVRResponse) GetRawResponse() *http.Response {
	if c == nil {
		return nil
	}
	return c.RawResponse
}

func (c *CreateDVRResponse) GetDvrRequestHandlerSlashGetResponses200() *components.DvrRequestHandlerSlashGetResponses200 {
	if c == nil {
		return nil
	}
	return c.DvrRequestHandlerSlashGetResponses200
}

func (c *CreateDVRResponse) GetHeaders() map[string][]string {
	if c == nil {
		return map[string][]string{}
	}
	return c.Headers
}
