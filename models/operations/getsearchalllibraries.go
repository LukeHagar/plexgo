// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/types"
	"net/http"
)

type SearchTypes string

const (
	SearchTypesMovies      SearchTypes = "movies"
	SearchTypesMusic       SearchTypes = "music"
	SearchTypesOtherVideos SearchTypes = "otherVideos"
	SearchTypesPeople      SearchTypes = "people"
	SearchTypesTv          SearchTypes = "tv"
)

func (e SearchTypes) ToPointer() *SearchTypes {
	return &e
}

// GetSearchAllLibrariesQueryParamIncludeCollections - Whether to include collections in the search results.
type GetSearchAllLibrariesQueryParamIncludeCollections int

const (
	GetSearchAllLibrariesQueryParamIncludeCollectionsDisable GetSearchAllLibrariesQueryParamIncludeCollections = 0
	GetSearchAllLibrariesQueryParamIncludeCollectionsEnable  GetSearchAllLibrariesQueryParamIncludeCollections = 1
)

func (e GetSearchAllLibrariesQueryParamIncludeCollections) ToPointer() *GetSearchAllLibrariesQueryParamIncludeCollections {
	return &e
}
func (e *GetSearchAllLibrariesQueryParamIncludeCollections) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetSearchAllLibrariesQueryParamIncludeCollections(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesQueryParamIncludeCollections: %v", v)
	}
}

// GetSearchAllLibrariesQueryParamIncludeExternalMedia - Whether to include external media in the search results.
type GetSearchAllLibrariesQueryParamIncludeExternalMedia int

const (
	GetSearchAllLibrariesQueryParamIncludeExternalMediaDisable GetSearchAllLibrariesQueryParamIncludeExternalMedia = 0
	GetSearchAllLibrariesQueryParamIncludeExternalMediaEnable  GetSearchAllLibrariesQueryParamIncludeExternalMedia = 1
)

func (e GetSearchAllLibrariesQueryParamIncludeExternalMedia) ToPointer() *GetSearchAllLibrariesQueryParamIncludeExternalMedia {
	return &e
}
func (e *GetSearchAllLibrariesQueryParamIncludeExternalMedia) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetSearchAllLibrariesQueryParamIncludeExternalMedia(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesQueryParamIncludeExternalMedia: %v", v)
	}
}

type GetSearchAllLibrariesRequest struct {
	// The search query term.
	Query string `queryParam:"style=form,explode=true,name=query"`
	// An opaque identifier unique to the client (UUID, serial number, or other unique device ID)
	ClientID string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// Limit the number of results returned.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// A comma-separated list of search types to include. Valid values are: movies, music, otherVideos, people, tv.
	//
	SearchTypes []SearchTypes `queryParam:"style=form,explode=false,name=searchTypes"`
	// Whether to include collections in the search results.
	IncludeCollections *GetSearchAllLibrariesQueryParamIncludeCollections `default:"0" queryParam:"style=form,explode=true,name=includeCollections"`
	// Whether to include external media in the search results.
	IncludeExternalMedia *GetSearchAllLibrariesQueryParamIncludeExternalMedia `default:"0" queryParam:"style=form,explode=true,name=includeExternalMedia"`
}

func (g GetSearchAllLibrariesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesRequest) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *GetSearchAllLibrariesRequest) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *GetSearchAllLibrariesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetSearchAllLibrariesRequest) GetSearchTypes() []SearchTypes {
	if o == nil {
		return nil
	}
	return o.SearchTypes
}

func (o *GetSearchAllLibrariesRequest) GetIncludeCollections() *GetSearchAllLibrariesQueryParamIncludeCollections {
	if o == nil {
		return nil
	}
	return o.IncludeCollections
}

func (o *GetSearchAllLibrariesRequest) GetIncludeExternalMedia() *GetSearchAllLibrariesQueryParamIncludeExternalMedia {
	if o == nil {
		return nil
	}
	return o.IncludeExternalMedia
}

// GetSearchAllLibrariesType - The type of media content
type GetSearchAllLibrariesType string

const (
	GetSearchAllLibrariesTypeMovie   GetSearchAllLibrariesType = "movie"
	GetSearchAllLibrariesTypeTvShow  GetSearchAllLibrariesType = "show"
	GetSearchAllLibrariesTypeSeason  GetSearchAllLibrariesType = "season"
	GetSearchAllLibrariesTypeEpisode GetSearchAllLibrariesType = "episode"
	GetSearchAllLibrariesTypeArtist  GetSearchAllLibrariesType = "artist"
	GetSearchAllLibrariesTypeAlbum   GetSearchAllLibrariesType = "album"
)

func (e GetSearchAllLibrariesType) ToPointer() *GetSearchAllLibrariesType {
	return &e
}

// GetSearchAllLibrariesFlattenSeasons - Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
type GetSearchAllLibrariesFlattenSeasons string

const (
	GetSearchAllLibrariesFlattenSeasonsLibraryDefault GetSearchAllLibrariesFlattenSeasons = "-1"
	GetSearchAllLibrariesFlattenSeasonsHide           GetSearchAllLibrariesFlattenSeasons = "0"
	GetSearchAllLibrariesFlattenSeasonsShow           GetSearchAllLibrariesFlattenSeasons = "1"
)

func (e GetSearchAllLibrariesFlattenSeasons) ToPointer() *GetSearchAllLibrariesFlattenSeasons {
	return &e
}

// GetSearchAllLibrariesEpisodeSort - Setting that indicates how episodes are sorted for the show. (-1 = Library default, 0 = Oldest first, 1 = Newest first).
type GetSearchAllLibrariesEpisodeSort string

const (
	GetSearchAllLibrariesEpisodeSortLibraryDefault GetSearchAllLibrariesEpisodeSort = "-1"
	GetSearchAllLibrariesEpisodeSortOldestFirst    GetSearchAllLibrariesEpisodeSort = "0"
	GetSearchAllLibrariesEpisodeSortNewestFirst    GetSearchAllLibrariesEpisodeSort = "1"
)

func (e GetSearchAllLibrariesEpisodeSort) ToPointer() *GetSearchAllLibrariesEpisodeSort {
	return &e
}

// GetSearchAllLibrariesEnableCreditsMarkerGeneration - Setting that indicates if credits markers detection is enabled. (-1 = Library default, 0 = Disabled).
type GetSearchAllLibrariesEnableCreditsMarkerGeneration string

const (
	GetSearchAllLibrariesEnableCreditsMarkerGenerationLibraryDefault GetSearchAllLibrariesEnableCreditsMarkerGeneration = "-1"
	GetSearchAllLibrariesEnableCreditsMarkerGenerationDisabled       GetSearchAllLibrariesEnableCreditsMarkerGeneration = "0"
)

func (e GetSearchAllLibrariesEnableCreditsMarkerGeneration) ToPointer() *GetSearchAllLibrariesEnableCreditsMarkerGeneration {
	return &e
}

// GetSearchAllLibrariesShowOrdering - Setting that indicates the episode ordering for the show.
// None = Library default,
// tmdbAiring = The Movie Database (Aired),
// aired = TheTVDB (Aired),
// dvd = TheTVDB (DVD),
// absolute = TheTVDB (Absolute)).
type GetSearchAllLibrariesShowOrdering string

const (
	GetSearchAllLibrariesShowOrderingNone         GetSearchAllLibrariesShowOrdering = "None"
	GetSearchAllLibrariesShowOrderingTmdbAiring   GetSearchAllLibrariesShowOrdering = "tmdbAiring"
	GetSearchAllLibrariesShowOrderingTvdbAired    GetSearchAllLibrariesShowOrdering = "aired"
	GetSearchAllLibrariesShowOrderingTvdbDvd      GetSearchAllLibrariesShowOrdering = "dvd"
	GetSearchAllLibrariesShowOrderingTvdbAbsolute GetSearchAllLibrariesShowOrdering = "absolute"
)

func (e GetSearchAllLibrariesShowOrdering) ToPointer() *GetSearchAllLibrariesShowOrdering {
	return &e
}

type GetSearchAllLibrariesOptimizedForStreaming int

const (
	GetSearchAllLibrariesOptimizedForStreamingDisable GetSearchAllLibrariesOptimizedForStreaming = 0
	GetSearchAllLibrariesOptimizedForStreamingEnable  GetSearchAllLibrariesOptimizedForStreaming = 1
)

func (e GetSearchAllLibrariesOptimizedForStreaming) ToPointer() *GetSearchAllLibrariesOptimizedForStreaming {
	return &e
}
func (e *GetSearchAllLibrariesOptimizedForStreaming) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetSearchAllLibrariesOptimizedForStreaming(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesOptimizedForStreaming: %v", v)
	}
}

type GetSearchAllLibrariesHasThumbnail string

const (
	GetSearchAllLibrariesHasThumbnailFalse GetSearchAllLibrariesHasThumbnail = "0"
	GetSearchAllLibrariesHasThumbnailTrue  GetSearchAllLibrariesHasThumbnail = "1"
)

func (e GetSearchAllLibrariesHasThumbnail) ToPointer() *GetSearchAllLibrariesHasThumbnail {
	return &e
}
func (e *GetSearchAllLibrariesHasThumbnail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		*e = GetSearchAllLibrariesHasThumbnail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesHasThumbnail: %v", v)
	}
}

type GetSearchAllLibrariesStream struct {
	ID int64 `json:"id"`
	// Type of stream (1 = video, 2 = audio, 3 = subtitle)
	StreamType int64 `json:"streamType"`
	// Indicates if this is the default stream
	Default *bool `json:"default,omitempty"`
	// Indicates if the stream is selected
	Selected *bool `json:"selected,omitempty"`
	// Codec used by the stream
	Codec string `json:"codec"`
	// The index of the stream
	Index int64 `json:"index"`
	// The bitrate of the stream in kbps
	Bitrate *int64 `json:"bitrate,omitempty"`
	// The color primaries of the video stream
	ColorPrimaries *string `json:"colorPrimaries,omitempty"`
	// The color range of the video stream
	ColorRange *string `json:"colorRange,omitempty"`
	// The color space of the video stream
	ColorSpace *string `json:"colorSpace,omitempty"`
	// The transfer characteristics (TRC) of the video stream
	ColorTrc *string `json:"colorTrc,omitempty"`
	// The bit depth of the video stream
	BitDepth *int64 `json:"bitDepth,omitempty"`
	// The chroma location of the video stream
	ChromaLocation *string `json:"chromaLocation,omitempty"`
	// The identifier of the video stream
	StreamIdentifier *string `json:"streamIdentifier,omitempty"`
	// The chroma subsampling format
	ChromaSubsampling *string `json:"chromaSubsampling,omitempty"`
	// The coded height of the video stream
	CodedHeight *int64 `json:"codedHeight,omitempty"`
	// The coded width of the video stream
	CodedWidth *int64 `json:"codedWidth,omitempty"`
	// The frame rate of the video stream
	FrameRate *float64 `json:"frameRate,omitempty"`
	// Indicates if the stream has a scaling matrix
	HasScalingMatrix *bool   `json:"hasScalingMatrix,omitempty"`
	HearingImpaired  *bool   `json:"hearingImpaired,omitempty"`
	ClosedCaptions   *bool   `json:"closedCaptions,omitempty"`
	EmbeddedInVideo  *string `json:"embeddedInVideo,omitempty"`
	// The height of the video stream
	Height *int64 `json:"height,omitempty"`
	// The level of the video codec
	Level *int64 `json:"level,omitempty"`
	// The profile of the video codec
	Profile *string `json:"profile,omitempty"`
	// Number of reference frames
	RefFrames *int64 `json:"refFrames,omitempty"`
	// The scan type (progressive or interlaced)
	ScanType *string `json:"scanType,omitempty"`
	// The width of the video stream
	Width *int64 `json:"width,omitempty"`
	// Display title of the stream
	DisplayTitle *string `json:"displayTitle,omitempty"`
	// Extended display title of the stream
	ExtendedDisplayTitle *string `json:"extendedDisplayTitle,omitempty"`
	// Number of audio channels (for audio streams)
	Channels *int64 `json:"channels,omitempty"`
	// The language of the stream (for audio/subtitle streams)
	Language *string `json:"language,omitempty"`
	// Language tag of the stream
	LanguageTag *string `json:"languageTag,omitempty"`
	// Language code of the stream
	LanguageCode *string `json:"languageCode,omitempty"`
	// The audio channel layout
	AudioChannelLayout *string `json:"audioChannelLayout,omitempty"`
	// Sampling rate of the audio stream in Hz
	SamplingRate *int64 `json:"samplingRate,omitempty"`
	// Title of the subtitle track (for subtitle streams)
	Title *string `json:"title,omitempty"`
	// Indicates if the subtitle stream can auto-sync
	CanAutoSync *bool `json:"canAutoSync,omitempty"`
}

func (o *GetSearchAllLibrariesStream) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesStream) GetStreamType() int64 {
	if o == nil {
		return 0
	}
	return o.StreamType
}

func (o *GetSearchAllLibrariesStream) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *GetSearchAllLibrariesStream) GetSelected() *bool {
	if o == nil {
		return nil
	}
	return o.Selected
}

func (o *GetSearchAllLibrariesStream) GetCodec() string {
	if o == nil {
		return ""
	}
	return o.Codec
}

func (o *GetSearchAllLibrariesStream) GetIndex() int64 {
	if o == nil {
		return 0
	}
	return o.Index
}

func (o *GetSearchAllLibrariesStream) GetBitrate() *int64 {
	if o == nil {
		return nil
	}
	return o.Bitrate
}

func (o *GetSearchAllLibrariesStream) GetColorPrimaries() *string {
	if o == nil {
		return nil
	}
	return o.ColorPrimaries
}

func (o *GetSearchAllLibrariesStream) GetColorRange() *string {
	if o == nil {
		return nil
	}
	return o.ColorRange
}

func (o *GetSearchAllLibrariesStream) GetColorSpace() *string {
	if o == nil {
		return nil
	}
	return o.ColorSpace
}

func (o *GetSearchAllLibrariesStream) GetColorTrc() *string {
	if o == nil {
		return nil
	}
	return o.ColorTrc
}

func (o *GetSearchAllLibrariesStream) GetBitDepth() *int64 {
	if o == nil {
		return nil
	}
	return o.BitDepth
}

func (o *GetSearchAllLibrariesStream) GetChromaLocation() *string {
	if o == nil {
		return nil
	}
	return o.ChromaLocation
}

func (o *GetSearchAllLibrariesStream) GetStreamIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.StreamIdentifier
}

func (o *GetSearchAllLibrariesStream) GetChromaSubsampling() *string {
	if o == nil {
		return nil
	}
	return o.ChromaSubsampling
}

func (o *GetSearchAllLibrariesStream) GetCodedHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.CodedHeight
}

func (o *GetSearchAllLibrariesStream) GetCodedWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.CodedWidth
}

func (o *GetSearchAllLibrariesStream) GetFrameRate() *float64 {
	if o == nil {
		return nil
	}
	return o.FrameRate
}

func (o *GetSearchAllLibrariesStream) GetHasScalingMatrix() *bool {
	if o == nil {
		return nil
	}
	return o.HasScalingMatrix
}

func (o *GetSearchAllLibrariesStream) GetHearingImpaired() *bool {
	if o == nil {
		return nil
	}
	return o.HearingImpaired
}

func (o *GetSearchAllLibrariesStream) GetClosedCaptions() *bool {
	if o == nil {
		return nil
	}
	return o.ClosedCaptions
}

func (o *GetSearchAllLibrariesStream) GetEmbeddedInVideo() *string {
	if o == nil {
		return nil
	}
	return o.EmbeddedInVideo
}

func (o *GetSearchAllLibrariesStream) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *GetSearchAllLibrariesStream) GetLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *GetSearchAllLibrariesStream) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *GetSearchAllLibrariesStream) GetRefFrames() *int64 {
	if o == nil {
		return nil
	}
	return o.RefFrames
}

func (o *GetSearchAllLibrariesStream) GetScanType() *string {
	if o == nil {
		return nil
	}
	return o.ScanType
}

func (o *GetSearchAllLibrariesStream) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *GetSearchAllLibrariesStream) GetDisplayTitle() *string {
	if o == nil {
		return nil
	}
	return o.DisplayTitle
}

func (o *GetSearchAllLibrariesStream) GetExtendedDisplayTitle() *string {
	if o == nil {
		return nil
	}
	return o.ExtendedDisplayTitle
}

func (o *GetSearchAllLibrariesStream) GetChannels() *int64 {
	if o == nil {
		return nil
	}
	return o.Channels
}

func (o *GetSearchAllLibrariesStream) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *GetSearchAllLibrariesStream) GetLanguageTag() *string {
	if o == nil {
		return nil
	}
	return o.LanguageTag
}

func (o *GetSearchAllLibrariesStream) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *GetSearchAllLibrariesStream) GetAudioChannelLayout() *string {
	if o == nil {
		return nil
	}
	return o.AudioChannelLayout
}

func (o *GetSearchAllLibrariesStream) GetSamplingRate() *int64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *GetSearchAllLibrariesStream) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetSearchAllLibrariesStream) GetCanAutoSync() *bool {
	if o == nil {
		return nil
	}
	return o.CanAutoSync
}

type GetSearchAllLibrariesPart struct {
	ID       int    `json:"id"`
	Key      string `json:"key"`
	Duration *int   `json:"duration,omitempty"`
	File     string `json:"file"`
	Size     int64  `json:"size"`
	// The container format of the media file.
	//
	Container             string                             `json:"container"`
	AudioProfile          *string                            `json:"audioProfile,omitempty"`
	Has64bitOffsets       *bool                              `json:"has64bitOffsets,omitempty"`
	OptimizedForStreaming *bool                              `json:"optimizedForStreaming,omitempty"`
	VideoProfile          *string                            `json:"videoProfile,omitempty"`
	Indexes               *string                            `json:"indexes,omitempty"`
	HasThumbnail          *GetSearchAllLibrariesHasThumbnail `default:"0" json:"hasThumbnail"`
	Stream                []GetSearchAllLibrariesStream      `json:"Stream,omitempty"`
}

func (g GetSearchAllLibrariesPart) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesPart) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesPart) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesPart) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetSearchAllLibrariesPart) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetSearchAllLibrariesPart) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

func (o *GetSearchAllLibrariesPart) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *GetSearchAllLibrariesPart) GetContainer() string {
	if o == nil {
		return ""
	}
	return o.Container
}

func (o *GetSearchAllLibrariesPart) GetAudioProfile() *string {
	if o == nil {
		return nil
	}
	return o.AudioProfile
}

func (o *GetSearchAllLibrariesPart) GetHas64bitOffsets() *bool {
	if o == nil {
		return nil
	}
	return o.Has64bitOffsets
}

func (o *GetSearchAllLibrariesPart) GetOptimizedForStreaming() *bool {
	if o == nil {
		return nil
	}
	return o.OptimizedForStreaming
}

func (o *GetSearchAllLibrariesPart) GetVideoProfile() *string {
	if o == nil {
		return nil
	}
	return o.VideoProfile
}

func (o *GetSearchAllLibrariesPart) GetIndexes() *string {
	if o == nil {
		return nil
	}
	return o.Indexes
}

func (o *GetSearchAllLibrariesPart) GetHasThumbnail() *GetSearchAllLibrariesHasThumbnail {
	if o == nil {
		return nil
	}
	return o.HasThumbnail
}

func (o *GetSearchAllLibrariesPart) GetStream() []GetSearchAllLibrariesStream {
	if o == nil {
		return nil
	}
	return o.Stream
}

type GetSearchAllLibrariesMedia struct {
	ID                    int                                         `json:"id"`
	Duration              *int                                        `json:"duration,omitempty"`
	Bitrate               *int                                        `json:"bitrate,omitempty"`
	Width                 *int                                        `json:"width,omitempty"`
	Height                *int                                        `json:"height,omitempty"`
	AspectRatio           *float64                                    `json:"aspectRatio,omitempty"`
	AudioProfile          *string                                     `json:"audioProfile,omitempty"`
	AudioChannels         *int                                        `json:"audioChannels,omitempty"`
	AudioCodec            *string                                     `json:"audioCodec,omitempty"`
	VideoCodec            *string                                     `json:"videoCodec,omitempty"`
	VideoResolution       *string                                     `json:"videoResolution,omitempty"`
	Container             string                                      `json:"container"`
	VideoFrameRate        *string                                     `json:"videoFrameRate,omitempty"`
	VideoProfile          *string                                     `json:"videoProfile,omitempty"`
	HasVoiceActivity      *bool                                       `json:"hasVoiceActivity,omitempty"`
	OptimizedForStreaming *GetSearchAllLibrariesOptimizedForStreaming `default:"0" json:"optimizedForStreaming"`
	Has64bitOffsets       *bool                                       `json:"has64bitOffsets,omitempty"`
	Part                  []GetSearchAllLibrariesPart                 `json:"Part"`
}

func (g GetSearchAllLibrariesMedia) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesMedia) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesMedia) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesMedia) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetSearchAllLibrariesMedia) GetBitrate() *int {
	if o == nil {
		return nil
	}
	return o.Bitrate
}

func (o *GetSearchAllLibrariesMedia) GetWidth() *int {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *GetSearchAllLibrariesMedia) GetHeight() *int {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *GetSearchAllLibrariesMedia) GetAspectRatio() *float64 {
	if o == nil {
		return nil
	}
	return o.AspectRatio
}

func (o *GetSearchAllLibrariesMedia) GetAudioProfile() *string {
	if o == nil {
		return nil
	}
	return o.AudioProfile
}

func (o *GetSearchAllLibrariesMedia) GetAudioChannels() *int {
	if o == nil {
		return nil
	}
	return o.AudioChannels
}

func (o *GetSearchAllLibrariesMedia) GetAudioCodec() *string {
	if o == nil {
		return nil
	}
	return o.AudioCodec
}

func (o *GetSearchAllLibrariesMedia) GetVideoCodec() *string {
	if o == nil {
		return nil
	}
	return o.VideoCodec
}

func (o *GetSearchAllLibrariesMedia) GetVideoResolution() *string {
	if o == nil {
		return nil
	}
	return o.VideoResolution
}

func (o *GetSearchAllLibrariesMedia) GetContainer() string {
	if o == nil {
		return ""
	}
	return o.Container
}

func (o *GetSearchAllLibrariesMedia) GetVideoFrameRate() *string {
	if o == nil {
		return nil
	}
	return o.VideoFrameRate
}

func (o *GetSearchAllLibrariesMedia) GetVideoProfile() *string {
	if o == nil {
		return nil
	}
	return o.VideoProfile
}

func (o *GetSearchAllLibrariesMedia) GetHasVoiceActivity() *bool {
	if o == nil {
		return nil
	}
	return o.HasVoiceActivity
}

func (o *GetSearchAllLibrariesMedia) GetOptimizedForStreaming() *GetSearchAllLibrariesOptimizedForStreaming {
	if o == nil {
		return nil
	}
	return o.OptimizedForStreaming
}

func (o *GetSearchAllLibrariesMedia) GetHas64bitOffsets() *bool {
	if o == nil {
		return nil
	}
	return o.Has64bitOffsets
}

func (o *GetSearchAllLibrariesMedia) GetPart() []GetSearchAllLibrariesPart {
	if o == nil {
		return []GetSearchAllLibrariesPart{}
	}
	return o.Part
}

type GetSearchAllLibrariesGenre struct {
	Tag *string `json:"tag,omitempty"`
}

func (o *GetSearchAllLibrariesGenre) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

type GetSearchAllLibrariesCountry struct {
	Tag *string `json:"tag,omitempty"`
}

func (o *GetSearchAllLibrariesCountry) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

type GetSearchAllLibrariesDirector struct {
	Tag *string `json:"tag,omitempty"`
}

func (o *GetSearchAllLibrariesDirector) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

type GetSearchAllLibrariesWriter struct {
	Tag *string `json:"tag,omitempty"`
}

func (o *GetSearchAllLibrariesWriter) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

type GetSearchAllLibrariesCollection struct {
	Tag *string `json:"tag,omitempty"`
}

func (o *GetSearchAllLibrariesCollection) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

type GetSearchAllLibrariesRole struct {
	// The ID of the tag or actor.
	ID *int64 `json:"id,omitempty"`
	// The filter used to find the actor or tag.
	Filter *string `json:"filter,omitempty"`
	// The thumbnail of the actor
	Thumb *string `json:"thumb,omitempty"`
	// The name of the tag or actor.
	Tag *string `json:"tag,omitempty"`
	// Unique identifier for the tag.
	TagKey *string `json:"tagKey,omitempty"`
	// The role of the actor or tag in the media.
	Role *string `json:"role,omitempty"`
}

func (o *GetSearchAllLibrariesRole) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetSearchAllLibrariesRole) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetSearchAllLibrariesRole) GetThumb() *string {
	if o == nil {
		return nil
	}
	return o.Thumb
}

func (o *GetSearchAllLibrariesRole) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

func (o *GetSearchAllLibrariesRole) GetTagKey() *string {
	if o == nil {
		return nil
	}
	return o.TagKey
}

func (o *GetSearchAllLibrariesRole) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

type GetSearchAllLibrariesLocation struct {
	Path *string `json:"path,omitempty"`
}

func (o *GetSearchAllLibrariesLocation) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type GetSearchAllLibrariesMediaGUID struct {
	// Can be one of the following formats:
	// imdb://tt13015952, tmdb://2434012, tvdb://7945991
	//
	ID string `json:"id"`
}

func (o *GetSearchAllLibrariesMediaGUID) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetSearchAllLibrariesUltraBlurColors struct {
	TopLeft     string `json:"topLeft"`
	TopRight    string `json:"topRight"`
	BottomRight string `json:"bottomRight"`
	BottomLeft  string `json:"bottomLeft"`
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetTopLeft() string {
	if o == nil {
		return ""
	}
	return o.TopLeft
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetTopRight() string {
	if o == nil {
		return ""
	}
	return o.TopRight
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetBottomRight() string {
	if o == nil {
		return ""
	}
	return o.BottomRight
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetBottomLeft() string {
	if o == nil {
		return ""
	}
	return o.BottomLeft
}

type GetSearchAllLibrariesMetaDataRating struct {
	// A URI or path to the rating image.
	Image string `json:"image"`
	// The value of the rating.
	Value float32 `json:"value"`
	// The type of rating (e.g., audience, critic).
	Type string `json:"type"`
}

func (o *GetSearchAllLibrariesMetaDataRating) GetImage() string {
	if o == nil {
		return ""
	}
	return o.Image
}

func (o *GetSearchAllLibrariesMetaDataRating) GetValue() float32 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

func (o *GetSearchAllLibrariesMetaDataRating) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetSearchAllLibrariesLibraryType string

const (
	GetSearchAllLibrariesLibraryTypeCoverPoster GetSearchAllLibrariesLibraryType = "coverPoster"
	GetSearchAllLibrariesLibraryTypeBackground  GetSearchAllLibrariesLibraryType = "background"
	GetSearchAllLibrariesLibraryTypeSnapshot    GetSearchAllLibrariesLibraryType = "snapshot"
	GetSearchAllLibrariesLibraryTypeClearLogo   GetSearchAllLibrariesLibraryType = "clearLogo"
)

func (e GetSearchAllLibrariesLibraryType) ToPointer() *GetSearchAllLibrariesLibraryType {
	return &e
}

type GetSearchAllLibrariesImage struct {
	Alt  string                           `json:"alt"`
	Type GetSearchAllLibrariesLibraryType `json:"type"`
	URL  string                           `json:"url"`
}

func (o *GetSearchAllLibrariesImage) GetAlt() string {
	if o == nil {
		return ""
	}
	return o.Alt
}

func (o *GetSearchAllLibrariesImage) GetType() GetSearchAllLibrariesLibraryType {
	if o == nil {
		return GetSearchAllLibrariesLibraryType("")
	}
	return o.Type
}

func (o *GetSearchAllLibrariesImage) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetSearchAllLibrariesMetadata struct {
	// The rating key (Media ID) of this media item.
	// Note: This is always an integer, but is represented as a string in the API.
	//
	RatingKey           string  `json:"ratingKey"`
	Key                 string  `json:"key"`
	GUID                string  `json:"guid"`
	Studio              *string `json:"studio,omitempty"`
	SkipChildren        *bool   `json:"skipChildren,omitempty"`
	LibrarySectionID    *int64  `json:"librarySectionID,omitempty"`
	LibrarySectionTitle *string `json:"librarySectionTitle,omitempty"`
	LibrarySectionKey   *string `json:"librarySectionKey,omitempty"`
	// The type of media content
	//
	Type           GetSearchAllLibrariesType `json:"type"`
	Title          string                    `json:"title"`
	Slug           *string                   `json:"slug,omitempty"`
	ContentRating  *string                   `json:"contentRating,omitempty"`
	Summary        string                    `json:"summary"`
	Rating         *float64                  `json:"rating,omitempty"`
	AudienceRating *float64                  `json:"audienceRating,omitempty"`
	Year           *int                      `json:"year,omitempty"`
	SeasonCount    *int                      `json:"seasonCount,omitempty"`
	Tagline        *string                   `json:"tagline,omitempty"`
	// Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
	FlattenSeasons *GetSearchAllLibrariesFlattenSeasons `json:"flattenSeasons,omitempty"`
	// Setting that indicates how episodes are sorted for the show. (-1 = Library default, 0 = Oldest first, 1 = Newest first).
	EpisodeSort *GetSearchAllLibrariesEpisodeSort `json:"episodeSort,omitempty"`
	// Setting that indicates if credits markers detection is enabled. (-1 = Library default, 0 = Disabled).
	EnableCreditsMarkerGeneration *GetSearchAllLibrariesEnableCreditsMarkerGeneration `json:"enableCreditsMarkerGeneration,omitempty"`
	// Setting that indicates the episode ordering for the show.
	// None = Library default,
	// tmdbAiring = The Movie Database (Aired),
	// aired = TheTVDB (Aired),
	// dvd = TheTVDB (DVD),
	// absolute = TheTVDB (Absolute)).
	//
	ShowOrdering          *GetSearchAllLibrariesShowOrdering `json:"showOrdering,omitempty"`
	Thumb                 *string                            `json:"thumb,omitempty"`
	Art                   *string                            `json:"art,omitempty"`
	Banner                *string                            `json:"banner,omitempty"`
	Duration              *int                               `json:"duration,omitempty"`
	OriginallyAvailableAt *types.Date                        `json:"originallyAvailableAt,omitempty"`
	// Unix epoch datetime in seconds
	AddedAt int64 `json:"addedAt"`
	// Unix epoch datetime in seconds
	UpdatedAt            *int64  `json:"updatedAt,omitempty"`
	AudienceRatingImage  *string `json:"audienceRatingImage,omitempty"`
	ChapterSource        *string `json:"chapterSource,omitempty"`
	PrimaryExtraKey      *string `json:"primaryExtraKey,omitempty"`
	RatingImage          *string `json:"ratingImage,omitempty"`
	GrandparentRatingKey *string `json:"grandparentRatingKey,omitempty"`
	GrandparentGUID      *string `json:"grandparentGuid,omitempty"`
	GrandparentKey       *string `json:"grandparentKey,omitempty"`
	GrandparentTitle     *string `json:"grandparentTitle,omitempty"`
	GrandparentThumb     *string `json:"grandparentThumb,omitempty"`
	ParentSlug           *string `json:"parentSlug,omitempty"`
	GrandparentSlug      *string `json:"grandparentSlug,omitempty"`
	GrandparentArt       *string `json:"grandparentArt,omitempty"`
	GrandparentTheme     *string `json:"grandparentTheme,omitempty"`
	// The Media object is only included when type query is `4` or higher.
	//
	Media      []GetSearchAllLibrariesMedia      `json:"Media,omitempty"`
	Genre      []GetSearchAllLibrariesGenre      `json:"Genre,omitempty"`
	Country    []GetSearchAllLibrariesCountry    `json:"Country,omitempty"`
	Director   []GetSearchAllLibrariesDirector   `json:"Director,omitempty"`
	Writer     []GetSearchAllLibrariesWriter     `json:"Writer,omitempty"`
	Collection []GetSearchAllLibrariesCollection `json:"Collection,omitempty"`
	Role       []GetSearchAllLibrariesRole       `json:"Role,omitempty"`
	Location   []GetSearchAllLibrariesLocation   `json:"Location,omitempty"`
	// The Guid object is only included in the response if the `includeGuids` parameter is set to `1`.
	//
	MediaGUID              []GetSearchAllLibrariesMediaGUID      `json:"Guid,omitempty"`
	UltraBlurColors        *GetSearchAllLibrariesUltraBlurColors `json:"UltraBlurColors,omitempty"`
	MetaDataRating         []GetSearchAllLibrariesMetaDataRating `json:"Rating,omitempty"`
	Image                  []GetSearchAllLibrariesImage          `json:"Image,omitempty"`
	TitleSort              *string                               `json:"titleSort,omitempty"`
	ViewCount              *int                                  `json:"viewCount,omitempty"`
	LastViewedAt           *int                                  `json:"lastViewedAt,omitempty"`
	OriginalTitle          *string                               `json:"originalTitle,omitempty"`
	ViewOffset             *int                                  `json:"viewOffset,omitempty"`
	SkipCount              *int                                  `json:"skipCount,omitempty"`
	Index                  *int                                  `json:"index,omitempty"`
	Theme                  *string                               `json:"theme,omitempty"`
	LeafCount              *int                                  `json:"leafCount,omitempty"`
	ViewedLeafCount        *int                                  `json:"viewedLeafCount,omitempty"`
	ChildCount             *int                                  `json:"childCount,omitempty"`
	HasPremiumExtras       *string                               `json:"hasPremiumExtras,omitempty"`
	HasPremiumPrimaryExtra *string                               `json:"hasPremiumPrimaryExtra,omitempty"`
	// The rating key of the parent item.
	//
	ParentRatingKey *string `json:"parentRatingKey,omitempty"`
	ParentGUID      *string `json:"parentGuid,omitempty"`
	ParentStudio    *string `json:"parentStudio,omitempty"`
	ParentKey       *string `json:"parentKey,omitempty"`
	ParentTitle     *string `json:"parentTitle,omitempty"`
	ParentIndex     *int    `json:"parentIndex,omitempty"`
	ParentYear      *int    `json:"parentYear,omitempty"`
	ParentThumb     *string `json:"parentThumb,omitempty"`
	ParentTheme     *string `json:"parentTheme,omitempty"`
}

func (g GetSearchAllLibrariesMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesMetadata) GetRatingKey() string {
	if o == nil {
		return ""
	}
	return o.RatingKey
}

func (o *GetSearchAllLibrariesMetadata) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetSearchAllLibrariesMetadata) GetGUID() string {
	if o == nil {
		return ""
	}
	return o.GUID
}

func (o *GetSearchAllLibrariesMetadata) GetStudio() *string {
	if o == nil {
		return nil
	}
	return o.Studio
}

func (o *GetSearchAllLibrariesMetadata) GetSkipChildren() *bool {
	if o == nil {
		return nil
	}
	return o.SkipChildren
}

func (o *GetSearchAllLibrariesMetadata) GetLibrarySectionID() *int64 {
	if o == nil {
		return nil
	}
	return o.LibrarySectionID
}

func (o *GetSearchAllLibrariesMetadata) GetLibrarySectionTitle() *string {
	if o == nil {
		return nil
	}
	return o.LibrarySectionTitle
}

func (o *GetSearchAllLibrariesMetadata) GetLibrarySectionKey() *string {
	if o == nil {
		return nil
	}
	return o.LibrarySectionKey
}

func (o *GetSearchAllLibrariesMetadata) GetType() GetSearchAllLibrariesType {
	if o == nil {
		return GetSearchAllLibrariesType("")
	}
	return o.Type
}

func (o *GetSearchAllLibrariesMetadata) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetSearchAllLibrariesMetadata) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetSearchAllLibrariesMetadata) GetContentRating() *string {
	if o == nil {
		return nil
	}
	return o.ContentRating
}

func (o *GetSearchAllLibrariesMetadata) GetSummary() string {
	if o == nil {
		return ""
	}
	return o.Summary
}

func (o *GetSearchAllLibrariesMetadata) GetRating() *float64 {
	if o == nil {
		return nil
	}
	return o.Rating
}

func (o *GetSearchAllLibrariesMetadata) GetAudienceRating() *float64 {
	if o == nil {
		return nil
	}
	return o.AudienceRating
}

func (o *GetSearchAllLibrariesMetadata) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

func (o *GetSearchAllLibrariesMetadata) GetSeasonCount() *int {
	if o == nil {
		return nil
	}
	return o.SeasonCount
}

func (o *GetSearchAllLibrariesMetadata) GetTagline() *string {
	if o == nil {
		return nil
	}
	return o.Tagline
}

func (o *GetSearchAllLibrariesMetadata) GetFlattenSeasons() *GetSearchAllLibrariesFlattenSeasons {
	if o == nil {
		return nil
	}
	return o.FlattenSeasons
}

func (o *GetSearchAllLibrariesMetadata) GetEpisodeSort() *GetSearchAllLibrariesEpisodeSort {
	if o == nil {
		return nil
	}
	return o.EpisodeSort
}

func (o *GetSearchAllLibrariesMetadata) GetEnableCreditsMarkerGeneration() *GetSearchAllLibrariesEnableCreditsMarkerGeneration {
	if o == nil {
		return nil
	}
	return o.EnableCreditsMarkerGeneration
}

func (o *GetSearchAllLibrariesMetadata) GetShowOrdering() *GetSearchAllLibrariesShowOrdering {
	if o == nil {
		return nil
	}
	return o.ShowOrdering
}

func (o *GetSearchAllLibrariesMetadata) GetThumb() *string {
	if o == nil {
		return nil
	}
	return o.Thumb
}

func (o *GetSearchAllLibrariesMetadata) GetArt() *string {
	if o == nil {
		return nil
	}
	return o.Art
}

func (o *GetSearchAllLibrariesMetadata) GetBanner() *string {
	if o == nil {
		return nil
	}
	return o.Banner
}

func (o *GetSearchAllLibrariesMetadata) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetSearchAllLibrariesMetadata) GetOriginallyAvailableAt() *types.Date {
	if o == nil {
		return nil
	}
	return o.OriginallyAvailableAt
}

func (o *GetSearchAllLibrariesMetadata) GetAddedAt() int64 {
	if o == nil {
		return 0
	}
	return o.AddedAt
}

func (o *GetSearchAllLibrariesMetadata) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetSearchAllLibrariesMetadata) GetAudienceRatingImage() *string {
	if o == nil {
		return nil
	}
	return o.AudienceRatingImage
}

func (o *GetSearchAllLibrariesMetadata) GetChapterSource() *string {
	if o == nil {
		return nil
	}
	return o.ChapterSource
}

func (o *GetSearchAllLibrariesMetadata) GetPrimaryExtraKey() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryExtraKey
}

func (o *GetSearchAllLibrariesMetadata) GetRatingImage() *string {
	if o == nil {
		return nil
	}
	return o.RatingImage
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentRatingKey() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentRatingKey
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentGUID() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentGUID
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentKey() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentKey
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentTitle() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentTitle
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentThumb() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentThumb
}

func (o *GetSearchAllLibrariesMetadata) GetParentSlug() *string {
	if o == nil {
		return nil
	}
	return o.ParentSlug
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentSlug() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentSlug
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentArt() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentArt
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentTheme() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentTheme
}

func (o *GetSearchAllLibrariesMetadata) GetMedia() []GetSearchAllLibrariesMedia {
	if o == nil {
		return nil
	}
	return o.Media
}

func (o *GetSearchAllLibrariesMetadata) GetGenre() []GetSearchAllLibrariesGenre {
	if o == nil {
		return nil
	}
	return o.Genre
}

func (o *GetSearchAllLibrariesMetadata) GetCountry() []GetSearchAllLibrariesCountry {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *GetSearchAllLibrariesMetadata) GetDirector() []GetSearchAllLibrariesDirector {
	if o == nil {
		return nil
	}
	return o.Director
}

func (o *GetSearchAllLibrariesMetadata) GetWriter() []GetSearchAllLibrariesWriter {
	if o == nil {
		return nil
	}
	return o.Writer
}

func (o *GetSearchAllLibrariesMetadata) GetCollection() []GetSearchAllLibrariesCollection {
	if o == nil {
		return nil
	}
	return o.Collection
}

func (o *GetSearchAllLibrariesMetadata) GetRole() []GetSearchAllLibrariesRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *GetSearchAllLibrariesMetadata) GetLocation() []GetSearchAllLibrariesLocation {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *GetSearchAllLibrariesMetadata) GetMediaGUID() []GetSearchAllLibrariesMediaGUID {
	if o == nil {
		return nil
	}
	return o.MediaGUID
}

func (o *GetSearchAllLibrariesMetadata) GetUltraBlurColors() *GetSearchAllLibrariesUltraBlurColors {
	if o == nil {
		return nil
	}
	return o.UltraBlurColors
}

func (o *GetSearchAllLibrariesMetadata) GetMetaDataRating() []GetSearchAllLibrariesMetaDataRating {
	if o == nil {
		return nil
	}
	return o.MetaDataRating
}

func (o *GetSearchAllLibrariesMetadata) GetImage() []GetSearchAllLibrariesImage {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *GetSearchAllLibrariesMetadata) GetTitleSort() *string {
	if o == nil {
		return nil
	}
	return o.TitleSort
}

func (o *GetSearchAllLibrariesMetadata) GetViewCount() *int {
	if o == nil {
		return nil
	}
	return o.ViewCount
}

func (o *GetSearchAllLibrariesMetadata) GetLastViewedAt() *int {
	if o == nil {
		return nil
	}
	return o.LastViewedAt
}

func (o *GetSearchAllLibrariesMetadata) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *GetSearchAllLibrariesMetadata) GetViewOffset() *int {
	if o == nil {
		return nil
	}
	return o.ViewOffset
}

func (o *GetSearchAllLibrariesMetadata) GetSkipCount() *int {
	if o == nil {
		return nil
	}
	return o.SkipCount
}

func (o *GetSearchAllLibrariesMetadata) GetIndex() *int {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *GetSearchAllLibrariesMetadata) GetTheme() *string {
	if o == nil {
		return nil
	}
	return o.Theme
}

func (o *GetSearchAllLibrariesMetadata) GetLeafCount() *int {
	if o == nil {
		return nil
	}
	return o.LeafCount
}

func (o *GetSearchAllLibrariesMetadata) GetViewedLeafCount() *int {
	if o == nil {
		return nil
	}
	return o.ViewedLeafCount
}

func (o *GetSearchAllLibrariesMetadata) GetChildCount() *int {
	if o == nil {
		return nil
	}
	return o.ChildCount
}

func (o *GetSearchAllLibrariesMetadata) GetHasPremiumExtras() *string {
	if o == nil {
		return nil
	}
	return o.HasPremiumExtras
}

func (o *GetSearchAllLibrariesMetadata) GetHasPremiumPrimaryExtra() *string {
	if o == nil {
		return nil
	}
	return o.HasPremiumPrimaryExtra
}

func (o *GetSearchAllLibrariesMetadata) GetParentRatingKey() *string {
	if o == nil {
		return nil
	}
	return o.ParentRatingKey
}

func (o *GetSearchAllLibrariesMetadata) GetParentGUID() *string {
	if o == nil {
		return nil
	}
	return o.ParentGUID
}

func (o *GetSearchAllLibrariesMetadata) GetParentStudio() *string {
	if o == nil {
		return nil
	}
	return o.ParentStudio
}

func (o *GetSearchAllLibrariesMetadata) GetParentKey() *string {
	if o == nil {
		return nil
	}
	return o.ParentKey
}

func (o *GetSearchAllLibrariesMetadata) GetParentTitle() *string {
	if o == nil {
		return nil
	}
	return o.ParentTitle
}

func (o *GetSearchAllLibrariesMetadata) GetParentIndex() *int {
	if o == nil {
		return nil
	}
	return o.ParentIndex
}

func (o *GetSearchAllLibrariesMetadata) GetParentYear() *int {
	if o == nil {
		return nil
	}
	return o.ParentYear
}

func (o *GetSearchAllLibrariesMetadata) GetParentThumb() *string {
	if o == nil {
		return nil
	}
	return o.ParentThumb
}

func (o *GetSearchAllLibrariesMetadata) GetParentTheme() *string {
	if o == nil {
		return nil
	}
	return o.ParentTheme
}

type SearchResult struct {
	Score    float32                       `json:"score"`
	Metadata GetSearchAllLibrariesMetadata `json:"Metadata"`
}

func (o *SearchResult) GetScore() float32 {
	if o == nil {
		return 0.0
	}
	return o.Score
}

func (o *SearchResult) GetMetadata() GetSearchAllLibrariesMetadata {
	if o == nil {
		return GetSearchAllLibrariesMetadata{}
	}
	return o.Metadata
}

type GetSearchAllLibrariesMediaContainer struct {
	Size         float64        `json:"size"`
	SearchResult []SearchResult `json:"SearchResult"`
}

func (o *GetSearchAllLibrariesMediaContainer) GetSize() float64 {
	if o == nil {
		return 0.0
	}
	return o.Size
}

func (o *GetSearchAllLibrariesMediaContainer) GetSearchResult() []SearchResult {
	if o == nil {
		return []SearchResult{}
	}
	return o.SearchResult
}

// GetSearchAllLibrariesResponseBody - The libraries available on the Server
type GetSearchAllLibrariesResponseBody struct {
	MediaContainer GetSearchAllLibrariesMediaContainer `json:"MediaContainer"`
}

func (o *GetSearchAllLibrariesResponseBody) GetMediaContainer() GetSearchAllLibrariesMediaContainer {
	if o == nil {
		return GetSearchAllLibrariesMediaContainer{}
	}
	return o.MediaContainer
}

type GetSearchAllLibrariesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The libraries available on the Server
	Object *GetSearchAllLibrariesResponseBody
}

func (o *GetSearchAllLibrariesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSearchAllLibrariesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSearchAllLibrariesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSearchAllLibrariesResponse) GetObject() *GetSearchAllLibrariesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
