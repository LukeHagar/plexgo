// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/types"
	"net/http"
)

type SearchTypes string

const (
	SearchTypesMovies      SearchTypes = "movies"
	SearchTypesMusic       SearchTypes = "music"
	SearchTypesOtherVideos SearchTypes = "otherVideos"
	SearchTypesPeople      SearchTypes = "people"
	SearchTypesTv          SearchTypes = "tv"
)

func (e SearchTypes) ToPointer() *SearchTypes {
	return &e
}

// GetSearchAllLibrariesQueryParamIncludeCollections - Whether to include collections in the search results.
type GetSearchAllLibrariesQueryParamIncludeCollections int

const (
	GetSearchAllLibrariesQueryParamIncludeCollectionsDisable GetSearchAllLibrariesQueryParamIncludeCollections = 0
	GetSearchAllLibrariesQueryParamIncludeCollectionsEnable  GetSearchAllLibrariesQueryParamIncludeCollections = 1
)

func (e GetSearchAllLibrariesQueryParamIncludeCollections) ToPointer() *GetSearchAllLibrariesQueryParamIncludeCollections {
	return &e
}
func (e *GetSearchAllLibrariesQueryParamIncludeCollections) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetSearchAllLibrariesQueryParamIncludeCollections(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesQueryParamIncludeCollections: %v", v)
	}
}

// GetSearchAllLibrariesQueryParamIncludeExternalMedia - Whether to include external media in the search results.
type GetSearchAllLibrariesQueryParamIncludeExternalMedia int

const (
	GetSearchAllLibrariesQueryParamIncludeExternalMediaDisable GetSearchAllLibrariesQueryParamIncludeExternalMedia = 0
	GetSearchAllLibrariesQueryParamIncludeExternalMediaEnable  GetSearchAllLibrariesQueryParamIncludeExternalMedia = 1
)

func (e GetSearchAllLibrariesQueryParamIncludeExternalMedia) ToPointer() *GetSearchAllLibrariesQueryParamIncludeExternalMedia {
	return &e
}
func (e *GetSearchAllLibrariesQueryParamIncludeExternalMedia) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetSearchAllLibrariesQueryParamIncludeExternalMedia(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesQueryParamIncludeExternalMedia: %v", v)
	}
}

type GetSearchAllLibrariesRequest struct {
	// The search query term.
	Query string `queryParam:"style=form,explode=true,name=query"`
	// An opaque identifier unique to the client (UUID, serial number, or other unique device ID)
	ClientID string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// Limit the number of results returned.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// A comma-separated list of search types to include. Valid values are: movies, music, otherVideos, people, tv.
	//
	SearchTypes []SearchTypes `queryParam:"style=form,explode=false,name=searchTypes"`
	// Whether to include collections in the search results.
	IncludeCollections *GetSearchAllLibrariesQueryParamIncludeCollections `default:"0" queryParam:"style=form,explode=true,name=includeCollections"`
	// Whether to include external media in the search results.
	IncludeExternalMedia *GetSearchAllLibrariesQueryParamIncludeExternalMedia `default:"0" queryParam:"style=form,explode=true,name=includeExternalMedia"`
}

func (g GetSearchAllLibrariesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"query", "X-Plex-Client-Identifier"}); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesRequest) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *GetSearchAllLibrariesRequest) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *GetSearchAllLibrariesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetSearchAllLibrariesRequest) GetSearchTypes() []SearchTypes {
	if o == nil {
		return nil
	}
	return o.SearchTypes
}

func (o *GetSearchAllLibrariesRequest) GetIncludeCollections() *GetSearchAllLibrariesQueryParamIncludeCollections {
	if o == nil {
		return nil
	}
	return o.IncludeCollections
}

func (o *GetSearchAllLibrariesRequest) GetIncludeExternalMedia() *GetSearchAllLibrariesQueryParamIncludeExternalMedia {
	if o == nil {
		return nil
	}
	return o.IncludeExternalMedia
}

type GetSearchAllLibrariesDirectory struct {
	// The unique identifier path for the search result item.
	Key string `json:"key"`
	// The identifier for the library section.
	LibrarySectionID int64 `json:"librarySectionID"`
	// The key corresponding to the library section.
	LibrarySectionKey string `json:"librarySectionKey"`
	// The title of the library section.
	LibrarySectionTitle string `json:"librarySectionTitle"`
	librarySectionType  *int64 `const:"1" json:"librarySectionType,omitempty"`
	// The type of the directory.
	Type string `json:"type"`
	ID   int64  `json:"id"`
	// The filter string used to query this specific item in the library.
	Filter *string `json:"filter,omitempty"`
	Tag    string  `json:"tag"`
	// The type of tag associated with this search result (e.g., Director, Actor).
	tagType *int64 `const:"4" json:"tagType,omitempty"`
	// The unique identifier for the tag associated with this search result.
	TagKey *string `json:"tagKey,omitempty"`
	// The URL to the thumbnail image associated with this search result.
	Thumb *string `json:"thumb,omitempty"`
	// The number of items associated with this search result.
	Count *int64 `json:"count,omitempty"`
}

func (g GetSearchAllLibrariesDirectory) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesDirectory) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"key", "librarySectionID", "librarySectionKey", "librarySectionTitle", "type", "id", "tag"}); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesDirectory) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetSearchAllLibrariesDirectory) GetLibrarySectionID() int64 {
	if o == nil {
		return 0
	}
	return o.LibrarySectionID
}

func (o *GetSearchAllLibrariesDirectory) GetLibrarySectionKey() string {
	if o == nil {
		return ""
	}
	return o.LibrarySectionKey
}

func (o *GetSearchAllLibrariesDirectory) GetLibrarySectionTitle() string {
	if o == nil {
		return ""
	}
	return o.LibrarySectionTitle
}

func (o *GetSearchAllLibrariesDirectory) GetLibrarySectionType() *int64 {
	return types.Int64(1)
}

func (o *GetSearchAllLibrariesDirectory) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetSearchAllLibrariesDirectory) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesDirectory) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetSearchAllLibrariesDirectory) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

func (o *GetSearchAllLibrariesDirectory) GetTagType() *int64 {
	return types.Int64(4)
}

func (o *GetSearchAllLibrariesDirectory) GetTagKey() *string {
	if o == nil {
		return nil
	}
	return o.TagKey
}

func (o *GetSearchAllLibrariesDirectory) GetThumb() *string {
	if o == nil {
		return nil
	}
	return o.Thumb
}

func (o *GetSearchAllLibrariesDirectory) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

// GetSearchAllLibrariesType - The type of media content in the Plex library. This can represent videos, music, or photos.
type GetSearchAllLibrariesType string

const (
	GetSearchAllLibrariesTypeMovie      GetSearchAllLibrariesType = "movie"
	GetSearchAllLibrariesTypeTvShow     GetSearchAllLibrariesType = "show"
	GetSearchAllLibrariesTypeSeason     GetSearchAllLibrariesType = "season"
	GetSearchAllLibrariesTypeEpisode    GetSearchAllLibrariesType = "episode"
	GetSearchAllLibrariesTypeArtist     GetSearchAllLibrariesType = "artist"
	GetSearchAllLibrariesTypeAlbum      GetSearchAllLibrariesType = "album"
	GetSearchAllLibrariesTypeTrack      GetSearchAllLibrariesType = "track"
	GetSearchAllLibrariesTypePhotoAlbum GetSearchAllLibrariesType = "photoalbum"
	GetSearchAllLibrariesTypePhoto      GetSearchAllLibrariesType = "photo"
	GetSearchAllLibrariesTypeCollection GetSearchAllLibrariesType = "collection"
)

func (e GetSearchAllLibrariesType) ToPointer() *GetSearchAllLibrariesType {
	return &e
}

type GetSearchAllLibrariesLibraryType string

const (
	GetSearchAllLibrariesLibraryTypeCoverPoster GetSearchAllLibrariesLibraryType = "coverPoster"
	GetSearchAllLibrariesLibraryTypeBackground  GetSearchAllLibrariesLibraryType = "background"
	GetSearchAllLibrariesLibraryTypeSnapshot    GetSearchAllLibrariesLibraryType = "snapshot"
	GetSearchAllLibrariesLibraryTypeClearLogo   GetSearchAllLibrariesLibraryType = "clearLogo"
)

func (e GetSearchAllLibrariesLibraryType) ToPointer() *GetSearchAllLibrariesLibraryType {
	return &e
}

type GetSearchAllLibrariesImage struct {
	Alt  string                           `json:"alt"`
	Type GetSearchAllLibrariesLibraryType `json:"type"`
	URL  string                           `json:"url"`
}

func (o *GetSearchAllLibrariesImage) GetAlt() string {
	if o == nil {
		return ""
	}
	return o.Alt
}

func (o *GetSearchAllLibrariesImage) GetType() GetSearchAllLibrariesLibraryType {
	if o == nil {
		return GetSearchAllLibrariesLibraryType("")
	}
	return o.Type
}

func (o *GetSearchAllLibrariesImage) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetSearchAllLibrariesUltraBlurColors struct {
	TopLeft     string `json:"topLeft"`
	TopRight    string `json:"topRight"`
	BottomRight string `json:"bottomRight"`
	BottomLeft  string `json:"bottomLeft"`
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetTopLeft() string {
	if o == nil {
		return ""
	}
	return o.TopLeft
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetTopRight() string {
	if o == nil {
		return ""
	}
	return o.TopRight
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetBottomRight() string {
	if o == nil {
		return ""
	}
	return o.BottomRight
}

func (o *GetSearchAllLibrariesUltraBlurColors) GetBottomLeft() string {
	if o == nil {
		return ""
	}
	return o.BottomLeft
}

type GetSearchAllLibrariesGuids struct {
	// The unique identifier for the Guid. Can be prefixed with imdb://, tmdb://, tvdb://
	//
	ID string `json:"id"`
}

func (o *GetSearchAllLibrariesGuids) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetSearchAllLibrariesShowOrdering - Setting that indicates the episode ordering for the show.
// Options:
//   - None = Library default
//   - tmdbAiring = The Movie Database (Aired)
//   - aired = TheTVDB (Aired)
//   - dvd = TheTVDB (DVD)
//   - absolute = TheTVDB (Absolute)
type GetSearchAllLibrariesShowOrdering string

const (
	GetSearchAllLibrariesShowOrderingNone         GetSearchAllLibrariesShowOrdering = "None"
	GetSearchAllLibrariesShowOrderingTmdbAiring   GetSearchAllLibrariesShowOrdering = "tmdbAiring"
	GetSearchAllLibrariesShowOrderingTvdbAired    GetSearchAllLibrariesShowOrdering = "aired"
	GetSearchAllLibrariesShowOrderingTvdbDvd      GetSearchAllLibrariesShowOrdering = "dvd"
	GetSearchAllLibrariesShowOrderingTvdbAbsolute GetSearchAllLibrariesShowOrdering = "absolute"
)

func (e GetSearchAllLibrariesShowOrdering) ToPointer() *GetSearchAllLibrariesShowOrdering {
	return &e
}

// GetSearchAllLibrariesFlattenSeasons - Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
type GetSearchAllLibrariesFlattenSeasons string

const (
	GetSearchAllLibrariesFlattenSeasonsLibraryDefault GetSearchAllLibrariesFlattenSeasons = "-1"
	GetSearchAllLibrariesFlattenSeasonsHide           GetSearchAllLibrariesFlattenSeasons = "0"
	GetSearchAllLibrariesFlattenSeasonsShow           GetSearchAllLibrariesFlattenSeasons = "1"
)

func (e GetSearchAllLibrariesFlattenSeasons) ToPointer() *GetSearchAllLibrariesFlattenSeasons {
	return &e
}

type GetSearchAllLibrariesOptimizedForStreaming1 int

const (
	GetSearchAllLibrariesOptimizedForStreaming1Zero GetSearchAllLibrariesOptimizedForStreaming1 = 0
	GetSearchAllLibrariesOptimizedForStreaming1One  GetSearchAllLibrariesOptimizedForStreaming1 = 1
)

func (e GetSearchAllLibrariesOptimizedForStreaming1) ToPointer() *GetSearchAllLibrariesOptimizedForStreaming1 {
	return &e
}
func (e *GetSearchAllLibrariesOptimizedForStreaming1) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetSearchAllLibrariesOptimizedForStreaming1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesOptimizedForStreaming1: %v", v)
	}
}

type GetSearchAllLibrariesOptimizedForStreamingType string

const (
	GetSearchAllLibrariesOptimizedForStreamingTypeGetSearchAllLibrariesOptimizedForStreaming1 GetSearchAllLibrariesOptimizedForStreamingType = "get-search-all-libraries_optimizedForStreaming_1"
	GetSearchAllLibrariesOptimizedForStreamingTypeBoolean                                     GetSearchAllLibrariesOptimizedForStreamingType = "boolean"
)

// GetSearchAllLibrariesOptimizedForStreaming - Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
type GetSearchAllLibrariesOptimizedForStreaming struct {
	GetSearchAllLibrariesOptimizedForStreaming1 *GetSearchAllLibrariesOptimizedForStreaming1 `queryParam:"inline" name:"optimizedForStreaming"`
	Boolean                                     *bool                                        `queryParam:"inline" name:"optimizedForStreaming"`

	Type GetSearchAllLibrariesOptimizedForStreamingType
}

func CreateGetSearchAllLibrariesOptimizedForStreamingGetSearchAllLibrariesOptimizedForStreaming1(getSearchAllLibrariesOptimizedForStreaming1 GetSearchAllLibrariesOptimizedForStreaming1) GetSearchAllLibrariesOptimizedForStreaming {
	typ := GetSearchAllLibrariesOptimizedForStreamingTypeGetSearchAllLibrariesOptimizedForStreaming1

	return GetSearchAllLibrariesOptimizedForStreaming{
		GetSearchAllLibrariesOptimizedForStreaming1: &getSearchAllLibrariesOptimizedForStreaming1,
		Type: typ,
	}
}

func CreateGetSearchAllLibrariesOptimizedForStreamingBoolean(boolean bool) GetSearchAllLibrariesOptimizedForStreaming {
	typ := GetSearchAllLibrariesOptimizedForStreamingTypeBoolean

	return GetSearchAllLibrariesOptimizedForStreaming{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetSearchAllLibrariesOptimizedForStreaming) UnmarshalJSON(data []byte) error {

	var getSearchAllLibrariesOptimizedForStreaming1 GetSearchAllLibrariesOptimizedForStreaming1 = GetSearchAllLibrariesOptimizedForStreaming1(0)
	if err := utils.UnmarshalJSON(data, &getSearchAllLibrariesOptimizedForStreaming1, "", true, nil); err == nil {
		u.GetSearchAllLibrariesOptimizedForStreaming1 = &getSearchAllLibrariesOptimizedForStreaming1
		u.Type = GetSearchAllLibrariesOptimizedForStreamingTypeGetSearchAllLibrariesOptimizedForStreaming1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = GetSearchAllLibrariesOptimizedForStreamingTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetSearchAllLibrariesOptimizedForStreaming", string(data))
}

func (u GetSearchAllLibrariesOptimizedForStreaming) MarshalJSON() ([]byte, error) {
	if u.GetSearchAllLibrariesOptimizedForStreaming1 != nil {
		return utils.MarshalJSON(u.GetSearchAllLibrariesOptimizedForStreaming1, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetSearchAllLibrariesOptimizedForStreaming: all fields are null")
}

type GetSearchAllLibrariesOptimizedForStreamingLibrary1 int

const (
	GetSearchAllLibrariesOptimizedForStreamingLibrary1Zero GetSearchAllLibrariesOptimizedForStreamingLibrary1 = 0
	GetSearchAllLibrariesOptimizedForStreamingLibrary1One  GetSearchAllLibrariesOptimizedForStreamingLibrary1 = 1
)

func (e GetSearchAllLibrariesOptimizedForStreamingLibrary1) ToPointer() *GetSearchAllLibrariesOptimizedForStreamingLibrary1 {
	return &e
}
func (e *GetSearchAllLibrariesOptimizedForStreamingLibrary1) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetSearchAllLibrariesOptimizedForStreamingLibrary1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesOptimizedForStreamingLibrary1: %v", v)
	}
}

type GetSearchAllLibrariesLibraryOptimizedForStreamingType string

const (
	GetSearchAllLibrariesLibraryOptimizedForStreamingTypeGetSearchAllLibrariesOptimizedForStreamingLibrary1 GetSearchAllLibrariesLibraryOptimizedForStreamingType = "get-search-all-libraries_optimizedForStreaming_Library_1"
	GetSearchAllLibrariesLibraryOptimizedForStreamingTypeBoolean                                            GetSearchAllLibrariesLibraryOptimizedForStreamingType = "boolean"
)

// GetSearchAllLibrariesLibraryOptimizedForStreaming - Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
type GetSearchAllLibrariesLibraryOptimizedForStreaming struct {
	GetSearchAllLibrariesOptimizedForStreamingLibrary1 *GetSearchAllLibrariesOptimizedForStreamingLibrary1 `queryParam:"inline" name:"optimizedForStreaming"`
	Boolean                                            *bool                                               `queryParam:"inline" name:"optimizedForStreaming"`

	Type GetSearchAllLibrariesLibraryOptimizedForStreamingType
}

func CreateGetSearchAllLibrariesLibraryOptimizedForStreamingGetSearchAllLibrariesOptimizedForStreamingLibrary1(getSearchAllLibrariesOptimizedForStreamingLibrary1 GetSearchAllLibrariesOptimizedForStreamingLibrary1) GetSearchAllLibrariesLibraryOptimizedForStreaming {
	typ := GetSearchAllLibrariesLibraryOptimizedForStreamingTypeGetSearchAllLibrariesOptimizedForStreamingLibrary1

	return GetSearchAllLibrariesLibraryOptimizedForStreaming{
		GetSearchAllLibrariesOptimizedForStreamingLibrary1: &getSearchAllLibrariesOptimizedForStreamingLibrary1,
		Type: typ,
	}
}

func CreateGetSearchAllLibrariesLibraryOptimizedForStreamingBoolean(boolean bool) GetSearchAllLibrariesLibraryOptimizedForStreaming {
	typ := GetSearchAllLibrariesLibraryOptimizedForStreamingTypeBoolean

	return GetSearchAllLibrariesLibraryOptimizedForStreaming{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetSearchAllLibrariesLibraryOptimizedForStreaming) UnmarshalJSON(data []byte) error {

	var getSearchAllLibrariesOptimizedForStreamingLibrary1 GetSearchAllLibrariesOptimizedForStreamingLibrary1 = GetSearchAllLibrariesOptimizedForStreamingLibrary1(0)
	if err := utils.UnmarshalJSON(data, &getSearchAllLibrariesOptimizedForStreamingLibrary1, "", true, nil); err == nil {
		u.GetSearchAllLibrariesOptimizedForStreamingLibrary1 = &getSearchAllLibrariesOptimizedForStreamingLibrary1
		u.Type = GetSearchAllLibrariesLibraryOptimizedForStreamingTypeGetSearchAllLibrariesOptimizedForStreamingLibrary1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = GetSearchAllLibrariesLibraryOptimizedForStreamingTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetSearchAllLibrariesLibraryOptimizedForStreaming", string(data))
}

func (u GetSearchAllLibrariesLibraryOptimizedForStreaming) MarshalJSON() ([]byte, error) {
	if u.GetSearchAllLibrariesOptimizedForStreamingLibrary1 != nil {
		return utils.MarshalJSON(u.GetSearchAllLibrariesOptimizedForStreamingLibrary1, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetSearchAllLibrariesLibraryOptimizedForStreaming: all fields are null")
}

// GetSearchAllLibrariesHasThumbnail - Indicates if the part has a thumbnail.
type GetSearchAllLibrariesHasThumbnail string

const (
	GetSearchAllLibrariesHasThumbnailFalse GetSearchAllLibrariesHasThumbnail = "0"
	GetSearchAllLibrariesHasThumbnailTrue  GetSearchAllLibrariesHasThumbnail = "1"
)

func (e GetSearchAllLibrariesHasThumbnail) ToPointer() *GetSearchAllLibrariesHasThumbnail {
	return &e
}
func (e *GetSearchAllLibrariesHasThumbnail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		*e = GetSearchAllLibrariesHasThumbnail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSearchAllLibrariesHasThumbnail: %v", v)
	}
}

type GetSearchAllLibrariesPart struct {
	// Indicates if the part is accessible.
	Accessible *bool `json:"accessible,omitempty"`
	// Indicates if the part exists.
	Exists *bool `json:"exists,omitempty"`
	// Unique part identifier.
	ID int64 `json:"id"`
	// Key to access this part.
	Key     *string `json:"key,omitempty"`
	Indexes *string `json:"indexes,omitempty"`
	// Duration of the part in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// File path for the part.
	File *string `json:"file,omitempty"`
	// File size in bytes.
	Size         *int64 `json:"size,omitempty"`
	PacketLength *int   `json:"packetLength,omitempty"`
	// Container format of the part.
	Container *string `json:"container,omitempty"`
	// Video profile for the part.
	VideoProfile *string `json:"videoProfile,omitempty"`
	// The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
	AudioProfile    *string `json:"audioProfile,omitempty"`
	Has64bitOffsets *bool   `json:"has64bitOffsets,omitempty"`
	// Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
	//
	OptimizedForStreaming *GetSearchAllLibrariesLibraryOptimizedForStreaming `json:"optimizedForStreaming,omitempty"`
	HasThumbnail          *GetSearchAllLibrariesHasThumbnail                 `default:"0" json:"hasThumbnail"`
}

func (g GetSearchAllLibrariesPart) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesPart) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesPart) GetAccessible() *bool {
	if o == nil {
		return nil
	}
	return o.Accessible
}

func (o *GetSearchAllLibrariesPart) GetExists() *bool {
	if o == nil {
		return nil
	}
	return o.Exists
}

func (o *GetSearchAllLibrariesPart) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesPart) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetSearchAllLibrariesPart) GetIndexes() *string {
	if o == nil {
		return nil
	}
	return o.Indexes
}

func (o *GetSearchAllLibrariesPart) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetSearchAllLibrariesPart) GetFile() *string {
	if o == nil {
		return nil
	}
	return o.File
}

func (o *GetSearchAllLibrariesPart) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetSearchAllLibrariesPart) GetPacketLength() *int {
	if o == nil {
		return nil
	}
	return o.PacketLength
}

func (o *GetSearchAllLibrariesPart) GetContainer() *string {
	if o == nil {
		return nil
	}
	return o.Container
}

func (o *GetSearchAllLibrariesPart) GetVideoProfile() *string {
	if o == nil {
		return nil
	}
	return o.VideoProfile
}

func (o *GetSearchAllLibrariesPart) GetAudioProfile() *string {
	if o == nil {
		return nil
	}
	return o.AudioProfile
}

func (o *GetSearchAllLibrariesPart) GetHas64bitOffsets() *bool {
	if o == nil {
		return nil
	}
	return o.Has64bitOffsets
}

func (o *GetSearchAllLibrariesPart) GetOptimizedForStreaming() *GetSearchAllLibrariesLibraryOptimizedForStreaming {
	if o == nil {
		return nil
	}
	return o.OptimizedForStreaming
}

func (o *GetSearchAllLibrariesPart) GetHasThumbnail() *GetSearchAllLibrariesHasThumbnail {
	if o == nil {
		return nil
	}
	return o.HasThumbnail
}

type GetSearchAllLibrariesMedia struct {
	// Unique media identifier.
	ID int64 `json:"id"`
	// Duration of the media in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// Bitrate in bits per second.
	Bitrate *int `json:"bitrate,omitempty"`
	// Video width in pixels.
	Width *int `json:"width,omitempty"`
	// Video height in pixels.
	Height *int `json:"height,omitempty"`
	// Aspect ratio of the video.
	AspectRatio *float32 `json:"aspectRatio,omitempty"`
	// Number of audio channels.
	AudioChannels *int `json:"audioChannels,omitempty"`
	DisplayOffset *int `json:"displayOffset,omitempty"`
	// Audio codec used.
	AudioCodec *string `json:"audioCodec,omitempty"`
	// Video codec used.
	VideoCodec *string `json:"videoCodec,omitempty"`
	// Video resolution (e.g., 4k).
	VideoResolution *string `json:"videoResolution,omitempty"`
	// Container format of the media.
	Container *string `json:"container,omitempty"`
	// Frame rate of the video. Values found include NTSC, PAL, 24p
	//
	VideoFrameRate *string `json:"videoFrameRate,omitempty"`
	// Video profile (e.g., main 10).
	VideoProfile *string `json:"videoProfile,omitempty"`
	// Indicates whether voice activity is detected.
	HasVoiceActivity *bool `json:"hasVoiceActivity,omitempty"`
	// The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
	AudioProfile *string `json:"audioProfile,omitempty"`
	// Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
	OptimizedForStreaming *GetSearchAllLibrariesOptimizedForStreaming `json:"optimizedForStreaming,omitempty"`
	// Indicates whether the media has 64-bit offsets.
	// This is relevant for media files that may require larger offsets than what 32-bit integers can provide.
	//
	Has64bitOffsets *bool                       `json:"has64bitOffsets,omitempty"`
	Part            []GetSearchAllLibrariesPart `json:"Part,omitempty"`
}

func (o *GetSearchAllLibrariesMedia) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesMedia) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetSearchAllLibrariesMedia) GetBitrate() *int {
	if o == nil {
		return nil
	}
	return o.Bitrate
}

func (o *GetSearchAllLibrariesMedia) GetWidth() *int {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *GetSearchAllLibrariesMedia) GetHeight() *int {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *GetSearchAllLibrariesMedia) GetAspectRatio() *float32 {
	if o == nil {
		return nil
	}
	return o.AspectRatio
}

func (o *GetSearchAllLibrariesMedia) GetAudioChannels() *int {
	if o == nil {
		return nil
	}
	return o.AudioChannels
}

func (o *GetSearchAllLibrariesMedia) GetDisplayOffset() *int {
	if o == nil {
		return nil
	}
	return o.DisplayOffset
}

func (o *GetSearchAllLibrariesMedia) GetAudioCodec() *string {
	if o == nil {
		return nil
	}
	return o.AudioCodec
}

func (o *GetSearchAllLibrariesMedia) GetVideoCodec() *string {
	if o == nil {
		return nil
	}
	return o.VideoCodec
}

func (o *GetSearchAllLibrariesMedia) GetVideoResolution() *string {
	if o == nil {
		return nil
	}
	return o.VideoResolution
}

func (o *GetSearchAllLibrariesMedia) GetContainer() *string {
	if o == nil {
		return nil
	}
	return o.Container
}

func (o *GetSearchAllLibrariesMedia) GetVideoFrameRate() *string {
	if o == nil {
		return nil
	}
	return o.VideoFrameRate
}

func (o *GetSearchAllLibrariesMedia) GetVideoProfile() *string {
	if o == nil {
		return nil
	}
	return o.VideoProfile
}

func (o *GetSearchAllLibrariesMedia) GetHasVoiceActivity() *bool {
	if o == nil {
		return nil
	}
	return o.HasVoiceActivity
}

func (o *GetSearchAllLibrariesMedia) GetAudioProfile() *string {
	if o == nil {
		return nil
	}
	return o.AudioProfile
}

func (o *GetSearchAllLibrariesMedia) GetOptimizedForStreaming() *GetSearchAllLibrariesOptimizedForStreaming {
	if o == nil {
		return nil
	}
	return o.OptimizedForStreaming
}

func (o *GetSearchAllLibrariesMedia) GetHas64bitOffsets() *bool {
	if o == nil {
		return nil
	}
	return o.Has64bitOffsets
}

func (o *GetSearchAllLibrariesMedia) GetPart() []GetSearchAllLibrariesPart {
	if o == nil {
		return nil
	}
	return o.Part
}

type GetSearchAllLibrariesGenre struct {
	// The unique identifier for the genre.
	// NOTE: This is different for each Plex server and is not globally unique.
	//
	ID int `json:"id"`
	// The genre name of this media-item
	//
	Tag string `json:"tag"`
}

func (o *GetSearchAllLibrariesGenre) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesGenre) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type GetSearchAllLibrariesCountry struct {
	// The unique identifier for the country.
	// NOTE: This is different for each Plex server and is not globally unique.
	//
	ID int `json:"id"`
	// The country of origin of this media item
	Tag string `json:"tag"`
}

func (o *GetSearchAllLibrariesCountry) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesCountry) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type GetSearchAllLibrariesDirector struct {
	// Unique identifier for the director.
	ID int `json:"id"`
	// The role of Director
	Tag string `json:"tag"`
	// The absolute URL of the thumbnail image for the director.
	Thumb *string `json:"thumb,omitempty"`
}

func (o *GetSearchAllLibrariesDirector) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesDirector) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

func (o *GetSearchAllLibrariesDirector) GetThumb() *string {
	if o == nil {
		return nil
	}
	return o.Thumb
}

type GetSearchAllLibrariesWriter struct {
	// Unique identifier for the writer.
	ID int `json:"id"`
	// The role of Writer
	Tag string `json:"tag"`
	// The absolute URL of the thumbnail image for the writer.
	Thumb *string `json:"thumb,omitempty"`
}

func (o *GetSearchAllLibrariesWriter) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesWriter) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

func (o *GetSearchAllLibrariesWriter) GetThumb() *string {
	if o == nil {
		return nil
	}
	return o.Thumb
}

type GetSearchAllLibrariesRole struct {
	// The unique identifier for the role.
	// NOTE: This is different for each Plex server and is not globally unique.
	//
	ID int `json:"id"`
	// The display tag for the actor (typically the actor's name).
	Tag string `json:"tag"`
	// The role played by the actor in the media item.
	Role *string `json:"role,omitempty"`
	// The absolute URL of the thumbnail image for the actor.
	Thumb *string `json:"thumb,omitempty"`
}

func (o *GetSearchAllLibrariesRole) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetSearchAllLibrariesRole) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

func (o *GetSearchAllLibrariesRole) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *GetSearchAllLibrariesRole) GetThumb() *string {
	if o == nil {
		return nil
	}
	return o.Thumb
}

// GetSearchAllLibrariesLocation - The folder path for the media item.
type GetSearchAllLibrariesLocation struct {
	Path string `json:"path"`
}

func (o *GetSearchAllLibrariesLocation) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

// GetSearchAllLibrariesMetadata - Unknown
type GetSearchAllLibrariesMetadata struct {
	// The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
	RatingKey string `json:"ratingKey"`
	// The unique key for the media item.
	Key string `json:"key"`
	// The globally unique identifier for the media item.
	GUID string `json:"guid"`
	// A URL‐friendly version of the media title.
	Slug string `json:"slug"`
	// The studio that produced the media item.
	Studio *string                   `json:"studio,omitempty"`
	Type   GetSearchAllLibrariesType `json:"type"`
	// The title of the media item.
	Title string `json:"title"`
	// The banner image URL for the media item.
	Banner string `json:"banner"`
	// The sort title used for ordering media items.
	TitleSort string `json:"titleSort"`
	// The content rating for the media item.
	ContentRating *string `json:"contentRating,omitempty"`
	// A synopsis of the media item.
	Summary string `json:"summary"`
	// The critic rating for the media item.
	Rating float32 `json:"rating"`
	// The audience rating for the media item.
	AudienceRating float64 `json:"audienceRating"`
	// The release year of the media item.
	Year *int `json:"year,omitempty"`
	// A brief tagline for the media item.
	Tagline string `json:"tagline"`
	// The thumbnail image URL for the media item.
	Thumb string `json:"thumb"`
	// The art image URL for the media item.
	Art string `json:"art"`
	// The theme URL for the media item.
	Theme string `json:"theme"`
	// The index position of the media item.
	Index int `json:"index"`
	// The number of leaf items (end nodes) under this media item.
	LeafCount *int `json:"leafCount,omitempty"`
	// The number of leaf items that have been viewed.
	ViewedLeafCount *int `json:"viewedLeafCount,omitempty"`
	// The number of child items associated with this media item.
	ChildCount int `json:"childCount"`
	// The total number of seasons (for TV shows).
	SeasonCount int `json:"seasonCount"`
	// The duration of the media item in milliseconds.
	Duration int `json:"duration"`
	// The original release date of the media item.
	OriginallyAvailableAt *types.Date `json:"originallyAvailableAt,omitempty"`
	AddedAt               int64       `json:"addedAt"`
	// Unix epoch datetime in seconds
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
	// The release year of the parent media item.
	ParentYear *int `json:"parentYear,omitempty"`
	// The URL for the audience rating image.
	AudienceRatingImage *string `json:"audienceRatingImage,omitempty"`
	// The source from which chapter data is derived.
	ChapterSource *string `json:"chapterSource,omitempty"`
	// The primary extra key associated with this media item.
	PrimaryExtraKey *string `json:"primaryExtraKey,omitempty"`
	// The original title of the media item (if different).
	OriginalTitle *string `json:"originalTitle,omitempty"`
	// The rating key of the parent media item.
	ParentRatingKey *string `json:"parentRatingKey,omitempty"`
	// The rating key of the grandparent media item.
	GrandparentRatingKey *string `json:"grandparentRatingKey,omitempty"`
	// The GUID of the parent media item.
	ParentGUID *string `json:"parentGuid,omitempty"`
	// The GUID of the grandparent media item.
	GrandparentGUID *string `json:"grandparentGuid,omitempty"`
	// The slug for the grandparent media item.
	GrandparentSlug *string `json:"grandparentSlug,omitempty"`
	// The key of the grandparent media item.
	GrandparentKey *string `json:"grandparentKey,omitempty"`
	// The key of the parent media item.
	ParentKey *string `json:"parentKey,omitempty"`
	// The title of the grandparent media item.
	GrandparentTitle *string `json:"grandparentTitle,omitempty"`
	// The thumbnail URL for the grandparent media item.
	GrandparentThumb *string `json:"grandparentThumb,omitempty"`
	// The theme URL for the grandparent media item.
	GrandparentTheme *string `json:"grandparentTheme,omitempty"`
	// The art URL for the grandparent media item.
	GrandparentArt *string `json:"grandparentArt,omitempty"`
	// The title of the parent media item.
	ParentTitle *string `json:"parentTitle,omitempty"`
	// The index position of the parent media item.
	ParentIndex *int `json:"parentIndex,omitempty"`
	// The thumbnail URL for the parent media item.
	ParentThumb *string `json:"parentThumb,omitempty"`
	// The URL for the rating image.
	RatingImage *string `json:"ratingImage,omitempty"`
	// The number of times this media item has been viewed.
	ViewCount *int `json:"viewCount,omitempty"`
	// The current playback offset (in milliseconds).
	ViewOffset *int `json:"viewOffset,omitempty"`
	// The number of times this media item has been skipped.
	SkipCount *int `json:"skipCount,omitempty"`
	// A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
	Subtype *string `json:"subtype,omitempty"`
	// The Unix timestamp representing the last time the item was rated.
	LastRatedAt *int64 `json:"lastRatedAt,omitempty"`
	// The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
	CreatedAtAccuracy *string `json:"createdAtAccuracy,omitempty"`
	// The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
	CreatedAtTZOffset *string `json:"createdAtTZOffset,omitempty"`
	// Unix timestamp for when the media item was last viewed.
	LastViewedAt *int `json:"lastViewedAt,omitempty"`
	// The rating provided by a user for the item. This value is expressed as a decimal number.
	UserRating      *float32                              `json:"userRating,omitempty"`
	Image           []GetSearchAllLibrariesImage          `json:"Image,omitempty"`
	UltraBlurColors *GetSearchAllLibrariesUltraBlurColors `json:"UltraBlurColors,omitempty"`
	Guids           []GetSearchAllLibrariesGuids          `json:"Guid,omitempty"`
	// The identifier for the library section.
	LibrarySectionID *int64 `json:"librarySectionID,omitempty"`
	// The title of the library section.
	LibrarySectionTitle *string `json:"librarySectionTitle,omitempty"`
	// The key corresponding to the library section.
	LibrarySectionKey *string `json:"librarySectionKey,omitempty"`
	// Setting that indicates the episode ordering for the show.
	// Options:
	//   - None = Library default
	//   - tmdbAiring = The Movie Database (Aired)
	//   - aired = TheTVDB (Aired)
	//   - dvd = TheTVDB (DVD)
	//   - absolute = TheTVDB (Absolute)
	//
	ShowOrdering *GetSearchAllLibrariesShowOrdering `json:"showOrdering,omitempty"`
	// Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
	//
	FlattenSeasons *GetSearchAllLibrariesFlattenSeasons `json:"flattenSeasons,omitempty"`
	// Indicates whether child items should be skipped.
	SkipChildren *bool                           `json:"skipChildren,omitempty"`
	Media        []GetSearchAllLibrariesMedia    `json:"Media,omitempty"`
	Genre        []GetSearchAllLibrariesGenre    `json:"Genre,omitempty"`
	Country      []GetSearchAllLibrariesCountry  `json:"Country,omitempty"`
	Director     []GetSearchAllLibrariesDirector `json:"Director,omitempty"`
	Writer       []GetSearchAllLibrariesWriter   `json:"Writer,omitempty"`
	Role         []GetSearchAllLibrariesRole     `json:"Role,omitempty"`
	Location     []GetSearchAllLibrariesLocation `json:"Location,omitempty"`
}

func (g GetSearchAllLibrariesMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSearchAllLibrariesMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"ratingKey", "key", "guid", "slug", "type", "title", "banner", "titleSort", "summary", "rating", "audienceRating", "tagline", "thumb", "art", "theme", "index", "childCount", "seasonCount", "duration", "addedAt"}); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchAllLibrariesMetadata) GetRatingKey() string {
	if o == nil {
		return ""
	}
	return o.RatingKey
}

func (o *GetSearchAllLibrariesMetadata) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetSearchAllLibrariesMetadata) GetGUID() string {
	if o == nil {
		return ""
	}
	return o.GUID
}

func (o *GetSearchAllLibrariesMetadata) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetSearchAllLibrariesMetadata) GetStudio() *string {
	if o == nil {
		return nil
	}
	return o.Studio
}

func (o *GetSearchAllLibrariesMetadata) GetType() GetSearchAllLibrariesType {
	if o == nil {
		return GetSearchAllLibrariesType("")
	}
	return o.Type
}

func (o *GetSearchAllLibrariesMetadata) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetSearchAllLibrariesMetadata) GetBanner() string {
	if o == nil {
		return ""
	}
	return o.Banner
}

func (o *GetSearchAllLibrariesMetadata) GetTitleSort() string {
	if o == nil {
		return ""
	}
	return o.TitleSort
}

func (o *GetSearchAllLibrariesMetadata) GetContentRating() *string {
	if o == nil {
		return nil
	}
	return o.ContentRating
}

func (o *GetSearchAllLibrariesMetadata) GetSummary() string {
	if o == nil {
		return ""
	}
	return o.Summary
}

func (o *GetSearchAllLibrariesMetadata) GetRating() float32 {
	if o == nil {
		return 0.0
	}
	return o.Rating
}

func (o *GetSearchAllLibrariesMetadata) GetAudienceRating() float64 {
	if o == nil {
		return 0.0
	}
	return o.AudienceRating
}

func (o *GetSearchAllLibrariesMetadata) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

func (o *GetSearchAllLibrariesMetadata) GetTagline() string {
	if o == nil {
		return ""
	}
	return o.Tagline
}

func (o *GetSearchAllLibrariesMetadata) GetThumb() string {
	if o == nil {
		return ""
	}
	return o.Thumb
}

func (o *GetSearchAllLibrariesMetadata) GetArt() string {
	if o == nil {
		return ""
	}
	return o.Art
}

func (o *GetSearchAllLibrariesMetadata) GetTheme() string {
	if o == nil {
		return ""
	}
	return o.Theme
}

func (o *GetSearchAllLibrariesMetadata) GetIndex() int {
	if o == nil {
		return 0
	}
	return o.Index
}

func (o *GetSearchAllLibrariesMetadata) GetLeafCount() *int {
	if o == nil {
		return nil
	}
	return o.LeafCount
}

func (o *GetSearchAllLibrariesMetadata) GetViewedLeafCount() *int {
	if o == nil {
		return nil
	}
	return o.ViewedLeafCount
}

func (o *GetSearchAllLibrariesMetadata) GetChildCount() int {
	if o == nil {
		return 0
	}
	return o.ChildCount
}

func (o *GetSearchAllLibrariesMetadata) GetSeasonCount() int {
	if o == nil {
		return 0
	}
	return o.SeasonCount
}

func (o *GetSearchAllLibrariesMetadata) GetDuration() int {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *GetSearchAllLibrariesMetadata) GetOriginallyAvailableAt() *types.Date {
	if o == nil {
		return nil
	}
	return o.OriginallyAvailableAt
}

func (o *GetSearchAllLibrariesMetadata) GetAddedAt() int64 {
	if o == nil {
		return 0
	}
	return o.AddedAt
}

func (o *GetSearchAllLibrariesMetadata) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetSearchAllLibrariesMetadata) GetParentYear() *int {
	if o == nil {
		return nil
	}
	return o.ParentYear
}

func (o *GetSearchAllLibrariesMetadata) GetAudienceRatingImage() *string {
	if o == nil {
		return nil
	}
	return o.AudienceRatingImage
}

func (o *GetSearchAllLibrariesMetadata) GetChapterSource() *string {
	if o == nil {
		return nil
	}
	return o.ChapterSource
}

func (o *GetSearchAllLibrariesMetadata) GetPrimaryExtraKey() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryExtraKey
}

func (o *GetSearchAllLibrariesMetadata) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *GetSearchAllLibrariesMetadata) GetParentRatingKey() *string {
	if o == nil {
		return nil
	}
	return o.ParentRatingKey
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentRatingKey() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentRatingKey
}

func (o *GetSearchAllLibrariesMetadata) GetParentGUID() *string {
	if o == nil {
		return nil
	}
	return o.ParentGUID
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentGUID() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentGUID
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentSlug() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentSlug
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentKey() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentKey
}

func (o *GetSearchAllLibrariesMetadata) GetParentKey() *string {
	if o == nil {
		return nil
	}
	return o.ParentKey
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentTitle() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentTitle
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentThumb() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentThumb
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentTheme() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentTheme
}

func (o *GetSearchAllLibrariesMetadata) GetGrandparentArt() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentArt
}

func (o *GetSearchAllLibrariesMetadata) GetParentTitle() *string {
	if o == nil {
		return nil
	}
	return o.ParentTitle
}

func (o *GetSearchAllLibrariesMetadata) GetParentIndex() *int {
	if o == nil {
		return nil
	}
	return o.ParentIndex
}

func (o *GetSearchAllLibrariesMetadata) GetParentThumb() *string {
	if o == nil {
		return nil
	}
	return o.ParentThumb
}

func (o *GetSearchAllLibrariesMetadata) GetRatingImage() *string {
	if o == nil {
		return nil
	}
	return o.RatingImage
}

func (o *GetSearchAllLibrariesMetadata) GetViewCount() *int {
	if o == nil {
		return nil
	}
	return o.ViewCount
}

func (o *GetSearchAllLibrariesMetadata) GetViewOffset() *int {
	if o == nil {
		return nil
	}
	return o.ViewOffset
}

func (o *GetSearchAllLibrariesMetadata) GetSkipCount() *int {
	if o == nil {
		return nil
	}
	return o.SkipCount
}

func (o *GetSearchAllLibrariesMetadata) GetSubtype() *string {
	if o == nil {
		return nil
	}
	return o.Subtype
}

func (o *GetSearchAllLibrariesMetadata) GetLastRatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.LastRatedAt
}

func (o *GetSearchAllLibrariesMetadata) GetCreatedAtAccuracy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAtAccuracy
}

func (o *GetSearchAllLibrariesMetadata) GetCreatedAtTZOffset() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAtTZOffset
}

func (o *GetSearchAllLibrariesMetadata) GetLastViewedAt() *int {
	if o == nil {
		return nil
	}
	return o.LastViewedAt
}

func (o *GetSearchAllLibrariesMetadata) GetUserRating() *float32 {
	if o == nil {
		return nil
	}
	return o.UserRating
}

func (o *GetSearchAllLibrariesMetadata) GetImage() []GetSearchAllLibrariesImage {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *GetSearchAllLibrariesMetadata) GetUltraBlurColors() *GetSearchAllLibrariesUltraBlurColors {
	if o == nil {
		return nil
	}
	return o.UltraBlurColors
}

func (o *GetSearchAllLibrariesMetadata) GetGuids() []GetSearchAllLibrariesGuids {
	if o == nil {
		return nil
	}
	return o.Guids
}

func (o *GetSearchAllLibrariesMetadata) GetLibrarySectionID() *int64 {
	if o == nil {
		return nil
	}
	return o.LibrarySectionID
}

func (o *GetSearchAllLibrariesMetadata) GetLibrarySectionTitle() *string {
	if o == nil {
		return nil
	}
	return o.LibrarySectionTitle
}

func (o *GetSearchAllLibrariesMetadata) GetLibrarySectionKey() *string {
	if o == nil {
		return nil
	}
	return o.LibrarySectionKey
}

func (o *GetSearchAllLibrariesMetadata) GetShowOrdering() *GetSearchAllLibrariesShowOrdering {
	if o == nil {
		return nil
	}
	return o.ShowOrdering
}

func (o *GetSearchAllLibrariesMetadata) GetFlattenSeasons() *GetSearchAllLibrariesFlattenSeasons {
	if o == nil {
		return nil
	}
	return o.FlattenSeasons
}

func (o *GetSearchAllLibrariesMetadata) GetSkipChildren() *bool {
	if o == nil {
		return nil
	}
	return o.SkipChildren
}

func (o *GetSearchAllLibrariesMetadata) GetMedia() []GetSearchAllLibrariesMedia {
	if o == nil {
		return nil
	}
	return o.Media
}

func (o *GetSearchAllLibrariesMetadata) GetGenre() []GetSearchAllLibrariesGenre {
	if o == nil {
		return nil
	}
	return o.Genre
}

func (o *GetSearchAllLibrariesMetadata) GetCountry() []GetSearchAllLibrariesCountry {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *GetSearchAllLibrariesMetadata) GetDirector() []GetSearchAllLibrariesDirector {
	if o == nil {
		return nil
	}
	return o.Director
}

func (o *GetSearchAllLibrariesMetadata) GetWriter() []GetSearchAllLibrariesWriter {
	if o == nil {
		return nil
	}
	return o.Writer
}

func (o *GetSearchAllLibrariesMetadata) GetRole() []GetSearchAllLibrariesRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *GetSearchAllLibrariesMetadata) GetLocation() []GetSearchAllLibrariesLocation {
	if o == nil {
		return nil
	}
	return o.Location
}

type SearchResult struct {
	// The score of the search result, typically a float value between 0 and 1.
	Score     float32                         `json:"score"`
	Directory *GetSearchAllLibrariesDirectory `json:"Directory,omitempty"`
	Metadata  *GetSearchAllLibrariesMetadata  `json:"Metadata,omitempty"`
}

func (o *SearchResult) GetScore() float32 {
	if o == nil {
		return 0.0
	}
	return o.Score
}

func (o *SearchResult) GetDirectory() *GetSearchAllLibrariesDirectory {
	if o == nil {
		return nil
	}
	return o.Directory
}

func (o *SearchResult) GetMetadata() *GetSearchAllLibrariesMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type GetSearchAllLibrariesMediaContainer struct {
	// Number of media items returned in this response.
	Size int `json:"size"`
	// Indicates whether syncing is allowed.
	AllowSync bool `json:"allowSync"`
	// An plugin identifier for the media container.
	Identifier string `json:"identifier"`
	// The unique identifier for the library section.
	LibrarySectionID *int64 `json:"librarySectionID,omitempty"`
	// The title of the library section.
	LibrarySectionTitle *string `json:"librarySectionTitle,omitempty"`
	// The universally unique identifier for the library section.
	LibrarySectionUUID *string `json:"librarySectionUUID,omitempty"`
	// The prefix used for media tag resource paths.
	MediaTagPrefix string `json:"mediaTagPrefix"`
	// The version number for media tags.
	MediaTagVersion int64          `json:"mediaTagVersion"`
	SearchResult    []SearchResult `json:"SearchResult"`
}

func (o *GetSearchAllLibrariesMediaContainer) GetSize() int {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *GetSearchAllLibrariesMediaContainer) GetAllowSync() bool {
	if o == nil {
		return false
	}
	return o.AllowSync
}

func (o *GetSearchAllLibrariesMediaContainer) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetSearchAllLibrariesMediaContainer) GetLibrarySectionID() *int64 {
	if o == nil {
		return nil
	}
	return o.LibrarySectionID
}

func (o *GetSearchAllLibrariesMediaContainer) GetLibrarySectionTitle() *string {
	if o == nil {
		return nil
	}
	return o.LibrarySectionTitle
}

func (o *GetSearchAllLibrariesMediaContainer) GetLibrarySectionUUID() *string {
	if o == nil {
		return nil
	}
	return o.LibrarySectionUUID
}

func (o *GetSearchAllLibrariesMediaContainer) GetMediaTagPrefix() string {
	if o == nil {
		return ""
	}
	return o.MediaTagPrefix
}

func (o *GetSearchAllLibrariesMediaContainer) GetMediaTagVersion() int64 {
	if o == nil {
		return 0
	}
	return o.MediaTagVersion
}

func (o *GetSearchAllLibrariesMediaContainer) GetSearchResult() []SearchResult {
	if o == nil {
		return []SearchResult{}
	}
	return o.SearchResult
}

// GetSearchAllLibrariesResponseBody - The libraries available on the Server
type GetSearchAllLibrariesResponseBody struct {
	MediaContainer GetSearchAllLibrariesMediaContainer `json:"MediaContainer"`
}

func (o *GetSearchAllLibrariesResponseBody) GetMediaContainer() GetSearchAllLibrariesMediaContainer {
	if o == nil {
		return GetSearchAllLibrariesMediaContainer{}
	}
	return o.MediaContainer
}

type GetSearchAllLibrariesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The libraries available on the Server
	Object *GetSearchAllLibrariesResponseBody
}

func (o *GetSearchAllLibrariesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSearchAllLibrariesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSearchAllLibrariesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSearchAllLibrariesResponse) GetObject() *GetSearchAllLibrariesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
