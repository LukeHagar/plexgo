// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type GetMetadataItemGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (g GetMetadataItemGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetMetadataItemGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetMetadataItemGlobals) GetAccepts() *components.Accepts {
	if g == nil {
		return nil
	}
	return g.Accepts
}

func (g *GetMetadataItemGlobals) GetClientIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.ClientIdentifier
}

func (g *GetMetadataItemGlobals) GetProduct() *string {
	if g == nil {
		return nil
	}
	return g.Product
}

func (g *GetMetadataItemGlobals) GetVersion() *string {
	if g == nil {
		return nil
	}
	return g.Version
}

func (g *GetMetadataItemGlobals) GetPlatform() *string {
	if g == nil {
		return nil
	}
	return g.Platform
}

func (g *GetMetadataItemGlobals) GetPlatformVersion() *string {
	if g == nil {
		return nil
	}
	return g.PlatformVersion
}

func (g *GetMetadataItemGlobals) GetDevice() *string {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetMetadataItemGlobals) GetModel() *string {
	if g == nil {
		return nil
	}
	return g.Model
}

func (g *GetMetadataItemGlobals) GetDeviceVendor() *string {
	if g == nil {
		return nil
	}
	return g.DeviceVendor
}

func (g *GetMetadataItemGlobals) GetDeviceName() *string {
	if g == nil {
		return nil
	}
	return g.DeviceName
}

func (g *GetMetadataItemGlobals) GetMarketplace() *string {
	if g == nil {
		return nil
	}
	return g.Marketplace
}

type GetMetadataItemRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string  `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	Ids         []string `pathParam:"style=simple,explode=false,name=ids"`
	// Determines if file check should be performed asynchronously.  An activity is created to indicate progress.  Default is false.
	AsyncCheckFiles *components.BoolInt `queryParam:"style=form,explode=true,name=asyncCheckFiles"`
	// Determines if local media agent refresh should be performed asynchronously.  An activity is created to indicate progress.  Default is false.
	AsyncRefreshLocalMediaAgent *components.BoolInt `queryParam:"style=form,explode=true,name=asyncRefreshLocalMediaAgent"`
	// Determines if analysis refresh should be performed asynchronously.  An activity is created to indicate progress.  Default is false.
	AsyncRefreshAnalysis *components.BoolInt `queryParam:"style=form,explode=true,name=asyncRefreshAnalysis"`
	// Determines if file check should be performed synchronously.  Specifying `asyncCheckFiles` will cause this option to be ignored.  Default is false.
	CheckFiles *components.BoolInt `queryParam:"style=form,explode=true,name=checkFiles"`
	// Determines if synchronous local media agent and analysis refresh should be skipped.  Specifying async versions will cause synchronous versions to be skipped.  Default is false.
	SkipRefresh *components.BoolInt `queryParam:"style=form,explode=true,name=skipRefresh"`
	// Determines if file existence check should be performed synchronously.  Specifying `checkFiles` will imply this option.  Default is false.
	CheckFileAvailability *components.BoolInt `queryParam:"style=form,explode=true,name=checkFileAvailability"`
	// Add metadata augmentations.  An activity is created to indicate progress.  Option will be ignored if specified by non-admin or if multiple metadata items are requested.  Default is false.
	AsyncAugmentMetadata *components.BoolInt `queryParam:"style=form,explode=true,name=asyncAugmentMetadata"`
	// Number of augmentations to add.  Requires `asyncAugmentMetadata` to be specified.
	AugmentCount *components.BoolInt `queryParam:"style=form,explode=true,name=augmentCount"`
}

func (g GetMetadataItemRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetMetadataItemRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"ids"}); err != nil {
		return err
	}
	return nil
}

func (g *GetMetadataItemRequest) GetAccepts() *components.Accepts {
	if g == nil {
		return nil
	}
	return g.Accepts
}

func (g *GetMetadataItemRequest) GetClientIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.ClientIdentifier
}

func (g *GetMetadataItemRequest) GetProduct() *string {
	if g == nil {
		return nil
	}
	return g.Product
}

func (g *GetMetadataItemRequest) GetVersion() *string {
	if g == nil {
		return nil
	}
	return g.Version
}

func (g *GetMetadataItemRequest) GetPlatform() *string {
	if g == nil {
		return nil
	}
	return g.Platform
}

func (g *GetMetadataItemRequest) GetPlatformVersion() *string {
	if g == nil {
		return nil
	}
	return g.PlatformVersion
}

func (g *GetMetadataItemRequest) GetDevice() *string {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetMetadataItemRequest) GetModel() *string {
	if g == nil {
		return nil
	}
	return g.Model
}

func (g *GetMetadataItemRequest) GetDeviceVendor() *string {
	if g == nil {
		return nil
	}
	return g.DeviceVendor
}

func (g *GetMetadataItemRequest) GetDeviceName() *string {
	if g == nil {
		return nil
	}
	return g.DeviceName
}

func (g *GetMetadataItemRequest) GetMarketplace() *string {
	if g == nil {
		return nil
	}
	return g.Marketplace
}

func (g *GetMetadataItemRequest) GetIds() []string {
	if g == nil {
		return []string{}
	}
	return g.Ids
}

func (g *GetMetadataItemRequest) GetAsyncCheckFiles() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.AsyncCheckFiles
}

func (g *GetMetadataItemRequest) GetAsyncRefreshLocalMediaAgent() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.AsyncRefreshLocalMediaAgent
}

func (g *GetMetadataItemRequest) GetAsyncRefreshAnalysis() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.AsyncRefreshAnalysis
}

func (g *GetMetadataItemRequest) GetCheckFiles() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.CheckFiles
}

func (g *GetMetadataItemRequest) GetSkipRefresh() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.SkipRefresh
}

func (g *GetMetadataItemRequest) GetCheckFileAvailability() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.CheckFileAvailability
}

func (g *GetMetadataItemRequest) GetAsyncAugmentMetadata() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.AsyncAugmentMetadata
}

func (g *GetMetadataItemRequest) GetAugmentCount() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.AugmentCount
}

type GetMetadataItemResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	MediaContainerWithMetadata *components.MediaContainerWithMetadata
	Headers                    map[string][]string
}

func (g *GetMetadataItemResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetMetadataItemResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetMetadataItemResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetMetadataItemResponse) GetMediaContainerWithMetadata() *components.MediaContainerWithMetadata {
	if g == nil {
		return nil
	}
	return g.MediaContainerWithMetadata
}

func (g *GetMetadataItemResponse) GetHeaders() map[string][]string {
	if g == nil {
		return map[string][]string{}
	}
	return g.Headers
}
