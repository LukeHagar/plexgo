// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type EditSectionGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (e EditSectionGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EditSectionGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (e *EditSectionGlobals) GetAccepts() *components.Accepts {
	if e == nil {
		return nil
	}
	return e.Accepts
}

func (e *EditSectionGlobals) GetClientIdentifier() *string {
	if e == nil {
		return nil
	}
	return e.ClientIdentifier
}

func (e *EditSectionGlobals) GetProduct() *string {
	if e == nil {
		return nil
	}
	return e.Product
}

func (e *EditSectionGlobals) GetVersion() *string {
	if e == nil {
		return nil
	}
	return e.Version
}

func (e *EditSectionGlobals) GetPlatform() *string {
	if e == nil {
		return nil
	}
	return e.Platform
}

func (e *EditSectionGlobals) GetPlatformVersion() *string {
	if e == nil {
		return nil
	}
	return e.PlatformVersion
}

func (e *EditSectionGlobals) GetDevice() *string {
	if e == nil {
		return nil
	}
	return e.Device
}

func (e *EditSectionGlobals) GetModel() *string {
	if e == nil {
		return nil
	}
	return e.Model
}

func (e *EditSectionGlobals) GetDeviceVendor() *string {
	if e == nil {
		return nil
	}
	return e.DeviceVendor
}

func (e *EditSectionGlobals) GetDeviceName() *string {
	if e == nil {
		return nil
	}
	return e.DeviceName
}

func (e *EditSectionGlobals) GetMarketplace() *string {
	if e == nil {
		return nil
	}
	return e.Marketplace
}

// EditSectionQueryParamPrefs - The preferences for this section
type EditSectionQueryParamPrefs struct {
}

type EditSectionRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The section identifier
	SectionID string `pathParam:"style=simple,explode=false,name=sectionId"`
	// The name of the new section
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The scanner this section should use
	Scanner *string `queryParam:"style=form,explode=true,name=scanner"`
	// The agent this section should use for metadata
	Agent string `queryParam:"style=form,explode=true,name=agent"`
	// The agent group id for this section
	MetadataAgentProviderGroupID *string `queryParam:"style=form,explode=true,name=metadataAgentProviderGroupId"`
	// The language of this section
	Language *string `queryParam:"style=form,explode=true,name=language"`
	// The locations on disk to add to this section
	Locations []string `queryParam:"style=form,explode=true,name=locations"`
	// The preferences for this section
	Prefs *EditSectionQueryParamPrefs `queryParam:"style=deepObject,explode=true,name=prefs"`
}

func (e EditSectionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EditSectionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"sectionId", "agent"}); err != nil {
		return err
	}
	return nil
}

func (e *EditSectionRequest) GetAccepts() *components.Accepts {
	if e == nil {
		return nil
	}
	return e.Accepts
}

func (e *EditSectionRequest) GetClientIdentifier() *string {
	if e == nil {
		return nil
	}
	return e.ClientIdentifier
}

func (e *EditSectionRequest) GetProduct() *string {
	if e == nil {
		return nil
	}
	return e.Product
}

func (e *EditSectionRequest) GetVersion() *string {
	if e == nil {
		return nil
	}
	return e.Version
}

func (e *EditSectionRequest) GetPlatform() *string {
	if e == nil {
		return nil
	}
	return e.Platform
}

func (e *EditSectionRequest) GetPlatformVersion() *string {
	if e == nil {
		return nil
	}
	return e.PlatformVersion
}

func (e *EditSectionRequest) GetDevice() *string {
	if e == nil {
		return nil
	}
	return e.Device
}

func (e *EditSectionRequest) GetModel() *string {
	if e == nil {
		return nil
	}
	return e.Model
}

func (e *EditSectionRequest) GetDeviceVendor() *string {
	if e == nil {
		return nil
	}
	return e.DeviceVendor
}

func (e *EditSectionRequest) GetDeviceName() *string {
	if e == nil {
		return nil
	}
	return e.DeviceName
}

func (e *EditSectionRequest) GetMarketplace() *string {
	if e == nil {
		return nil
	}
	return e.Marketplace
}

func (e *EditSectionRequest) GetSectionID() string {
	if e == nil {
		return ""
	}
	return e.SectionID
}

func (e *EditSectionRequest) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EditSectionRequest) GetScanner() *string {
	if e == nil {
		return nil
	}
	return e.Scanner
}

func (e *EditSectionRequest) GetAgent() string {
	if e == nil {
		return ""
	}
	return e.Agent
}

func (e *EditSectionRequest) GetMetadataAgentProviderGroupID() *string {
	if e == nil {
		return nil
	}
	return e.MetadataAgentProviderGroupID
}

func (e *EditSectionRequest) GetLanguage() *string {
	if e == nil {
		return nil
	}
	return e.Language
}

func (e *EditSectionRequest) GetLocations() []string {
	if e == nil {
		return nil
	}
	return e.Locations
}

func (e *EditSectionRequest) GetPrefs() *EditSectionQueryParamPrefs {
	if e == nil {
		return nil
	}
	return e.Prefs
}

type EditSectionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (e *EditSectionResponse) GetContentType() string {
	if e == nil {
		return ""
	}
	return e.ContentType
}

func (e *EditSectionResponse) GetStatusCode() int {
	if e == nil {
		return 0
	}
	return e.StatusCode
}

func (e *EditSectionResponse) GetRawResponse() *http.Response {
	if e == nil {
		return nil
	}
	return e.RawResponse
}
