// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type SetStreamSelectionGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (s SetStreamSelectionGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SetStreamSelectionGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SetStreamSelectionGlobals) GetAccepts() *components.Accepts {
	if s == nil {
		return nil
	}
	return s.Accepts
}

func (s *SetStreamSelectionGlobals) GetClientIdentifier() *string {
	if s == nil {
		return nil
	}
	return s.ClientIdentifier
}

func (s *SetStreamSelectionGlobals) GetProduct() *string {
	if s == nil {
		return nil
	}
	return s.Product
}

func (s *SetStreamSelectionGlobals) GetVersion() *string {
	if s == nil {
		return nil
	}
	return s.Version
}

func (s *SetStreamSelectionGlobals) GetPlatform() *string {
	if s == nil {
		return nil
	}
	return s.Platform
}

func (s *SetStreamSelectionGlobals) GetPlatformVersion() *string {
	if s == nil {
		return nil
	}
	return s.PlatformVersion
}

func (s *SetStreamSelectionGlobals) GetDevice() *string {
	if s == nil {
		return nil
	}
	return s.Device
}

func (s *SetStreamSelectionGlobals) GetModel() *string {
	if s == nil {
		return nil
	}
	return s.Model
}

func (s *SetStreamSelectionGlobals) GetDeviceVendor() *string {
	if s == nil {
		return nil
	}
	return s.DeviceVendor
}

func (s *SetStreamSelectionGlobals) GetDeviceName() *string {
	if s == nil {
		return nil
	}
	return s.DeviceName
}

func (s *SetStreamSelectionGlobals) GetMarketplace() *string {
	if s == nil {
		return nil
	}
	return s.Marketplace
}

type SetStreamSelectionRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The id of the part to select streams on
	PartID int64 `pathParam:"style=simple,explode=false,name=partId"`
	// The id of the audio stream to select in this part
	AudioStreamID *int64 `queryParam:"style=form,explode=true,name=audioStreamID"`
	// The id of the subtitle stream to select in this part.  Specify 0 to select no subtitle
	SubtitleStreamID *int64 `queryParam:"style=form,explode=true,name=subtitleStreamID"`
	// Perform the same for all parts of this media selecting similar streams in each
	AllParts *components.BoolInt `queryParam:"style=form,explode=true,name=allParts"`
}

func (s SetStreamSelectionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SetStreamSelectionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"partId"}); err != nil {
		return err
	}
	return nil
}

func (s *SetStreamSelectionRequest) GetAccepts() *components.Accepts {
	if s == nil {
		return nil
	}
	return s.Accepts
}

func (s *SetStreamSelectionRequest) GetClientIdentifier() *string {
	if s == nil {
		return nil
	}
	return s.ClientIdentifier
}

func (s *SetStreamSelectionRequest) GetProduct() *string {
	if s == nil {
		return nil
	}
	return s.Product
}

func (s *SetStreamSelectionRequest) GetVersion() *string {
	if s == nil {
		return nil
	}
	return s.Version
}

func (s *SetStreamSelectionRequest) GetPlatform() *string {
	if s == nil {
		return nil
	}
	return s.Platform
}

func (s *SetStreamSelectionRequest) GetPlatformVersion() *string {
	if s == nil {
		return nil
	}
	return s.PlatformVersion
}

func (s *SetStreamSelectionRequest) GetDevice() *string {
	if s == nil {
		return nil
	}
	return s.Device
}

func (s *SetStreamSelectionRequest) GetModel() *string {
	if s == nil {
		return nil
	}
	return s.Model
}

func (s *SetStreamSelectionRequest) GetDeviceVendor() *string {
	if s == nil {
		return nil
	}
	return s.DeviceVendor
}

func (s *SetStreamSelectionRequest) GetDeviceName() *string {
	if s == nil {
		return nil
	}
	return s.DeviceName
}

func (s *SetStreamSelectionRequest) GetMarketplace() *string {
	if s == nil {
		return nil
	}
	return s.Marketplace
}

func (s *SetStreamSelectionRequest) GetPartID() int64 {
	if s == nil {
		return 0
	}
	return s.PartID
}

func (s *SetStreamSelectionRequest) GetAudioStreamID() *int64 {
	if s == nil {
		return nil
	}
	return s.AudioStreamID
}

func (s *SetStreamSelectionRequest) GetSubtitleStreamID() *int64 {
	if s == nil {
		return nil
	}
	return s.SubtitleStreamID
}

func (s *SetStreamSelectionRequest) GetAllParts() *components.BoolInt {
	if s == nil {
		return nil
	}
	return s.AllParts
}

type SetStreamSelectionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (s *SetStreamSelectionResponse) GetContentType() string {
	if s == nil {
		return ""
	}
	return s.ContentType
}

func (s *SetStreamSelectionResponse) GetStatusCode() int {
	if s == nil {
		return 0
	}
	return s.StatusCode
}

func (s *SetStreamSelectionResponse) GetRawResponse() *http.Response {
	if s == nil {
		return nil
	}
	return s.RawResponse
}
