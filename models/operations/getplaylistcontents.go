// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/types"
	"net/http"
)

// GetPlaylistContentsQueryParamType - The type of media to retrieve or filter by.
// 1 = movie
// 2 = show
// 3 = season
// 4 = episode
// E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
type GetPlaylistContentsQueryParamType int64

const (
	GetPlaylistContentsQueryParamTypeMovie      GetPlaylistContentsQueryParamType = 1
	GetPlaylistContentsQueryParamTypeTvShow     GetPlaylistContentsQueryParamType = 2
	GetPlaylistContentsQueryParamTypeSeason     GetPlaylistContentsQueryParamType = 3
	GetPlaylistContentsQueryParamTypeEpisode    GetPlaylistContentsQueryParamType = 4
	GetPlaylistContentsQueryParamTypeArtist     GetPlaylistContentsQueryParamType = 5
	GetPlaylistContentsQueryParamTypeAlbum      GetPlaylistContentsQueryParamType = 6
	GetPlaylistContentsQueryParamTypeTrack      GetPlaylistContentsQueryParamType = 7
	GetPlaylistContentsQueryParamTypePhotoAlbum GetPlaylistContentsQueryParamType = 8
	GetPlaylistContentsQueryParamTypePhoto      GetPlaylistContentsQueryParamType = 9
)

func (e GetPlaylistContentsQueryParamType) ToPointer() *GetPlaylistContentsQueryParamType {
	return &e
}

type GetPlaylistContentsRequest struct {
	// the ID of the playlist
	PlaylistID float64 `pathParam:"style=simple,explode=false,name=playlistID"`
	// The type of media to retrieve or filter by.
	// 1 = movie
	// 2 = show
	// 3 = season
	// 4 = episode
	// E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
	//
	Type GetPlaylistContentsQueryParamType `queryParam:"style=form,explode=true,name=type"`
}

func (g *GetPlaylistContentsRequest) GetPlaylistID() float64 {
	if g == nil {
		return 0.0
	}
	return g.PlaylistID
}

func (g *GetPlaylistContentsRequest) GetType() GetPlaylistContentsQueryParamType {
	if g == nil {
		return GetPlaylistContentsQueryParamType(0)
	}
	return g.Type
}

type GetPlaylistContentsPart struct {
	ID                    *int    `json:"id,omitempty"`
	Key                   *string `json:"key,omitempty"`
	Duration              *int    `json:"duration,omitempty"`
	File                  *string `json:"file,omitempty"`
	Size                  *int    `json:"size,omitempty"`
	AudioProfile          *string `json:"audioProfile,omitempty"`
	Container             *string `json:"container,omitempty"`
	Has64bitOffsets       *bool   `json:"has64bitOffsets,omitempty"`
	OptimizedForStreaming *bool   `json:"optimizedForStreaming,omitempty"`
	VideoProfile          *string `json:"videoProfile,omitempty"`
}

func (g *GetPlaylistContentsPart) GetID() *int {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetPlaylistContentsPart) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetPlaylistContentsPart) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetPlaylistContentsPart) GetFile() *string {
	if g == nil {
		return nil
	}
	return g.File
}

func (g *GetPlaylistContentsPart) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetPlaylistContentsPart) GetAudioProfile() *string {
	if g == nil {
		return nil
	}
	return g.AudioProfile
}

func (g *GetPlaylistContentsPart) GetContainer() *string {
	if g == nil {
		return nil
	}
	return g.Container
}

func (g *GetPlaylistContentsPart) GetHas64bitOffsets() *bool {
	if g == nil {
		return nil
	}
	return g.Has64bitOffsets
}

func (g *GetPlaylistContentsPart) GetOptimizedForStreaming() *bool {
	if g == nil {
		return nil
	}
	return g.OptimizedForStreaming
}

func (g *GetPlaylistContentsPart) GetVideoProfile() *string {
	if g == nil {
		return nil
	}
	return g.VideoProfile
}

type GetPlaylistContentsMedia struct {
	ID                    *int                      `json:"id,omitempty"`
	Duration              *int                      `json:"duration,omitempty"`
	Bitrate               *int                      `json:"bitrate,omitempty"`
	Width                 *int                      `json:"width,omitempty"`
	Height                *int                      `json:"height,omitempty"`
	AspectRatio           *float64                  `json:"aspectRatio,omitempty"`
	AudioChannels         *int                      `json:"audioChannels,omitempty"`
	AudioCodec            *string                   `json:"audioCodec,omitempty"`
	VideoCodec            *string                   `json:"videoCodec,omitempty"`
	VideoResolution       *string                   `json:"videoResolution,omitempty"`
	Container             *string                   `json:"container,omitempty"`
	VideoFrameRate        *string                   `json:"videoFrameRate,omitempty"`
	OptimizedForStreaming *int                      `json:"optimizedForStreaming,omitempty"`
	AudioProfile          *string                   `json:"audioProfile,omitempty"`
	Has64bitOffsets       *bool                     `json:"has64bitOffsets,omitempty"`
	VideoProfile          *string                   `json:"videoProfile,omitempty"`
	Part                  []GetPlaylistContentsPart `json:"Part,omitempty"`
}

func (g *GetPlaylistContentsMedia) GetID() *int {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetPlaylistContentsMedia) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetPlaylistContentsMedia) GetBitrate() *int {
	if g == nil {
		return nil
	}
	return g.Bitrate
}

func (g *GetPlaylistContentsMedia) GetWidth() *int {
	if g == nil {
		return nil
	}
	return g.Width
}

func (g *GetPlaylistContentsMedia) GetHeight() *int {
	if g == nil {
		return nil
	}
	return g.Height
}

func (g *GetPlaylistContentsMedia) GetAspectRatio() *float64 {
	if g == nil {
		return nil
	}
	return g.AspectRatio
}

func (g *GetPlaylistContentsMedia) GetAudioChannels() *int {
	if g == nil {
		return nil
	}
	return g.AudioChannels
}

func (g *GetPlaylistContentsMedia) GetAudioCodec() *string {
	if g == nil {
		return nil
	}
	return g.AudioCodec
}

func (g *GetPlaylistContentsMedia) GetVideoCodec() *string {
	if g == nil {
		return nil
	}
	return g.VideoCodec
}

func (g *GetPlaylistContentsMedia) GetVideoResolution() *string {
	if g == nil {
		return nil
	}
	return g.VideoResolution
}

func (g *GetPlaylistContentsMedia) GetContainer() *string {
	if g == nil {
		return nil
	}
	return g.Container
}

func (g *GetPlaylistContentsMedia) GetVideoFrameRate() *string {
	if g == nil {
		return nil
	}
	return g.VideoFrameRate
}

func (g *GetPlaylistContentsMedia) GetOptimizedForStreaming() *int {
	if g == nil {
		return nil
	}
	return g.OptimizedForStreaming
}

func (g *GetPlaylistContentsMedia) GetAudioProfile() *string {
	if g == nil {
		return nil
	}
	return g.AudioProfile
}

func (g *GetPlaylistContentsMedia) GetHas64bitOffsets() *bool {
	if g == nil {
		return nil
	}
	return g.Has64bitOffsets
}

func (g *GetPlaylistContentsMedia) GetVideoProfile() *string {
	if g == nil {
		return nil
	}
	return g.VideoProfile
}

func (g *GetPlaylistContentsMedia) GetPart() []GetPlaylistContentsPart {
	if g == nil {
		return nil
	}
	return g.Part
}

type GetPlaylistContentsGenre struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetPlaylistContentsGenre) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetPlaylistContentsCountry struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetPlaylistContentsCountry) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetPlaylistContentsDirector struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetPlaylistContentsDirector) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetPlaylistContentsWriter struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetPlaylistContentsWriter) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetPlaylistContentsRole struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetPlaylistContentsRole) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetPlaylistContentsMetadata struct {
	RatingKey              *string                       `json:"ratingKey,omitempty"`
	Key                    *string                       `json:"key,omitempty"`
	GUID                   *string                       `json:"guid,omitempty"`
	Studio                 *string                       `json:"studio,omitempty"`
	Type                   *string                       `json:"type,omitempty"`
	Title                  *string                       `json:"title,omitempty"`
	TitleSort              *string                       `json:"titleSort,omitempty"`
	LibrarySectionTitle    *string                       `json:"librarySectionTitle,omitempty"`
	LibrarySectionID       *int                          `json:"librarySectionID,omitempty"`
	LibrarySectionKey      *string                       `json:"librarySectionKey,omitempty"`
	ContentRating          *string                       `json:"contentRating,omitempty"`
	Summary                *string                       `json:"summary,omitempty"`
	Rating                 *float64                      `json:"rating,omitempty"`
	AudienceRating         *float64                      `json:"audienceRating,omitempty"`
	Year                   *int                          `json:"year,omitempty"`
	Tagline                *string                       `json:"tagline,omitempty"`
	Thumb                  *string                       `json:"thumb,omitempty"`
	Art                    *string                       `json:"art,omitempty"`
	Duration               *int                          `json:"duration,omitempty"`
	OriginallyAvailableAt  *types.Date                   `json:"originallyAvailableAt,omitempty"`
	AddedAt                *int                          `json:"addedAt,omitempty"`
	UpdatedAt              *int                          `json:"updatedAt,omitempty"`
	AudienceRatingImage    *string                       `json:"audienceRatingImage,omitempty"`
	HasPremiumExtras       *string                       `json:"hasPremiumExtras,omitempty"`
	HasPremiumPrimaryExtra *string                       `json:"hasPremiumPrimaryExtra,omitempty"`
	RatingImage            *string                       `json:"ratingImage,omitempty"`
	Media                  []GetPlaylistContentsMedia    `json:"Media,omitempty"`
	Genre                  []GetPlaylistContentsGenre    `json:"Genre,omitempty"`
	Country                []GetPlaylistContentsCountry  `json:"Country,omitempty"`
	Director               []GetPlaylistContentsDirector `json:"Director,omitempty"`
	Writer                 []GetPlaylistContentsWriter   `json:"Writer,omitempty"`
	Role                   []GetPlaylistContentsRole     `json:"Role,omitempty"`
}

func (g GetPlaylistContentsMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetPlaylistContentsMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetPlaylistContentsMetadata) GetRatingKey() *string {
	if g == nil {
		return nil
	}
	return g.RatingKey
}

func (g *GetPlaylistContentsMetadata) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetPlaylistContentsMetadata) GetGUID() *string {
	if g == nil {
		return nil
	}
	return g.GUID
}

func (g *GetPlaylistContentsMetadata) GetStudio() *string {
	if g == nil {
		return nil
	}
	return g.Studio
}

func (g *GetPlaylistContentsMetadata) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetPlaylistContentsMetadata) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GetPlaylistContentsMetadata) GetTitleSort() *string {
	if g == nil {
		return nil
	}
	return g.TitleSort
}

func (g *GetPlaylistContentsMetadata) GetLibrarySectionTitle() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionTitle
}

func (g *GetPlaylistContentsMetadata) GetLibrarySectionID() *int {
	if g == nil {
		return nil
	}
	return g.LibrarySectionID
}

func (g *GetPlaylistContentsMetadata) GetLibrarySectionKey() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionKey
}

func (g *GetPlaylistContentsMetadata) GetContentRating() *string {
	if g == nil {
		return nil
	}
	return g.ContentRating
}

func (g *GetPlaylistContentsMetadata) GetSummary() *string {
	if g == nil {
		return nil
	}
	return g.Summary
}

func (g *GetPlaylistContentsMetadata) GetRating() *float64 {
	if g == nil {
		return nil
	}
	return g.Rating
}

func (g *GetPlaylistContentsMetadata) GetAudienceRating() *float64 {
	if g == nil {
		return nil
	}
	return g.AudienceRating
}

func (g *GetPlaylistContentsMetadata) GetYear() *int {
	if g == nil {
		return nil
	}
	return g.Year
}

func (g *GetPlaylistContentsMetadata) GetTagline() *string {
	if g == nil {
		return nil
	}
	return g.Tagline
}

func (g *GetPlaylistContentsMetadata) GetThumb() *string {
	if g == nil {
		return nil
	}
	return g.Thumb
}

func (g *GetPlaylistContentsMetadata) GetArt() *string {
	if g == nil {
		return nil
	}
	return g.Art
}

func (g *GetPlaylistContentsMetadata) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetPlaylistContentsMetadata) GetOriginallyAvailableAt() *types.Date {
	if g == nil {
		return nil
	}
	return g.OriginallyAvailableAt
}

func (g *GetPlaylistContentsMetadata) GetAddedAt() *int {
	if g == nil {
		return nil
	}
	return g.AddedAt
}

func (g *GetPlaylistContentsMetadata) GetUpdatedAt() *int {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetPlaylistContentsMetadata) GetAudienceRatingImage() *string {
	if g == nil {
		return nil
	}
	return g.AudienceRatingImage
}

func (g *GetPlaylistContentsMetadata) GetHasPremiumExtras() *string {
	if g == nil {
		return nil
	}
	return g.HasPremiumExtras
}

func (g *GetPlaylistContentsMetadata) GetHasPremiumPrimaryExtra() *string {
	if g == nil {
		return nil
	}
	return g.HasPremiumPrimaryExtra
}

func (g *GetPlaylistContentsMetadata) GetRatingImage() *string {
	if g == nil {
		return nil
	}
	return g.RatingImage
}

func (g *GetPlaylistContentsMetadata) GetMedia() []GetPlaylistContentsMedia {
	if g == nil {
		return nil
	}
	return g.Media
}

func (g *GetPlaylistContentsMetadata) GetGenre() []GetPlaylistContentsGenre {
	if g == nil {
		return nil
	}
	return g.Genre
}

func (g *GetPlaylistContentsMetadata) GetCountry() []GetPlaylistContentsCountry {
	if g == nil {
		return nil
	}
	return g.Country
}

func (g *GetPlaylistContentsMetadata) GetDirector() []GetPlaylistContentsDirector {
	if g == nil {
		return nil
	}
	return g.Director
}

func (g *GetPlaylistContentsMetadata) GetWriter() []GetPlaylistContentsWriter {
	if g == nil {
		return nil
	}
	return g.Writer
}

func (g *GetPlaylistContentsMetadata) GetRole() []GetPlaylistContentsRole {
	if g == nil {
		return nil
	}
	return g.Role
}

type GetPlaylistContentsMediaContainer struct {
	Size         *int                          `json:"size,omitempty"`
	Composite    *string                       `json:"composite,omitempty"`
	Duration     *int                          `json:"duration,omitempty"`
	LeafCount    *int                          `json:"leafCount,omitempty"`
	PlaylistType *string                       `json:"playlistType,omitempty"`
	RatingKey    *string                       `json:"ratingKey,omitempty"`
	Smart        *bool                         `json:"smart,omitempty"`
	Title        *string                       `json:"title,omitempty"`
	Metadata     []GetPlaylistContentsMetadata `json:"Metadata,omitempty"`
}

func (g *GetPlaylistContentsMediaContainer) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetPlaylistContentsMediaContainer) GetComposite() *string {
	if g == nil {
		return nil
	}
	return g.Composite
}

func (g *GetPlaylistContentsMediaContainer) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetPlaylistContentsMediaContainer) GetLeafCount() *int {
	if g == nil {
		return nil
	}
	return g.LeafCount
}

func (g *GetPlaylistContentsMediaContainer) GetPlaylistType() *string {
	if g == nil {
		return nil
	}
	return g.PlaylistType
}

func (g *GetPlaylistContentsMediaContainer) GetRatingKey() *string {
	if g == nil {
		return nil
	}
	return g.RatingKey
}

func (g *GetPlaylistContentsMediaContainer) GetSmart() *bool {
	if g == nil {
		return nil
	}
	return g.Smart
}

func (g *GetPlaylistContentsMediaContainer) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GetPlaylistContentsMediaContainer) GetMetadata() []GetPlaylistContentsMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

// GetPlaylistContentsResponseBody - The playlist contents
type GetPlaylistContentsResponseBody struct {
	MediaContainer *GetPlaylistContentsMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetPlaylistContentsResponseBody) GetMediaContainer() *GetPlaylistContentsMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetPlaylistContentsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The playlist contents
	Object *GetPlaylistContentsResponseBody
}

func (g *GetPlaylistContentsResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetPlaylistContentsResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetPlaylistContentsResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetPlaylistContentsResponse) GetObject() *GetPlaylistContentsResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
