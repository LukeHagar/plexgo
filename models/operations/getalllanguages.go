// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type Language struct {
	// 3 letter language code
	Code  *string `json:"code,omitempty"`
	Title *string `json:"title,omitempty"`
}

func (l *Language) GetCode() *string {
	if l == nil {
		return nil
	}
	return l.Code
}

func (l *Language) GetTitle() *string {
	if l == nil {
		return nil
	}
	return l.Title
}

// GetAllLanguagesMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type GetAllLanguagesMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize *int64     `json:"totalSize,omitempty"`
	Language  []Language `json:"Language,omitempty"`
}

func (g *GetAllLanguagesMediaContainer) GetIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.Identifier
}

func (g *GetAllLanguagesMediaContainer) GetOffset() *int64 {
	if g == nil {
		return nil
	}
	return g.Offset
}

func (g *GetAllLanguagesMediaContainer) GetSize() *int64 {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetAllLanguagesMediaContainer) GetTotalSize() *int64 {
	if g == nil {
		return nil
	}
	return g.TotalSize
}

func (g *GetAllLanguagesMediaContainer) GetLanguage() []Language {
	if g == nil {
		return nil
	}
	return g.Language
}

// GetAllLanguagesResponseBody - OK
type GetAllLanguagesResponseBody struct {
	MediaContainer *GetAllLanguagesMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetAllLanguagesResponseBody) GetMediaContainer() *GetAllLanguagesMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetAllLanguagesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object  *GetAllLanguagesResponseBody
	Headers map[string][]string
}

func (g *GetAllLanguagesResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetAllLanguagesResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetAllLanguagesResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetAllLanguagesResponse) GetObject() *GetAllLanguagesResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}

func (g *GetAllLanguagesResponse) GetHeaders() map[string][]string {
	if g == nil {
		return map[string][]string{}
	}
	return g.Headers
}
