// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type StartUniversalTranscodeRequest struct {
	// Whether the media item has MDE
	HasMDE float64 `queryParam:"style=form,explode=true,name=hasMDE"`
	// The path to the media item to transcode
	Path string `queryParam:"style=form,explode=true,name=path"`
	// The index of the media item to transcode
	MediaIndex float64 `queryParam:"style=form,explode=true,name=mediaIndex"`
	// The index of the part to transcode
	PartIndex float64 `queryParam:"style=form,explode=true,name=partIndex"`
	// The protocol to use for the transcode session
	Protocol string `queryParam:"style=form,explode=true,name=protocol"`
	// Whether to use fast seek or not
	FastSeek *float64 `queryParam:"style=form,explode=true,name=fastSeek"`
	// Whether to use direct play or not
	DirectPlay *float64 `queryParam:"style=form,explode=true,name=directPlay"`
	// Whether to use direct stream or not
	DirectStream *float64 `queryParam:"style=form,explode=true,name=directStream"`
	// The size of the subtitles
	SubtitleSize *float64 `queryParam:"style=form,explode=true,name=subtitleSize"`
	// The subtitles
	Subtites *string `queryParam:"style=form,explode=true,name=subtites"`
	// The audio boost
	AudioBoost *float64 `queryParam:"style=form,explode=true,name=audioBoost"`
	// The location of the transcode session
	Location *string `queryParam:"style=form,explode=true,name=location"`
	// The size of the media buffer
	MediaBufferSize *float64 `queryParam:"style=form,explode=true,name=mediaBufferSize"`
	// The session ID
	Session *string `queryParam:"style=form,explode=true,name=session"`
	// Whether to add a debug overlay or not
	AddDebugOverlay *float64 `queryParam:"style=form,explode=true,name=addDebugOverlay"`
	// Whether to auto adjust quality or not
	AutoAdjustQuality *float64 `queryParam:"style=form,explode=true,name=autoAdjustQuality"`
}

func (s *StartUniversalTranscodeRequest) GetHasMDE() float64 {
	if s == nil {
		return 0.0
	}
	return s.HasMDE
}

func (s *StartUniversalTranscodeRequest) GetPath() string {
	if s == nil {
		return ""
	}
	return s.Path
}

func (s *StartUniversalTranscodeRequest) GetMediaIndex() float64 {
	if s == nil {
		return 0.0
	}
	return s.MediaIndex
}

func (s *StartUniversalTranscodeRequest) GetPartIndex() float64 {
	if s == nil {
		return 0.0
	}
	return s.PartIndex
}

func (s *StartUniversalTranscodeRequest) GetProtocol() string {
	if s == nil {
		return ""
	}
	return s.Protocol
}

func (s *StartUniversalTranscodeRequest) GetFastSeek() *float64 {
	if s == nil {
		return nil
	}
	return s.FastSeek
}

func (s *StartUniversalTranscodeRequest) GetDirectPlay() *float64 {
	if s == nil {
		return nil
	}
	return s.DirectPlay
}

func (s *StartUniversalTranscodeRequest) GetDirectStream() *float64 {
	if s == nil {
		return nil
	}
	return s.DirectStream
}

func (s *StartUniversalTranscodeRequest) GetSubtitleSize() *float64 {
	if s == nil {
		return nil
	}
	return s.SubtitleSize
}

func (s *StartUniversalTranscodeRequest) GetSubtites() *string {
	if s == nil {
		return nil
	}
	return s.Subtites
}

func (s *StartUniversalTranscodeRequest) GetAudioBoost() *float64 {
	if s == nil {
		return nil
	}
	return s.AudioBoost
}

func (s *StartUniversalTranscodeRequest) GetLocation() *string {
	if s == nil {
		return nil
	}
	return s.Location
}

func (s *StartUniversalTranscodeRequest) GetMediaBufferSize() *float64 {
	if s == nil {
		return nil
	}
	return s.MediaBufferSize
}

func (s *StartUniversalTranscodeRequest) GetSession() *string {
	if s == nil {
		return nil
	}
	return s.Session
}

func (s *StartUniversalTranscodeRequest) GetAddDebugOverlay() *float64 {
	if s == nil {
		return nil
	}
	return s.AddDebugOverlay
}

func (s *StartUniversalTranscodeRequest) GetAutoAdjustQuality() *float64 {
	if s == nil {
		return nil
	}
	return s.AutoAdjustQuality
}

type StartUniversalTranscodeResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (s *StartUniversalTranscodeResponse) GetContentType() string {
	if s == nil {
		return ""
	}
	return s.ContentType
}

func (s *StartUniversalTranscodeResponse) GetStatusCode() int {
	if s == nil {
		return 0
	}
	return s.StatusCode
}

func (s *StartUniversalTranscodeResponse) GetRawResponse() *http.Response {
	if s == nil {
		return nil
	}
	return s.RawResponse
}
