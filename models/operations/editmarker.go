// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type EditMarkerGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (e EditMarkerGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EditMarkerGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (e *EditMarkerGlobals) GetAccepts() *components.Accepts {
	if e == nil {
		return nil
	}
	return e.Accepts
}

func (e *EditMarkerGlobals) GetClientIdentifier() *string {
	if e == nil {
		return nil
	}
	return e.ClientIdentifier
}

func (e *EditMarkerGlobals) GetProduct() *string {
	if e == nil {
		return nil
	}
	return e.Product
}

func (e *EditMarkerGlobals) GetVersion() *string {
	if e == nil {
		return nil
	}
	return e.Version
}

func (e *EditMarkerGlobals) GetPlatform() *string {
	if e == nil {
		return nil
	}
	return e.Platform
}

func (e *EditMarkerGlobals) GetPlatformVersion() *string {
	if e == nil {
		return nil
	}
	return e.PlatformVersion
}

func (e *EditMarkerGlobals) GetDevice() *string {
	if e == nil {
		return nil
	}
	return e.Device
}

func (e *EditMarkerGlobals) GetModel() *string {
	if e == nil {
		return nil
	}
	return e.Model
}

func (e *EditMarkerGlobals) GetDeviceVendor() *string {
	if e == nil {
		return nil
	}
	return e.DeviceVendor
}

func (e *EditMarkerGlobals) GetDeviceName() *string {
	if e == nil {
		return nil
	}
	return e.DeviceName
}

func (e *EditMarkerGlobals) GetMarketplace() *string {
	if e == nil {
		return nil
	}
	return e.Marketplace
}

// QueryParamAttributes - The attributes to assign to this marker
type QueryParamAttributes struct {
}

type EditMarkerRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	Ids         string  `pathParam:"style=simple,explode=false,name=ids"`
	// The id of the marker to edit
	Marker string `pathParam:"style=simple,explode=false,name=marker"`
	// The type of marker to edit/create
	Type int64 `queryParam:"style=form,explode=true,name=type"`
	// The start time of the marker
	StartTimeOffset int64 `queryParam:"style=form,explode=true,name=startTimeOffset"`
	// The end time of the marker
	EndTimeOffset *int64 `queryParam:"style=form,explode=true,name=endTimeOffset"`
	// The attributes to assign to this marker
	Attributes *QueryParamAttributes `queryParam:"style=deepObject,explode=true,name=attributes"`
}

func (e EditMarkerRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EditMarkerRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"ids", "marker", "type", "startTimeOffset"}); err != nil {
		return err
	}
	return nil
}

func (e *EditMarkerRequest) GetAccepts() *components.Accepts {
	if e == nil {
		return nil
	}
	return e.Accepts
}

func (e *EditMarkerRequest) GetClientIdentifier() *string {
	if e == nil {
		return nil
	}
	return e.ClientIdentifier
}

func (e *EditMarkerRequest) GetProduct() *string {
	if e == nil {
		return nil
	}
	return e.Product
}

func (e *EditMarkerRequest) GetVersion() *string {
	if e == nil {
		return nil
	}
	return e.Version
}

func (e *EditMarkerRequest) GetPlatform() *string {
	if e == nil {
		return nil
	}
	return e.Platform
}

func (e *EditMarkerRequest) GetPlatformVersion() *string {
	if e == nil {
		return nil
	}
	return e.PlatformVersion
}

func (e *EditMarkerRequest) GetDevice() *string {
	if e == nil {
		return nil
	}
	return e.Device
}

func (e *EditMarkerRequest) GetModel() *string {
	if e == nil {
		return nil
	}
	return e.Model
}

func (e *EditMarkerRequest) GetDeviceVendor() *string {
	if e == nil {
		return nil
	}
	return e.DeviceVendor
}

func (e *EditMarkerRequest) GetDeviceName() *string {
	if e == nil {
		return nil
	}
	return e.DeviceName
}

func (e *EditMarkerRequest) GetMarketplace() *string {
	if e == nil {
		return nil
	}
	return e.Marketplace
}

func (e *EditMarkerRequest) GetIds() string {
	if e == nil {
		return ""
	}
	return e.Ids
}

func (e *EditMarkerRequest) GetMarker() string {
	if e == nil {
		return ""
	}
	return e.Marker
}

func (e *EditMarkerRequest) GetType() int64 {
	if e == nil {
		return 0
	}
	return e.Type
}

func (e *EditMarkerRequest) GetStartTimeOffset() int64 {
	if e == nil {
		return 0
	}
	return e.StartTimeOffset
}

func (e *EditMarkerRequest) GetEndTimeOffset() *int64 {
	if e == nil {
		return nil
	}
	return e.EndTimeOffset
}

func (e *EditMarkerRequest) GetAttributes() *QueryParamAttributes {
	if e == nil {
		return nil
	}
	return e.Attributes
}

type EditMarkerResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	PostResponses200 *components.PostResponses200
}

func (e *EditMarkerResponse) GetContentType() string {
	if e == nil {
		return ""
	}
	return e.ContentType
}

func (e *EditMarkerResponse) GetStatusCode() int {
	if e == nil {
		return 0
	}
	return e.StatusCode
}

func (e *EditMarkerResponse) GetRawResponse() *http.Response {
	if e == nil {
		return nil
	}
	return e.RawResponse
}

func (e *EditMarkerResponse) GetPostResponses200() *components.PostResponses200 {
	if e == nil {
		return nil
	}
	return e.PostResponses200
}
