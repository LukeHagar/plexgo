// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type AddSectionGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (a AddSectionGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddSectionGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AddSectionGlobals) GetAccepts() *components.Accepts {
	if a == nil {
		return nil
	}
	return a.Accepts
}

func (a *AddSectionGlobals) GetClientIdentifier() *string {
	if a == nil {
		return nil
	}
	return a.ClientIdentifier
}

func (a *AddSectionGlobals) GetProduct() *string {
	if a == nil {
		return nil
	}
	return a.Product
}

func (a *AddSectionGlobals) GetVersion() *string {
	if a == nil {
		return nil
	}
	return a.Version
}

func (a *AddSectionGlobals) GetPlatform() *string {
	if a == nil {
		return nil
	}
	return a.Platform
}

func (a *AddSectionGlobals) GetPlatformVersion() *string {
	if a == nil {
		return nil
	}
	return a.PlatformVersion
}

func (a *AddSectionGlobals) GetDevice() *string {
	if a == nil {
		return nil
	}
	return a.Device
}

func (a *AddSectionGlobals) GetModel() *string {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *AddSectionGlobals) GetDeviceVendor() *string {
	if a == nil {
		return nil
	}
	return a.DeviceVendor
}

func (a *AddSectionGlobals) GetDeviceName() *string {
	if a == nil {
		return nil
	}
	return a.DeviceName
}

func (a *AddSectionGlobals) GetMarketplace() *string {
	if a == nil {
		return nil
	}
	return a.Marketplace
}

// QueryParamPrefs - The preferences for this section
type QueryParamPrefs struct {
}

type AddSectionRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The name of the new section
	Name string `queryParam:"style=form,explode=true,name=name"`
	// The type of library section
	Type int64 `queryParam:"style=form,explode=true,name=type"`
	// The scanner this section should use
	Scanner *string `queryParam:"style=form,explode=true,name=scanner"`
	// The agent this section should use for metadata
	Agent string `queryParam:"style=form,explode=true,name=agent"`
	// The agent group id for this section
	MetadataAgentProviderGroupID *string `queryParam:"style=form,explode=true,name=metadataAgentProviderGroupId"`
	// The language of this section
	Language string `queryParam:"style=form,explode=true,name=language"`
	// The locations on disk to add to this section
	Locations []string `queryParam:"style=form,explode=true,name=locations"`
	// The preferences for this section
	Prefs *QueryParamPrefs `queryParam:"style=deepObject,explode=true,name=prefs"`
	// If set, paths are relative to `Media Upload` path
	Relative *components.BoolInt `queryParam:"style=form,explode=true,name=relative"`
	// If set, import media from iTunes.
	ImportFromiTunes *components.BoolInt `queryParam:"style=form,explode=true,name=importFromiTunes"`
}

func (a AddSectionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddSectionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "type", "agent", "language"}); err != nil {
		return err
	}
	return nil
}

func (a *AddSectionRequest) GetAccepts() *components.Accepts {
	if a == nil {
		return nil
	}
	return a.Accepts
}

func (a *AddSectionRequest) GetClientIdentifier() *string {
	if a == nil {
		return nil
	}
	return a.ClientIdentifier
}

func (a *AddSectionRequest) GetProduct() *string {
	if a == nil {
		return nil
	}
	return a.Product
}

func (a *AddSectionRequest) GetVersion() *string {
	if a == nil {
		return nil
	}
	return a.Version
}

func (a *AddSectionRequest) GetPlatform() *string {
	if a == nil {
		return nil
	}
	return a.Platform
}

func (a *AddSectionRequest) GetPlatformVersion() *string {
	if a == nil {
		return nil
	}
	return a.PlatformVersion
}

func (a *AddSectionRequest) GetDevice() *string {
	if a == nil {
		return nil
	}
	return a.Device
}

func (a *AddSectionRequest) GetModel() *string {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *AddSectionRequest) GetDeviceVendor() *string {
	if a == nil {
		return nil
	}
	return a.DeviceVendor
}

func (a *AddSectionRequest) GetDeviceName() *string {
	if a == nil {
		return nil
	}
	return a.DeviceName
}

func (a *AddSectionRequest) GetMarketplace() *string {
	if a == nil {
		return nil
	}
	return a.Marketplace
}

func (a *AddSectionRequest) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AddSectionRequest) GetType() int64 {
	if a == nil {
		return 0
	}
	return a.Type
}

func (a *AddSectionRequest) GetScanner() *string {
	if a == nil {
		return nil
	}
	return a.Scanner
}

func (a *AddSectionRequest) GetAgent() string {
	if a == nil {
		return ""
	}
	return a.Agent
}

func (a *AddSectionRequest) GetMetadataAgentProviderGroupID() *string {
	if a == nil {
		return nil
	}
	return a.MetadataAgentProviderGroupID
}

func (a *AddSectionRequest) GetLanguage() string {
	if a == nil {
		return ""
	}
	return a.Language
}

func (a *AddSectionRequest) GetLocations() []string {
	if a == nil {
		return nil
	}
	return a.Locations
}

func (a *AddSectionRequest) GetPrefs() *QueryParamPrefs {
	if a == nil {
		return nil
	}
	return a.Prefs
}

func (a *AddSectionRequest) GetRelative() *components.BoolInt {
	if a == nil {
		return nil
	}
	return a.Relative
}

func (a *AddSectionRequest) GetImportFromiTunes() *components.BoolInt {
	if a == nil {
		return nil
	}
	return a.ImportFromiTunes
}

type AddSectionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	SlashGetResponses200 *components.SlashGetResponses200
}

func (a *AddSectionResponse) GetContentType() string {
	if a == nil {
		return ""
	}
	return a.ContentType
}

func (a *AddSectionResponse) GetStatusCode() int {
	if a == nil {
		return 0
	}
	return a.StatusCode
}

func (a *AddSectionResponse) GetRawResponse() *http.Response {
	if a == nil {
		return nil
	}
	return a.RawResponse
}

func (a *AddSectionResponse) GetSlashGetResponses200() *components.SlashGetResponses200 {
	if a == nil {
		return nil
	}
	return a.SlashGetResponses200
}
