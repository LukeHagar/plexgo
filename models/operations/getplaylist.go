// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetPlaylistRequest struct {
	// the ID of the playlist
	PlaylistID float64 `pathParam:"style=simple,explode=false,name=playlistID"`
}

func (g *GetPlaylistRequest) GetPlaylistID() float64 {
	if g == nil {
		return 0.0
	}
	return g.PlaylistID
}

type GetPlaylistMetadata struct {
	Content      *string `json:"content,omitempty"`
	RatingKey    *string `json:"ratingKey,omitempty"`
	Key          *string `json:"key,omitempty"`
	GUID         *string `json:"guid,omitempty"`
	Type         *string `json:"type,omitempty"`
	Title        *string `json:"title,omitempty"`
	Summary      *string `json:"summary,omitempty"`
	Smart        *bool   `json:"smart,omitempty"`
	PlaylistType *string `json:"playlistType,omitempty"`
	Composite    *string `json:"composite,omitempty"`
	Icon         *string `json:"icon,omitempty"`
	Duration     *int    `json:"duration,omitempty"`
	LeafCount    *int    `json:"leafCount,omitempty"`
	AddedAt      *int    `json:"addedAt,omitempty"`
	UpdatedAt    *int    `json:"updatedAt,omitempty"`
}

func (g *GetPlaylistMetadata) GetContent() *string {
	if g == nil {
		return nil
	}
	return g.Content
}

func (g *GetPlaylistMetadata) GetRatingKey() *string {
	if g == nil {
		return nil
	}
	return g.RatingKey
}

func (g *GetPlaylistMetadata) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetPlaylistMetadata) GetGUID() *string {
	if g == nil {
		return nil
	}
	return g.GUID
}

func (g *GetPlaylistMetadata) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetPlaylistMetadata) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GetPlaylistMetadata) GetSummary() *string {
	if g == nil {
		return nil
	}
	return g.Summary
}

func (g *GetPlaylistMetadata) GetSmart() *bool {
	if g == nil {
		return nil
	}
	return g.Smart
}

func (g *GetPlaylistMetadata) GetPlaylistType() *string {
	if g == nil {
		return nil
	}
	return g.PlaylistType
}

func (g *GetPlaylistMetadata) GetComposite() *string {
	if g == nil {
		return nil
	}
	return g.Composite
}

func (g *GetPlaylistMetadata) GetIcon() *string {
	if g == nil {
		return nil
	}
	return g.Icon
}

func (g *GetPlaylistMetadata) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetPlaylistMetadata) GetLeafCount() *int {
	if g == nil {
		return nil
	}
	return g.LeafCount
}

func (g *GetPlaylistMetadata) GetAddedAt() *int {
	if g == nil {
		return nil
	}
	return g.AddedAt
}

func (g *GetPlaylistMetadata) GetUpdatedAt() *int {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

type GetPlaylistMediaContainer struct {
	Size     *int                  `json:"size,omitempty"`
	Metadata []GetPlaylistMetadata `json:"Metadata,omitempty"`
}

func (g *GetPlaylistMediaContainer) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetPlaylistMediaContainer) GetMetadata() []GetPlaylistMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

// GetPlaylistResponseBody - The playlist
type GetPlaylistResponseBody struct {
	MediaContainer *GetPlaylistMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetPlaylistResponseBody) GetMediaContainer() *GetPlaylistMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetPlaylistResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The playlist
	Object *GetPlaylistResponseBody
}

func (g *GetPlaylistResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetPlaylistResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetPlaylistResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetPlaylistResponse) GetObject() *GetPlaylistResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
