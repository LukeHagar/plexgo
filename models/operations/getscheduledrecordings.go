// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

// GetScheduledRecordingsMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type GetScheduledRecordingsMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize          *int64                          `json:"totalSize,omitempty"`
	MediaGrabOperation []components.MediaGrabOperation `json:"MediaGrabOperation,omitempty"`
}

func (g *GetScheduledRecordingsMediaContainer) GetIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.Identifier
}

func (g *GetScheduledRecordingsMediaContainer) GetOffset() *int64 {
	if g == nil {
		return nil
	}
	return g.Offset
}

func (g *GetScheduledRecordingsMediaContainer) GetSize() *int64 {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetScheduledRecordingsMediaContainer) GetTotalSize() *int64 {
	if g == nil {
		return nil
	}
	return g.TotalSize
}

func (g *GetScheduledRecordingsMediaContainer) GetMediaGrabOperation() []components.MediaGrabOperation {
	if g == nil {
		return nil
	}
	return g.MediaGrabOperation
}

// GetScheduledRecordingsResponseBody - OK
type GetScheduledRecordingsResponseBody struct {
	MediaContainer *GetScheduledRecordingsMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetScheduledRecordingsResponseBody) GetMediaContainer() *GetScheduledRecordingsMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetScheduledRecordingsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object  *GetScheduledRecordingsResponseBody
	Headers map[string][]string
}

func (g *GetScheduledRecordingsResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetScheduledRecordingsResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetScheduledRecordingsResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetScheduledRecordingsResponse) GetObject() *GetScheduledRecordingsResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}

func (g *GetScheduledRecordingsResponse) GetHeaders() map[string][]string {
	if g == nil {
		return map[string][]string{}
	}
	return g.Headers
}
