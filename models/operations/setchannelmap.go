// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type SetChannelmapGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (s SetChannelmapGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SetChannelmapGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SetChannelmapGlobals) GetAccepts() *components.Accepts {
	if s == nil {
		return nil
	}
	return s.Accepts
}

func (s *SetChannelmapGlobals) GetClientIdentifier() *string {
	if s == nil {
		return nil
	}
	return s.ClientIdentifier
}

func (s *SetChannelmapGlobals) GetProduct() *string {
	if s == nil {
		return nil
	}
	return s.Product
}

func (s *SetChannelmapGlobals) GetVersion() *string {
	if s == nil {
		return nil
	}
	return s.Version
}

func (s *SetChannelmapGlobals) GetPlatform() *string {
	if s == nil {
		return nil
	}
	return s.Platform
}

func (s *SetChannelmapGlobals) GetPlatformVersion() *string {
	if s == nil {
		return nil
	}
	return s.PlatformVersion
}

func (s *SetChannelmapGlobals) GetDevice() *string {
	if s == nil {
		return nil
	}
	return s.Device
}

func (s *SetChannelmapGlobals) GetModel() *string {
	if s == nil {
		return nil
	}
	return s.Model
}

func (s *SetChannelmapGlobals) GetDeviceVendor() *string {
	if s == nil {
		return nil
	}
	return s.DeviceVendor
}

func (s *SetChannelmapGlobals) GetDeviceName() *string {
	if s == nil {
		return nil
	}
	return s.DeviceName
}

func (s *SetChannelmapGlobals) GetMarketplace() *string {
	if s == nil {
		return nil
	}
	return s.Marketplace
}

// ChannelMapping - The mapping of changes, passed as a map of device channel to lineup VCN.
type ChannelMapping struct {
}

// ChannelMappingByKey - The mapping of changes, passed as a map of device channel to lineup key.
type ChannelMappingByKey struct {
}

type SetChannelmapRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The ID of the device.
	DeviceID int64 `pathParam:"style=simple,explode=false,name=deviceId"`
	// The mapping of changes, passed as a map of device channel to lineup VCN.
	ChannelMapping *ChannelMapping `queryParam:"style=deepObject,explode=true,name=channelMapping"`
	// The mapping of changes, passed as a map of device channel to lineup key.
	ChannelMappingByKey *ChannelMappingByKey `queryParam:"style=deepObject,explode=true,name=channelMappingByKey"`
	// The channels which are enabled.
	ChannelsEnabled []string `queryParam:"style=form,explode=true,name=channelsEnabled"`
}

func (s SetChannelmapRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SetChannelmapRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"deviceId"}); err != nil {
		return err
	}
	return nil
}

func (s *SetChannelmapRequest) GetAccepts() *components.Accepts {
	if s == nil {
		return nil
	}
	return s.Accepts
}

func (s *SetChannelmapRequest) GetClientIdentifier() *string {
	if s == nil {
		return nil
	}
	return s.ClientIdentifier
}

func (s *SetChannelmapRequest) GetProduct() *string {
	if s == nil {
		return nil
	}
	return s.Product
}

func (s *SetChannelmapRequest) GetVersion() *string {
	if s == nil {
		return nil
	}
	return s.Version
}

func (s *SetChannelmapRequest) GetPlatform() *string {
	if s == nil {
		return nil
	}
	return s.Platform
}

func (s *SetChannelmapRequest) GetPlatformVersion() *string {
	if s == nil {
		return nil
	}
	return s.PlatformVersion
}

func (s *SetChannelmapRequest) GetDevice() *string {
	if s == nil {
		return nil
	}
	return s.Device
}

func (s *SetChannelmapRequest) GetModel() *string {
	if s == nil {
		return nil
	}
	return s.Model
}

func (s *SetChannelmapRequest) GetDeviceVendor() *string {
	if s == nil {
		return nil
	}
	return s.DeviceVendor
}

func (s *SetChannelmapRequest) GetDeviceName() *string {
	if s == nil {
		return nil
	}
	return s.DeviceName
}

func (s *SetChannelmapRequest) GetMarketplace() *string {
	if s == nil {
		return nil
	}
	return s.Marketplace
}

func (s *SetChannelmapRequest) GetDeviceID() int64 {
	if s == nil {
		return 0
	}
	return s.DeviceID
}

func (s *SetChannelmapRequest) GetChannelMapping() *ChannelMapping {
	if s == nil {
		return nil
	}
	return s.ChannelMapping
}

func (s *SetChannelmapRequest) GetChannelMappingByKey() *ChannelMappingByKey {
	if s == nil {
		return nil
	}
	return s.ChannelMappingByKey
}

func (s *SetChannelmapRequest) GetChannelsEnabled() []string {
	if s == nil {
		return nil
	}
	return s.ChannelsEnabled
}

type SetChannelmapResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	MediaContainerWithDevice *components.MediaContainerWithDevice
}

func (s *SetChannelmapResponse) GetContentType() string {
	if s == nil {
		return ""
	}
	return s.ContentType
}

func (s *SetChannelmapResponse) GetStatusCode() int {
	if s == nil {
		return 0
	}
	return s.StatusCode
}

func (s *SetChannelmapResponse) GetRawResponse() *http.Response {
	if s == nil {
		return nil
	}
	return s.RawResponse
}

func (s *SetChannelmapResponse) GetMediaContainerWithDevice() *components.MediaContainerWithDevice {
	if s == nil {
		return nil
	}
	return s.MediaContainerWithDevice
}
