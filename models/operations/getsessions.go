// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetSessionsStream struct {
	AlbumGain            *string `json:"albumGain,omitempty"`
	AlbumPeak            *string `json:"albumPeak,omitempty"`
	AlbumRange           *string `json:"albumRange,omitempty"`
	AudioChannelLayout   *string `json:"audioChannelLayout,omitempty"`
	BitDepth             *int    `json:"bitDepth,omitempty"`
	Bitrate              *int    `json:"bitrate,omitempty"`
	Channels             *int    `json:"channels,omitempty"`
	Codec                *string `json:"codec,omitempty"`
	DisplayTitle         *string `json:"displayTitle,omitempty"`
	ExtendedDisplayTitle *string `json:"extendedDisplayTitle,omitempty"`
	Gain                 *string `json:"gain,omitempty"`
	ID                   *string `json:"id,omitempty"`
	Index                *int    `json:"index,omitempty"`
	Loudness             *string `json:"loudness,omitempty"`
	Lra                  *string `json:"lra,omitempty"`
	Peak                 *string `json:"peak,omitempty"`
	SamplingRate         *int    `json:"samplingRate,omitempty"`
	Selected             *bool   `json:"selected,omitempty"`
	StreamType           *int    `json:"streamType,omitempty"`
	Location             *string `json:"location,omitempty"`
}

func (g *GetSessionsStream) GetAlbumGain() *string {
	if g == nil {
		return nil
	}
	return g.AlbumGain
}

func (g *GetSessionsStream) GetAlbumPeak() *string {
	if g == nil {
		return nil
	}
	return g.AlbumPeak
}

func (g *GetSessionsStream) GetAlbumRange() *string {
	if g == nil {
		return nil
	}
	return g.AlbumRange
}

func (g *GetSessionsStream) GetAudioChannelLayout() *string {
	if g == nil {
		return nil
	}
	return g.AudioChannelLayout
}

func (g *GetSessionsStream) GetBitDepth() *int {
	if g == nil {
		return nil
	}
	return g.BitDepth
}

func (g *GetSessionsStream) GetBitrate() *int {
	if g == nil {
		return nil
	}
	return g.Bitrate
}

func (g *GetSessionsStream) GetChannels() *int {
	if g == nil {
		return nil
	}
	return g.Channels
}

func (g *GetSessionsStream) GetCodec() *string {
	if g == nil {
		return nil
	}
	return g.Codec
}

func (g *GetSessionsStream) GetDisplayTitle() *string {
	if g == nil {
		return nil
	}
	return g.DisplayTitle
}

func (g *GetSessionsStream) GetExtendedDisplayTitle() *string {
	if g == nil {
		return nil
	}
	return g.ExtendedDisplayTitle
}

func (g *GetSessionsStream) GetGain() *string {
	if g == nil {
		return nil
	}
	return g.Gain
}

func (g *GetSessionsStream) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetSessionsStream) GetIndex() *int {
	if g == nil {
		return nil
	}
	return g.Index
}

func (g *GetSessionsStream) GetLoudness() *string {
	if g == nil {
		return nil
	}
	return g.Loudness
}

func (g *GetSessionsStream) GetLra() *string {
	if g == nil {
		return nil
	}
	return g.Lra
}

func (g *GetSessionsStream) GetPeak() *string {
	if g == nil {
		return nil
	}
	return g.Peak
}

func (g *GetSessionsStream) GetSamplingRate() *int {
	if g == nil {
		return nil
	}
	return g.SamplingRate
}

func (g *GetSessionsStream) GetSelected() *bool {
	if g == nil {
		return nil
	}
	return g.Selected
}

func (g *GetSessionsStream) GetStreamType() *int {
	if g == nil {
		return nil
	}
	return g.StreamType
}

func (g *GetSessionsStream) GetLocation() *string {
	if g == nil {
		return nil
	}
	return g.Location
}

type GetSessionsPart struct {
	Container    *string             `json:"container,omitempty"`
	Duration     *int                `json:"duration,omitempty"`
	File         *string             `json:"file,omitempty"`
	HasThumbnail *string             `json:"hasThumbnail,omitempty"`
	ID           *string             `json:"id,omitempty"`
	Key          *string             `json:"key,omitempty"`
	Size         *int                `json:"size,omitempty"`
	Decision     *string             `json:"decision,omitempty"`
	Selected     *bool               `json:"selected,omitempty"`
	Stream       []GetSessionsStream `json:"Stream,omitempty"`
}

func (g *GetSessionsPart) GetContainer() *string {
	if g == nil {
		return nil
	}
	return g.Container
}

func (g *GetSessionsPart) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetSessionsPart) GetFile() *string {
	if g == nil {
		return nil
	}
	return g.File
}

func (g *GetSessionsPart) GetHasThumbnail() *string {
	if g == nil {
		return nil
	}
	return g.HasThumbnail
}

func (g *GetSessionsPart) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetSessionsPart) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetSessionsPart) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetSessionsPart) GetDecision() *string {
	if g == nil {
		return nil
	}
	return g.Decision
}

func (g *GetSessionsPart) GetSelected() *bool {
	if g == nil {
		return nil
	}
	return g.Selected
}

func (g *GetSessionsPart) GetStream() []GetSessionsStream {
	if g == nil {
		return nil
	}
	return g.Stream
}

type GetSessionsMedia struct {
	AudioChannels *int              `json:"audioChannels,omitempty"`
	AudioCodec    *string           `json:"audioCodec,omitempty"`
	Bitrate       *int              `json:"bitrate,omitempty"`
	Container     *string           `json:"container,omitempty"`
	Duration      *int              `json:"duration,omitempty"`
	ID            *string           `json:"id,omitempty"`
	Selected      *bool             `json:"selected,omitempty"`
	Part          []GetSessionsPart `json:"Part,omitempty"`
}

func (g *GetSessionsMedia) GetAudioChannels() *int {
	if g == nil {
		return nil
	}
	return g.AudioChannels
}

func (g *GetSessionsMedia) GetAudioCodec() *string {
	if g == nil {
		return nil
	}
	return g.AudioCodec
}

func (g *GetSessionsMedia) GetBitrate() *int {
	if g == nil {
		return nil
	}
	return g.Bitrate
}

func (g *GetSessionsMedia) GetContainer() *string {
	if g == nil {
		return nil
	}
	return g.Container
}

func (g *GetSessionsMedia) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetSessionsMedia) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetSessionsMedia) GetSelected() *bool {
	if g == nil {
		return nil
	}
	return g.Selected
}

func (g *GetSessionsMedia) GetPart() []GetSessionsPart {
	if g == nil {
		return nil
	}
	return g.Part
}

type GetSessionsUser struct {
	ID    *string `json:"id,omitempty"`
	Thumb *string `json:"thumb,omitempty"`
	Title *string `json:"title,omitempty"`
}

func (g *GetSessionsUser) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetSessionsUser) GetThumb() *string {
	if g == nil {
		return nil
	}
	return g.Thumb
}

func (g *GetSessionsUser) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

type Player struct {
	Address             *string `json:"address,omitempty"`
	MachineIdentifier   *string `json:"machineIdentifier,omitempty"`
	Model               *string `json:"model,omitempty"`
	Platform            *string `json:"platform,omitempty"`
	PlatformVersion     *string `json:"platformVersion,omitempty"`
	Product             *string `json:"product,omitempty"`
	Profile             *string `json:"profile,omitempty"`
	RemotePublicAddress *string `json:"remotePublicAddress,omitempty"`
	State               *string `json:"state,omitempty"`
	Title               *string `json:"title,omitempty"`
	Version             *string `json:"version,omitempty"`
	Local               *bool   `json:"local,omitempty"`
	Relayed             *bool   `json:"relayed,omitempty"`
	Secure              *bool   `json:"secure,omitempty"`
	UserID              *int    `json:"userID,omitempty"`
}

func (p *Player) GetAddress() *string {
	if p == nil {
		return nil
	}
	return p.Address
}

func (p *Player) GetMachineIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.MachineIdentifier
}

func (p *Player) GetModel() *string {
	if p == nil {
		return nil
	}
	return p.Model
}

func (p *Player) GetPlatform() *string {
	if p == nil {
		return nil
	}
	return p.Platform
}

func (p *Player) GetPlatformVersion() *string {
	if p == nil {
		return nil
	}
	return p.PlatformVersion
}

func (p *Player) GetProduct() *string {
	if p == nil {
		return nil
	}
	return p.Product
}

func (p *Player) GetProfile() *string {
	if p == nil {
		return nil
	}
	return p.Profile
}

func (p *Player) GetRemotePublicAddress() *string {
	if p == nil {
		return nil
	}
	return p.RemotePublicAddress
}

func (p *Player) GetState() *string {
	if p == nil {
		return nil
	}
	return p.State
}

func (p *Player) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *Player) GetVersion() *string {
	if p == nil {
		return nil
	}
	return p.Version
}

func (p *Player) GetLocal() *bool {
	if p == nil {
		return nil
	}
	return p.Local
}

func (p *Player) GetRelayed() *bool {
	if p == nil {
		return nil
	}
	return p.Relayed
}

func (p *Player) GetSecure() *bool {
	if p == nil {
		return nil
	}
	return p.Secure
}

func (p *Player) GetUserID() *int {
	if p == nil {
		return nil
	}
	return p.UserID
}

type Session struct {
	ID        *string `json:"id,omitempty"`
	Bandwidth *int    `json:"bandwidth,omitempty"`
	Location  *string `json:"location,omitempty"`
}

func (s *Session) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *Session) GetBandwidth() *int {
	if s == nil {
		return nil
	}
	return s.Bandwidth
}

func (s *Session) GetLocation() *string {
	if s == nil {
		return nil
	}
	return s.Location
}

type GetSessionsMetadata struct {
	AddedAt              *int    `json:"addedAt,omitempty"`
	Art                  *string `json:"art,omitempty"`
	Duration             *int    `json:"duration,omitempty"`
	GrandparentArt       *string `json:"grandparentArt,omitempty"`
	GrandparentGUID      *string `json:"grandparentGuid,omitempty"`
	GrandparentKey       *string `json:"grandparentKey,omitempty"`
	GrandparentRatingKey *string `json:"grandparentRatingKey,omitempty"`
	GrandparentThumb     *string `json:"grandparentThumb,omitempty"`
	GrandparentTitle     *string `json:"grandparentTitle,omitempty"`
	GUID                 *string `json:"guid,omitempty"`
	Index                *int    `json:"index,omitempty"`
	Key                  *string `json:"key,omitempty"`
	LibrarySectionID     *string `json:"librarySectionID,omitempty"`
	LibrarySectionKey    *string `json:"librarySectionKey,omitempty"`
	LibrarySectionTitle  *string `json:"librarySectionTitle,omitempty"`
	MusicAnalysisVersion *string `json:"musicAnalysisVersion,omitempty"`
	// The original untranslated name of the media item when non-english, or the track artist if an audio Item has an album artist
	OriginalTitle   *string            `json:"originalTitle,omitempty"`
	ParentGUID      *string            `json:"parentGuid,omitempty"`
	ParentIndex     *int               `json:"parentIndex,omitempty"`
	ParentKey       *string            `json:"parentKey,omitempty"`
	ParentRatingKey *string            `json:"parentRatingKey,omitempty"`
	ParentStudio    *string            `json:"parentStudio,omitempty"`
	ParentThumb     *string            `json:"parentThumb,omitempty"`
	ParentTitle     *string            `json:"parentTitle,omitempty"`
	ParentYear      *int               `json:"parentYear,omitempty"`
	RatingCount     *int               `json:"ratingCount,omitempty"`
	RatingKey       *string            `json:"ratingKey,omitempty"`
	SessionKey      *string            `json:"sessionKey,omitempty"`
	Thumb           *string            `json:"thumb,omitempty"`
	Title           *string            `json:"title,omitempty"`
	TitleSort       *string            `json:"titleSort,omitempty"`
	Type            *string            `json:"type,omitempty"`
	UpdatedAt       *int               `json:"updatedAt,omitempty"`
	ViewOffset      *int               `json:"viewOffset,omitempty"`
	Media           []GetSessionsMedia `json:"Media,omitempty"`
	User            *GetSessionsUser   `json:"User,omitempty"`
	Player          *Player            `json:"Player,omitempty"`
	Session         *Session           `json:"Session,omitempty"`
}

func (g *GetSessionsMetadata) GetAddedAt() *int {
	if g == nil {
		return nil
	}
	return g.AddedAt
}

func (g *GetSessionsMetadata) GetArt() *string {
	if g == nil {
		return nil
	}
	return g.Art
}

func (g *GetSessionsMetadata) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetSessionsMetadata) GetGrandparentArt() *string {
	if g == nil {
		return nil
	}
	return g.GrandparentArt
}

func (g *GetSessionsMetadata) GetGrandparentGUID() *string {
	if g == nil {
		return nil
	}
	return g.GrandparentGUID
}

func (g *GetSessionsMetadata) GetGrandparentKey() *string {
	if g == nil {
		return nil
	}
	return g.GrandparentKey
}

func (g *GetSessionsMetadata) GetGrandparentRatingKey() *string {
	if g == nil {
		return nil
	}
	return g.GrandparentRatingKey
}

func (g *GetSessionsMetadata) GetGrandparentThumb() *string {
	if g == nil {
		return nil
	}
	return g.GrandparentThumb
}

func (g *GetSessionsMetadata) GetGrandparentTitle() *string {
	if g == nil {
		return nil
	}
	return g.GrandparentTitle
}

func (g *GetSessionsMetadata) GetGUID() *string {
	if g == nil {
		return nil
	}
	return g.GUID
}

func (g *GetSessionsMetadata) GetIndex() *int {
	if g == nil {
		return nil
	}
	return g.Index
}

func (g *GetSessionsMetadata) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetSessionsMetadata) GetLibrarySectionID() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionID
}

func (g *GetSessionsMetadata) GetLibrarySectionKey() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionKey
}

func (g *GetSessionsMetadata) GetLibrarySectionTitle() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionTitle
}

func (g *GetSessionsMetadata) GetMusicAnalysisVersion() *string {
	if g == nil {
		return nil
	}
	return g.MusicAnalysisVersion
}

func (g *GetSessionsMetadata) GetOriginalTitle() *string {
	if g == nil {
		return nil
	}
	return g.OriginalTitle
}

func (g *GetSessionsMetadata) GetParentGUID() *string {
	if g == nil {
		return nil
	}
	return g.ParentGUID
}

func (g *GetSessionsMetadata) GetParentIndex() *int {
	if g == nil {
		return nil
	}
	return g.ParentIndex
}

func (g *GetSessionsMetadata) GetParentKey() *string {
	if g == nil {
		return nil
	}
	return g.ParentKey
}

func (g *GetSessionsMetadata) GetParentRatingKey() *string {
	if g == nil {
		return nil
	}
	return g.ParentRatingKey
}

func (g *GetSessionsMetadata) GetParentStudio() *string {
	if g == nil {
		return nil
	}
	return g.ParentStudio
}

func (g *GetSessionsMetadata) GetParentThumb() *string {
	if g == nil {
		return nil
	}
	return g.ParentThumb
}

func (g *GetSessionsMetadata) GetParentTitle() *string {
	if g == nil {
		return nil
	}
	return g.ParentTitle
}

func (g *GetSessionsMetadata) GetParentYear() *int {
	if g == nil {
		return nil
	}
	return g.ParentYear
}

func (g *GetSessionsMetadata) GetRatingCount() *int {
	if g == nil {
		return nil
	}
	return g.RatingCount
}

func (g *GetSessionsMetadata) GetRatingKey() *string {
	if g == nil {
		return nil
	}
	return g.RatingKey
}

func (g *GetSessionsMetadata) GetSessionKey() *string {
	if g == nil {
		return nil
	}
	return g.SessionKey
}

func (g *GetSessionsMetadata) GetThumb() *string {
	if g == nil {
		return nil
	}
	return g.Thumb
}

func (g *GetSessionsMetadata) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GetSessionsMetadata) GetTitleSort() *string {
	if g == nil {
		return nil
	}
	return g.TitleSort
}

func (g *GetSessionsMetadata) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetSessionsMetadata) GetUpdatedAt() *int {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetSessionsMetadata) GetViewOffset() *int {
	if g == nil {
		return nil
	}
	return g.ViewOffset
}

func (g *GetSessionsMetadata) GetMedia() []GetSessionsMedia {
	if g == nil {
		return nil
	}
	return g.Media
}

func (g *GetSessionsMetadata) GetUser() *GetSessionsUser {
	if g == nil {
		return nil
	}
	return g.User
}

func (g *GetSessionsMetadata) GetPlayer() *Player {
	if g == nil {
		return nil
	}
	return g.Player
}

func (g *GetSessionsMetadata) GetSession() *Session {
	if g == nil {
		return nil
	}
	return g.Session
}

type GetSessionsMediaContainer struct {
	Size     *int                  `json:"size,omitempty"`
	Metadata []GetSessionsMetadata `json:"Metadata,omitempty"`
}

func (g *GetSessionsMediaContainer) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetSessionsMediaContainer) GetMetadata() []GetSessionsMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

// GetSessionsResponseBody - List of Active Plex Sessions
type GetSessionsResponseBody struct {
	MediaContainer *GetSessionsMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetSessionsResponseBody) GetMediaContainer() *GetSessionsMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetSessionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// List of Active Plex Sessions
	Object *GetSessionsResponseBody
}

func (g *GetSessionsResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetSessionsResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetSessionsResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetSessionsResponse) GetObject() *GetSessionsResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
