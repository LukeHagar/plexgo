// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/types"
	"net/http"
)

// QueryParamOnlyTransient - Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
type QueryParamOnlyTransient int64

const (
	QueryParamOnlyTransientZero QueryParamOnlyTransient = 0
	QueryParamOnlyTransientOne  QueryParamOnlyTransient = 1
)

func (e QueryParamOnlyTransient) ToPointer() *QueryParamOnlyTransient {
	return &e
}
func (e *QueryParamOnlyTransient) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = QueryParamOnlyTransient(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamOnlyTransient: %v", v)
	}
}

type GetLibraryHubsRequest struct {
	// the Id of the library to query
	SectionID float64 `pathParam:"style=simple,explode=false,name=sectionId"`
	// The number of items to return with each hub.
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
	// Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
	OnlyTransient *QueryParamOnlyTransient `queryParam:"style=form,explode=true,name=onlyTransient"`
}

func (g *GetLibraryHubsRequest) GetSectionID() float64 {
	if g == nil {
		return 0.0
	}
	return g.SectionID
}

func (g *GetLibraryHubsRequest) GetCount() *float64 {
	if g == nil {
		return nil
	}
	return g.Count
}

func (g *GetLibraryHubsRequest) GetOnlyTransient() *QueryParamOnlyTransient {
	if g == nil {
		return nil
	}
	return g.OnlyTransient
}

type GetLibraryHubsPart struct {
	ID                    *int    `json:"id,omitempty"`
	Key                   *string `json:"key,omitempty"`
	Duration              *int    `json:"duration,omitempty"`
	File                  *string `json:"file,omitempty"`
	Size                  *int    `json:"size,omitempty"`
	AudioProfile          *string `json:"audioProfile,omitempty"`
	Container             *string `json:"container,omitempty"`
	Has64bitOffsets       *bool   `json:"has64bitOffsets,omitempty"`
	OptimizedForStreaming *bool   `json:"optimizedForStreaming,omitempty"`
	VideoProfile          *string `json:"videoProfile,omitempty"`
}

func (g *GetLibraryHubsPart) GetID() *int {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetLibraryHubsPart) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetLibraryHubsPart) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetLibraryHubsPart) GetFile() *string {
	if g == nil {
		return nil
	}
	return g.File
}

func (g *GetLibraryHubsPart) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetLibraryHubsPart) GetAudioProfile() *string {
	if g == nil {
		return nil
	}
	return g.AudioProfile
}

func (g *GetLibraryHubsPart) GetContainer() *string {
	if g == nil {
		return nil
	}
	return g.Container
}

func (g *GetLibraryHubsPart) GetHas64bitOffsets() *bool {
	if g == nil {
		return nil
	}
	return g.Has64bitOffsets
}

func (g *GetLibraryHubsPart) GetOptimizedForStreaming() *bool {
	if g == nil {
		return nil
	}
	return g.OptimizedForStreaming
}

func (g *GetLibraryHubsPart) GetVideoProfile() *string {
	if g == nil {
		return nil
	}
	return g.VideoProfile
}

type GetLibraryHubsMedia struct {
	ID                    *int                 `json:"id,omitempty"`
	Duration              *int                 `json:"duration,omitempty"`
	Bitrate               *int                 `json:"bitrate,omitempty"`
	Width                 *int                 `json:"width,omitempty"`
	Height                *int                 `json:"height,omitempty"`
	AspectRatio           *float64             `json:"aspectRatio,omitempty"`
	AudioChannels         *int                 `json:"audioChannels,omitempty"`
	AudioCodec            *string              `json:"audioCodec,omitempty"`
	VideoCodec            *string              `json:"videoCodec,omitempty"`
	VideoResolution       *string              `json:"videoResolution,omitempty"`
	Container             *string              `json:"container,omitempty"`
	VideoFrameRate        *string              `json:"videoFrameRate,omitempty"`
	OptimizedForStreaming *int                 `json:"optimizedForStreaming,omitempty"`
	AudioProfile          *string              `json:"audioProfile,omitempty"`
	Has64bitOffsets       *bool                `json:"has64bitOffsets,omitempty"`
	VideoProfile          *string              `json:"videoProfile,omitempty"`
	Part                  []GetLibraryHubsPart `json:"Part,omitempty"`
}

func (g *GetLibraryHubsMedia) GetID() *int {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GetLibraryHubsMedia) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetLibraryHubsMedia) GetBitrate() *int {
	if g == nil {
		return nil
	}
	return g.Bitrate
}

func (g *GetLibraryHubsMedia) GetWidth() *int {
	if g == nil {
		return nil
	}
	return g.Width
}

func (g *GetLibraryHubsMedia) GetHeight() *int {
	if g == nil {
		return nil
	}
	return g.Height
}

func (g *GetLibraryHubsMedia) GetAspectRatio() *float64 {
	if g == nil {
		return nil
	}
	return g.AspectRatio
}

func (g *GetLibraryHubsMedia) GetAudioChannels() *int {
	if g == nil {
		return nil
	}
	return g.AudioChannels
}

func (g *GetLibraryHubsMedia) GetAudioCodec() *string {
	if g == nil {
		return nil
	}
	return g.AudioCodec
}

func (g *GetLibraryHubsMedia) GetVideoCodec() *string {
	if g == nil {
		return nil
	}
	return g.VideoCodec
}

func (g *GetLibraryHubsMedia) GetVideoResolution() *string {
	if g == nil {
		return nil
	}
	return g.VideoResolution
}

func (g *GetLibraryHubsMedia) GetContainer() *string {
	if g == nil {
		return nil
	}
	return g.Container
}

func (g *GetLibraryHubsMedia) GetVideoFrameRate() *string {
	if g == nil {
		return nil
	}
	return g.VideoFrameRate
}

func (g *GetLibraryHubsMedia) GetOptimizedForStreaming() *int {
	if g == nil {
		return nil
	}
	return g.OptimizedForStreaming
}

func (g *GetLibraryHubsMedia) GetAudioProfile() *string {
	if g == nil {
		return nil
	}
	return g.AudioProfile
}

func (g *GetLibraryHubsMedia) GetHas64bitOffsets() *bool {
	if g == nil {
		return nil
	}
	return g.Has64bitOffsets
}

func (g *GetLibraryHubsMedia) GetVideoProfile() *string {
	if g == nil {
		return nil
	}
	return g.VideoProfile
}

func (g *GetLibraryHubsMedia) GetPart() []GetLibraryHubsPart {
	if g == nil {
		return nil
	}
	return g.Part
}

type GetLibraryHubsGenre struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetLibraryHubsGenre) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetLibraryHubsCountry struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetLibraryHubsCountry) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetLibraryHubsDirector struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetLibraryHubsDirector) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetLibraryHubsRole struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetLibraryHubsRole) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetLibraryHubsWriter struct {
	Tag *string `json:"tag,omitempty"`
}

func (g *GetLibraryHubsWriter) GetTag() *string {
	if g == nil {
		return nil
	}
	return g.Tag
}

type GetLibraryHubsMetadata struct {
	RatingKey             *string                  `json:"ratingKey,omitempty"`
	Key                   *string                  `json:"key,omitempty"`
	GUID                  *string                  `json:"guid,omitempty"`
	Studio                *string                  `json:"studio,omitempty"`
	Type                  *string                  `json:"type,omitempty"`
	Title                 *string                  `json:"title,omitempty"`
	LibrarySectionTitle   *string                  `json:"librarySectionTitle,omitempty"`
	LibrarySectionID      *int                     `json:"librarySectionID,omitempty"`
	LibrarySectionKey     *string                  `json:"librarySectionKey,omitempty"`
	ContentRating         *string                  `json:"contentRating,omitempty"`
	Summary               *string                  `json:"summary,omitempty"`
	Rating                *float64                 `json:"rating,omitempty"`
	AudienceRating        *float64                 `json:"audienceRating,omitempty"`
	ViewCount             *int                     `json:"viewCount,omitempty"`
	LastViewedAt          *int                     `json:"lastViewedAt,omitempty"`
	Year                  *int                     `json:"year,omitempty"`
	Tagline               *string                  `json:"tagline,omitempty"`
	Thumb                 *string                  `json:"thumb,omitempty"`
	Art                   *string                  `json:"art,omitempty"`
	Duration              *int                     `json:"duration,omitempty"`
	OriginallyAvailableAt *types.Date              `json:"originallyAvailableAt,omitempty"`
	AddedAt               *int                     `json:"addedAt,omitempty"`
	UpdatedAt             *int                     `json:"updatedAt,omitempty"`
	AudienceRatingImage   *string                  `json:"audienceRatingImage,omitempty"`
	PrimaryExtraKey       *string                  `json:"primaryExtraKey,omitempty"`
	RatingImage           *string                  `json:"ratingImage,omitempty"`
	Media                 []GetLibraryHubsMedia    `json:"Media,omitempty"`
	Genre                 []GetLibraryHubsGenre    `json:"Genre,omitempty"`
	Country               []GetLibraryHubsCountry  `json:"Country,omitempty"`
	Director              []GetLibraryHubsDirector `json:"Director,omitempty"`
	Role                  []GetLibraryHubsRole     `json:"Role,omitempty"`
	Writer                []GetLibraryHubsWriter   `json:"Writer,omitempty"`
	SkipCount             *int                     `json:"skipCount,omitempty"`
	ChapterSource         *string                  `json:"chapterSource,omitempty"`
}

func (g GetLibraryHubsMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetLibraryHubsMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetLibraryHubsMetadata) GetRatingKey() *string {
	if g == nil {
		return nil
	}
	return g.RatingKey
}

func (g *GetLibraryHubsMetadata) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetLibraryHubsMetadata) GetGUID() *string {
	if g == nil {
		return nil
	}
	return g.GUID
}

func (g *GetLibraryHubsMetadata) GetStudio() *string {
	if g == nil {
		return nil
	}
	return g.Studio
}

func (g *GetLibraryHubsMetadata) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetLibraryHubsMetadata) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GetLibraryHubsMetadata) GetLibrarySectionTitle() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionTitle
}

func (g *GetLibraryHubsMetadata) GetLibrarySectionID() *int {
	if g == nil {
		return nil
	}
	return g.LibrarySectionID
}

func (g *GetLibraryHubsMetadata) GetLibrarySectionKey() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionKey
}

func (g *GetLibraryHubsMetadata) GetContentRating() *string {
	if g == nil {
		return nil
	}
	return g.ContentRating
}

func (g *GetLibraryHubsMetadata) GetSummary() *string {
	if g == nil {
		return nil
	}
	return g.Summary
}

func (g *GetLibraryHubsMetadata) GetRating() *float64 {
	if g == nil {
		return nil
	}
	return g.Rating
}

func (g *GetLibraryHubsMetadata) GetAudienceRating() *float64 {
	if g == nil {
		return nil
	}
	return g.AudienceRating
}

func (g *GetLibraryHubsMetadata) GetViewCount() *int {
	if g == nil {
		return nil
	}
	return g.ViewCount
}

func (g *GetLibraryHubsMetadata) GetLastViewedAt() *int {
	if g == nil {
		return nil
	}
	return g.LastViewedAt
}

func (g *GetLibraryHubsMetadata) GetYear() *int {
	if g == nil {
		return nil
	}
	return g.Year
}

func (g *GetLibraryHubsMetadata) GetTagline() *string {
	if g == nil {
		return nil
	}
	return g.Tagline
}

func (g *GetLibraryHubsMetadata) GetThumb() *string {
	if g == nil {
		return nil
	}
	return g.Thumb
}

func (g *GetLibraryHubsMetadata) GetArt() *string {
	if g == nil {
		return nil
	}
	return g.Art
}

func (g *GetLibraryHubsMetadata) GetDuration() *int {
	if g == nil {
		return nil
	}
	return g.Duration
}

func (g *GetLibraryHubsMetadata) GetOriginallyAvailableAt() *types.Date {
	if g == nil {
		return nil
	}
	return g.OriginallyAvailableAt
}

func (g *GetLibraryHubsMetadata) GetAddedAt() *int {
	if g == nil {
		return nil
	}
	return g.AddedAt
}

func (g *GetLibraryHubsMetadata) GetUpdatedAt() *int {
	if g == nil {
		return nil
	}
	return g.UpdatedAt
}

func (g *GetLibraryHubsMetadata) GetAudienceRatingImage() *string {
	if g == nil {
		return nil
	}
	return g.AudienceRatingImage
}

func (g *GetLibraryHubsMetadata) GetPrimaryExtraKey() *string {
	if g == nil {
		return nil
	}
	return g.PrimaryExtraKey
}

func (g *GetLibraryHubsMetadata) GetRatingImage() *string {
	if g == nil {
		return nil
	}
	return g.RatingImage
}

func (g *GetLibraryHubsMetadata) GetMedia() []GetLibraryHubsMedia {
	if g == nil {
		return nil
	}
	return g.Media
}

func (g *GetLibraryHubsMetadata) GetGenre() []GetLibraryHubsGenre {
	if g == nil {
		return nil
	}
	return g.Genre
}

func (g *GetLibraryHubsMetadata) GetCountry() []GetLibraryHubsCountry {
	if g == nil {
		return nil
	}
	return g.Country
}

func (g *GetLibraryHubsMetadata) GetDirector() []GetLibraryHubsDirector {
	if g == nil {
		return nil
	}
	return g.Director
}

func (g *GetLibraryHubsMetadata) GetRole() []GetLibraryHubsRole {
	if g == nil {
		return nil
	}
	return g.Role
}

func (g *GetLibraryHubsMetadata) GetWriter() []GetLibraryHubsWriter {
	if g == nil {
		return nil
	}
	return g.Writer
}

func (g *GetLibraryHubsMetadata) GetSkipCount() *int {
	if g == nil {
		return nil
	}
	return g.SkipCount
}

func (g *GetLibraryHubsMetadata) GetChapterSource() *string {
	if g == nil {
		return nil
	}
	return g.ChapterSource
}

type GetLibraryHubsHub struct {
	Key           *string                  `json:"key,omitempty"`
	Title         *string                  `json:"title,omitempty"`
	Type          *string                  `json:"type,omitempty"`
	HubIdentifier *string                  `json:"hubIdentifier,omitempty"`
	Context       *string                  `json:"context,omitempty"`
	Size          *int                     `json:"size,omitempty"`
	More          *bool                    `json:"more,omitempty"`
	Style         *string                  `json:"style,omitempty"`
	HubKey        *string                  `json:"hubKey,omitempty"`
	Metadata      []GetLibraryHubsMetadata `json:"Metadata,omitempty"`
	Promoted      *bool                    `json:"promoted,omitempty"`
	Random        *bool                    `json:"random,omitempty"`
}

func (g *GetLibraryHubsHub) GetKey() *string {
	if g == nil {
		return nil
	}
	return g.Key
}

func (g *GetLibraryHubsHub) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GetLibraryHubsHub) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetLibraryHubsHub) GetHubIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.HubIdentifier
}

func (g *GetLibraryHubsHub) GetContext() *string {
	if g == nil {
		return nil
	}
	return g.Context
}

func (g *GetLibraryHubsHub) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetLibraryHubsHub) GetMore() *bool {
	if g == nil {
		return nil
	}
	return g.More
}

func (g *GetLibraryHubsHub) GetStyle() *string {
	if g == nil {
		return nil
	}
	return g.Style
}

func (g *GetLibraryHubsHub) GetHubKey() *string {
	if g == nil {
		return nil
	}
	return g.HubKey
}

func (g *GetLibraryHubsHub) GetMetadata() []GetLibraryHubsMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetLibraryHubsHub) GetPromoted() *bool {
	if g == nil {
		return nil
	}
	return g.Promoted
}

func (g *GetLibraryHubsHub) GetRandom() *bool {
	if g == nil {
		return nil
	}
	return g.Random
}

type GetLibraryHubsMediaContainer struct {
	Size                *int                `json:"size,omitempty"`
	AllowSync           *bool               `json:"allowSync,omitempty"`
	Identifier          *string             `json:"identifier,omitempty"`
	LibrarySectionID    *int                `json:"librarySectionID,omitempty"`
	LibrarySectionTitle *string             `json:"librarySectionTitle,omitempty"`
	LibrarySectionUUID  *string             `json:"librarySectionUUID,omitempty"`
	Hub                 []GetLibraryHubsHub `json:"Hub,omitempty"`
}

func (g *GetLibraryHubsMediaContainer) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetLibraryHubsMediaContainer) GetAllowSync() *bool {
	if g == nil {
		return nil
	}
	return g.AllowSync
}

func (g *GetLibraryHubsMediaContainer) GetIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.Identifier
}

func (g *GetLibraryHubsMediaContainer) GetLibrarySectionID() *int {
	if g == nil {
		return nil
	}
	return g.LibrarySectionID
}

func (g *GetLibraryHubsMediaContainer) GetLibrarySectionTitle() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionTitle
}

func (g *GetLibraryHubsMediaContainer) GetLibrarySectionUUID() *string {
	if g == nil {
		return nil
	}
	return g.LibrarySectionUUID
}

func (g *GetLibraryHubsMediaContainer) GetHub() []GetLibraryHubsHub {
	if g == nil {
		return nil
	}
	return g.Hub
}

// GetLibraryHubsResponseBody - The hubs specific to the library
type GetLibraryHubsResponseBody struct {
	MediaContainer *GetLibraryHubsMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetLibraryHubsResponseBody) GetMediaContainer() *GetLibraryHubsMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetLibraryHubsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The hubs specific to the library
	Object *GetLibraryHubsResponseBody
}

func (g *GetLibraryHubsResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetLibraryHubsResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetLibraryHubsResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetLibraryHubsResponse) GetObject() *GetLibraryHubsResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
