// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type ReorderSubscriptionGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (r ReorderSubscriptionGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReorderSubscriptionGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *ReorderSubscriptionGlobals) GetAccepts() *components.Accepts {
	if r == nil {
		return nil
	}
	return r.Accepts
}

func (r *ReorderSubscriptionGlobals) GetClientIdentifier() *string {
	if r == nil {
		return nil
	}
	return r.ClientIdentifier
}

func (r *ReorderSubscriptionGlobals) GetProduct() *string {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *ReorderSubscriptionGlobals) GetVersion() *string {
	if r == nil {
		return nil
	}
	return r.Version
}

func (r *ReorderSubscriptionGlobals) GetPlatform() *string {
	if r == nil {
		return nil
	}
	return r.Platform
}

func (r *ReorderSubscriptionGlobals) GetPlatformVersion() *string {
	if r == nil {
		return nil
	}
	return r.PlatformVersion
}

func (r *ReorderSubscriptionGlobals) GetDevice() *string {
	if r == nil {
		return nil
	}
	return r.Device
}

func (r *ReorderSubscriptionGlobals) GetModel() *string {
	if r == nil {
		return nil
	}
	return r.Model
}

func (r *ReorderSubscriptionGlobals) GetDeviceVendor() *string {
	if r == nil {
		return nil
	}
	return r.DeviceVendor
}

func (r *ReorderSubscriptionGlobals) GetDeviceName() *string {
	if r == nil {
		return nil
	}
	return r.DeviceName
}

func (r *ReorderSubscriptionGlobals) GetMarketplace() *string {
	if r == nil {
		return nil
	}
	return r.Marketplace
}

type ReorderSubscriptionRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace    *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	SubscriptionID int64   `pathParam:"style=simple,explode=false,name=subscriptionId"`
	// The subscription to move this sub after.  If missing will insert at the beginning of the list
	After *int64 `queryParam:"style=form,explode=true,name=after"`
}

func (r ReorderSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReorderSubscriptionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"subscriptionId"}); err != nil {
		return err
	}
	return nil
}

func (r *ReorderSubscriptionRequest) GetAccepts() *components.Accepts {
	if r == nil {
		return nil
	}
	return r.Accepts
}

func (r *ReorderSubscriptionRequest) GetClientIdentifier() *string {
	if r == nil {
		return nil
	}
	return r.ClientIdentifier
}

func (r *ReorderSubscriptionRequest) GetProduct() *string {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *ReorderSubscriptionRequest) GetVersion() *string {
	if r == nil {
		return nil
	}
	return r.Version
}

func (r *ReorderSubscriptionRequest) GetPlatform() *string {
	if r == nil {
		return nil
	}
	return r.Platform
}

func (r *ReorderSubscriptionRequest) GetPlatformVersion() *string {
	if r == nil {
		return nil
	}
	return r.PlatformVersion
}

func (r *ReorderSubscriptionRequest) GetDevice() *string {
	if r == nil {
		return nil
	}
	return r.Device
}

func (r *ReorderSubscriptionRequest) GetModel() *string {
	if r == nil {
		return nil
	}
	return r.Model
}

func (r *ReorderSubscriptionRequest) GetDeviceVendor() *string {
	if r == nil {
		return nil
	}
	return r.DeviceVendor
}

func (r *ReorderSubscriptionRequest) GetDeviceName() *string {
	if r == nil {
		return nil
	}
	return r.DeviceName
}

func (r *ReorderSubscriptionRequest) GetMarketplace() *string {
	if r == nil {
		return nil
	}
	return r.Marketplace
}

func (r *ReorderSubscriptionRequest) GetSubscriptionID() int64 {
	if r == nil {
		return 0
	}
	return r.SubscriptionID
}

func (r *ReorderSubscriptionRequest) GetAfter() *int64 {
	if r == nil {
		return nil
	}
	return r.After
}

type ReorderSubscriptionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	MediaContainerWithSubscription *components.MediaContainerWithSubscription
}

func (r *ReorderSubscriptionResponse) GetContentType() string {
	if r == nil {
		return ""
	}
	return r.ContentType
}

func (r *ReorderSubscriptionResponse) GetStatusCode() int {
	if r == nil {
		return 0
	}
	return r.StatusCode
}

func (r *ReorderSubscriptionResponse) GetRawResponse() *http.Response {
	if r == nil {
		return nil
	}
	return r.RawResponse
}

func (r *ReorderSubscriptionResponse) GetMediaContainerWithSubscription() *components.MediaContainerWithSubscription {
	if r == nil {
		return nil
	}
	return r.MediaContainerWithSubscription
}
