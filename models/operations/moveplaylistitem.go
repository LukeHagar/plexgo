// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type MovePlaylistItemGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (m MovePlaylistItemGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovePlaylistItemGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (m *MovePlaylistItemGlobals) GetAccepts() *components.Accepts {
	if m == nil {
		return nil
	}
	return m.Accepts
}

func (m *MovePlaylistItemGlobals) GetClientIdentifier() *string {
	if m == nil {
		return nil
	}
	return m.ClientIdentifier
}

func (m *MovePlaylistItemGlobals) GetProduct() *string {
	if m == nil {
		return nil
	}
	return m.Product
}

func (m *MovePlaylistItemGlobals) GetVersion() *string {
	if m == nil {
		return nil
	}
	return m.Version
}

func (m *MovePlaylistItemGlobals) GetPlatform() *string {
	if m == nil {
		return nil
	}
	return m.Platform
}

func (m *MovePlaylistItemGlobals) GetPlatformVersion() *string {
	if m == nil {
		return nil
	}
	return m.PlatformVersion
}

func (m *MovePlaylistItemGlobals) GetDevice() *string {
	if m == nil {
		return nil
	}
	return m.Device
}

func (m *MovePlaylistItemGlobals) GetModel() *string {
	if m == nil {
		return nil
	}
	return m.Model
}

func (m *MovePlaylistItemGlobals) GetDeviceVendor() *string {
	if m == nil {
		return nil
	}
	return m.DeviceVendor
}

func (m *MovePlaylistItemGlobals) GetDeviceName() *string {
	if m == nil {
		return nil
	}
	return m.DeviceName
}

func (m *MovePlaylistItemGlobals) GetMarketplace() *string {
	if m == nil {
		return nil
	}
	return m.Marketplace
}

type MovePlaylistItemRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The ID of the playlist
	PlaylistID int64 `pathParam:"style=simple,explode=false,name=playlistId"`
	// The playlist item ID to move.
	PlaylistItemID int64 `pathParam:"style=simple,explode=false,name=playlistItemId"`
	// The playlist item ID to insert the new item after.  If not provided, item is moved to beginning of playlist
	After *int64 `queryParam:"style=form,explode=true,name=after"`
}

func (m MovePlaylistItemRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MovePlaylistItemRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"playlistId", "playlistItemId"}); err != nil {
		return err
	}
	return nil
}

func (m *MovePlaylistItemRequest) GetAccepts() *components.Accepts {
	if m == nil {
		return nil
	}
	return m.Accepts
}

func (m *MovePlaylistItemRequest) GetClientIdentifier() *string {
	if m == nil {
		return nil
	}
	return m.ClientIdentifier
}

func (m *MovePlaylistItemRequest) GetProduct() *string {
	if m == nil {
		return nil
	}
	return m.Product
}

func (m *MovePlaylistItemRequest) GetVersion() *string {
	if m == nil {
		return nil
	}
	return m.Version
}

func (m *MovePlaylistItemRequest) GetPlatform() *string {
	if m == nil {
		return nil
	}
	return m.Platform
}

func (m *MovePlaylistItemRequest) GetPlatformVersion() *string {
	if m == nil {
		return nil
	}
	return m.PlatformVersion
}

func (m *MovePlaylistItemRequest) GetDevice() *string {
	if m == nil {
		return nil
	}
	return m.Device
}

func (m *MovePlaylistItemRequest) GetModel() *string {
	if m == nil {
		return nil
	}
	return m.Model
}

func (m *MovePlaylistItemRequest) GetDeviceVendor() *string {
	if m == nil {
		return nil
	}
	return m.DeviceVendor
}

func (m *MovePlaylistItemRequest) GetDeviceName() *string {
	if m == nil {
		return nil
	}
	return m.DeviceName
}

func (m *MovePlaylistItemRequest) GetMarketplace() *string {
	if m == nil {
		return nil
	}
	return m.Marketplace
}

func (m *MovePlaylistItemRequest) GetPlaylistID() int64 {
	if m == nil {
		return 0
	}
	return m.PlaylistID
}

func (m *MovePlaylistItemRequest) GetPlaylistItemID() int64 {
	if m == nil {
		return 0
	}
	return m.PlaylistItemID
}

func (m *MovePlaylistItemRequest) GetAfter() *int64 {
	if m == nil {
		return nil
	}
	return m.After
}

type MovePlaylistItemResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	MediaContainerWithPlaylistMetadata *components.MediaContainerWithPlaylistMetadata
}

func (m *MovePlaylistItemResponse) GetContentType() string {
	if m == nil {
		return ""
	}
	return m.ContentType
}

func (m *MovePlaylistItemResponse) GetStatusCode() int {
	if m == nil {
		return 0
	}
	return m.StatusCode
}

func (m *MovePlaylistItemResponse) GetRawResponse() *http.Response {
	if m == nil {
		return nil
	}
	return m.RawResponse
}

func (m *MovePlaylistItemResponse) GetMediaContainerWithPlaylistMetadata() *components.MediaContainerWithPlaylistMetadata {
	if m == nil {
		return nil
	}
	return m.MediaContainerWithPlaylistMetadata
}
