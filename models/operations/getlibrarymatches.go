// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type GetLibraryMatchesGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (g GetLibraryMatchesGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetLibraryMatchesGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetLibraryMatchesGlobals) GetAccepts() *components.Accepts {
	if g == nil {
		return nil
	}
	return g.Accepts
}

func (g *GetLibraryMatchesGlobals) GetClientIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.ClientIdentifier
}

func (g *GetLibraryMatchesGlobals) GetProduct() *string {
	if g == nil {
		return nil
	}
	return g.Product
}

func (g *GetLibraryMatchesGlobals) GetVersion() *string {
	if g == nil {
		return nil
	}
	return g.Version
}

func (g *GetLibraryMatchesGlobals) GetPlatform() *string {
	if g == nil {
		return nil
	}
	return g.Platform
}

func (g *GetLibraryMatchesGlobals) GetPlatformVersion() *string {
	if g == nil {
		return nil
	}
	return g.PlatformVersion
}

func (g *GetLibraryMatchesGlobals) GetDevice() *string {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetLibraryMatchesGlobals) GetModel() *string {
	if g == nil {
		return nil
	}
	return g.Model
}

func (g *GetLibraryMatchesGlobals) GetDeviceVendor() *string {
	if g == nil {
		return nil
	}
	return g.DeviceVendor
}

func (g *GetLibraryMatchesGlobals) GetDeviceName() *string {
	if g == nil {
		return nil
	}
	return g.DeviceName
}

func (g *GetLibraryMatchesGlobals) GetMarketplace() *string {
	if g == nil {
		return nil
	}
	return g.Marketplace
}

type GetLibraryMatchesRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The metadata type to filter by
	Type                            *int64              `queryParam:"style=form,explode=true,name=type"`
	IncludeFullMetadata             *components.BoolInt `queryParam:"style=form,explode=true,name=includeFullMetadata"`
	IncludeAncestorMetadata         *components.BoolInt `queryParam:"style=form,explode=true,name=includeAncestorMetadata"`
	IncludeAlternateMetadataSources *components.BoolInt `queryParam:"style=form,explode=true,name=includeAlternateMetadataSources"`
	// Used for movies, shows, artists, albums, and tracks.  Allowed for various URI schemes, to be defined.
	GUID *string `queryParam:"style=form,explode=true,name=guid"`
	// The title to filter by or assign
	Title *string `queryParam:"style=form,explode=true,name=title"`
	// Used for movies shows, and albums.  Optional.
	Year *int64 `queryParam:"style=form,explode=true,name=year"`
	// Used for movies, episodes, and tracks.  The full path to the media file, used for "cloud-scanning" an item.
	Path *string `queryParam:"style=form,explode=true,name=path"`
	// Used for episodes and tracks.  The title of the show/artist. Required if `path` isn't passed.
	GrandparentTitle *string `queryParam:"style=form,explode=true,name=grandparentTitle"`
	// Used for episodes.  The year of the show.
	GrandparentYear *int64 `queryParam:"style=form,explode=true,name=grandparentYear"`
	// Used for episodes and tracks.  The season/album number.
	ParentIndex *int64 `queryParam:"style=form,explode=true,name=parentIndex"`
	// Used for episodes and tracks.  The episode/tracks number in the season/album.
	Index *int64 `queryParam:"style=form,explode=true,name=index"`
	// Used for episodes.  In the format `YYYY-MM-DD`.
	OriginallyAvailableAt *string `queryParam:"style=form,explode=true,name=originallyAvailableAt"`
	// Used for albums and tracks. The artist name for albums or the album name for tracks.
	ParentTitle *string `queryParam:"style=form,explode=true,name=parentTitle"`
}

func (g GetLibraryMatchesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetLibraryMatchesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetLibraryMatchesRequest) GetAccepts() *components.Accepts {
	if g == nil {
		return nil
	}
	return g.Accepts
}

func (g *GetLibraryMatchesRequest) GetClientIdentifier() *string {
	if g == nil {
		return nil
	}
	return g.ClientIdentifier
}

func (g *GetLibraryMatchesRequest) GetProduct() *string {
	if g == nil {
		return nil
	}
	return g.Product
}

func (g *GetLibraryMatchesRequest) GetVersion() *string {
	if g == nil {
		return nil
	}
	return g.Version
}

func (g *GetLibraryMatchesRequest) GetPlatform() *string {
	if g == nil {
		return nil
	}
	return g.Platform
}

func (g *GetLibraryMatchesRequest) GetPlatformVersion() *string {
	if g == nil {
		return nil
	}
	return g.PlatformVersion
}

func (g *GetLibraryMatchesRequest) GetDevice() *string {
	if g == nil {
		return nil
	}
	return g.Device
}

func (g *GetLibraryMatchesRequest) GetModel() *string {
	if g == nil {
		return nil
	}
	return g.Model
}

func (g *GetLibraryMatchesRequest) GetDeviceVendor() *string {
	if g == nil {
		return nil
	}
	return g.DeviceVendor
}

func (g *GetLibraryMatchesRequest) GetDeviceName() *string {
	if g == nil {
		return nil
	}
	return g.DeviceName
}

func (g *GetLibraryMatchesRequest) GetMarketplace() *string {
	if g == nil {
		return nil
	}
	return g.Marketplace
}

func (g *GetLibraryMatchesRequest) GetType() *int64 {
	if g == nil {
		return nil
	}
	return g.Type
}

func (g *GetLibraryMatchesRequest) GetIncludeFullMetadata() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.IncludeFullMetadata
}

func (g *GetLibraryMatchesRequest) GetIncludeAncestorMetadata() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.IncludeAncestorMetadata
}

func (g *GetLibraryMatchesRequest) GetIncludeAlternateMetadataSources() *components.BoolInt {
	if g == nil {
		return nil
	}
	return g.IncludeAlternateMetadataSources
}

func (g *GetLibraryMatchesRequest) GetGUID() *string {
	if g == nil {
		return nil
	}
	return g.GUID
}

func (g *GetLibraryMatchesRequest) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GetLibraryMatchesRequest) GetYear() *int64 {
	if g == nil {
		return nil
	}
	return g.Year
}

func (g *GetLibraryMatchesRequest) GetPath() *string {
	if g == nil {
		return nil
	}
	return g.Path
}

func (g *GetLibraryMatchesRequest) GetGrandparentTitle() *string {
	if g == nil {
		return nil
	}
	return g.GrandparentTitle
}

func (g *GetLibraryMatchesRequest) GetGrandparentYear() *int64 {
	if g == nil {
		return nil
	}
	return g.GrandparentYear
}

func (g *GetLibraryMatchesRequest) GetParentIndex() *int64 {
	if g == nil {
		return nil
	}
	return g.ParentIndex
}

func (g *GetLibraryMatchesRequest) GetIndex() *int64 {
	if g == nil {
		return nil
	}
	return g.Index
}

func (g *GetLibraryMatchesRequest) GetOriginallyAvailableAt() *string {
	if g == nil {
		return nil
	}
	return g.OriginallyAvailableAt
}

func (g *GetLibraryMatchesRequest) GetParentTitle() *string {
	if g == nil {
		return nil
	}
	return g.ParentTitle
}

type GetLibraryMatchesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	MediaContainerWithMetadata *components.MediaContainerWithMetadata
	Headers                    map[string][]string
}

func (g *GetLibraryMatchesResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetLibraryMatchesResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetLibraryMatchesResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetLibraryMatchesResponse) GetMediaContainerWithMetadata() *components.MediaContainerWithMetadata {
	if g == nil {
		return nil
	}
	return g.MediaContainerWithMetadata
}

func (g *GetLibraryMatchesResponse) GetHeaders() map[string][]string {
	if g == nil {
		return map[string][]string{}
	}
	return g.Headers
}
