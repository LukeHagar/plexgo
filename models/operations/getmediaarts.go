// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetMediaArtsRequest struct {
	// the id of the library item to return the artwork of.
	RatingKey int64 `pathParam:"style=simple,explode=false,name=ratingKey"`
}

func (o *GetMediaArtsRequest) GetRatingKey() int64 {
	if o == nil {
		return 0
	}
	return o.RatingKey
}

type GetMediaArtsMetadata struct {
	// The URL of the artwork.
	Key string `json:"key"`
	// The provider of the artwork.
	Provider *string `json:"provider,omitempty"`
	// The URL of the artwork.
	RatingKey string `json:"ratingKey"`
	// Whether this is the selected artwork.
	Selected bool `json:"selected"`
	// The URL of the artwork thumbnail.
	Thumb string `json:"thumb"`
}

func (o *GetMediaArtsMetadata) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetMediaArtsMetadata) GetProvider() *string {
	if o == nil {
		return nil
	}
	return o.Provider
}

func (o *GetMediaArtsMetadata) GetRatingKey() string {
	if o == nil {
		return ""
	}
	return o.RatingKey
}

func (o *GetMediaArtsMetadata) GetSelected() bool {
	if o == nil {
		return false
	}
	return o.Selected
}

func (o *GetMediaArtsMetadata) GetThumb() string {
	if o == nil {
		return ""
	}
	return o.Thumb
}

type GetMediaArtsMediaContainer struct {
	// Number of media items returned in this response.
	Size int `json:"size"`
	// The version number for media tags.
	MediaTagVersion int64 `json:"mediaTagVersion"`
	// The prefix used for media tag resource paths.
	MediaTagPrefix string `json:"mediaTagPrefix"`
	// An plugin identifier for the media container.
	Identifier string                 `json:"identifier"`
	Metadata   []GetMediaArtsMetadata `json:"Metadata"`
}

func (o *GetMediaArtsMediaContainer) GetSize() int {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *GetMediaArtsMediaContainer) GetMediaTagVersion() int64 {
	if o == nil {
		return 0
	}
	return o.MediaTagVersion
}

func (o *GetMediaArtsMediaContainer) GetMediaTagPrefix() string {
	if o == nil {
		return ""
	}
	return o.MediaTagPrefix
}

func (o *GetMediaArtsMediaContainer) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetMediaArtsMediaContainer) GetMetadata() []GetMediaArtsMetadata {
	if o == nil {
		return []GetMediaArtsMetadata{}
	}
	return o.Metadata
}

// GetMediaArtsResponseBody - The available background artwork for the library item.
type GetMediaArtsResponseBody struct {
	MediaContainer *GetMediaArtsMediaContainer `json:"MediaContainer,omitempty"`
}

func (o *GetMediaArtsResponseBody) GetMediaContainer() *GetMediaArtsMediaContainer {
	if o == nil {
		return nil
	}
	return o.MediaContainer
}

type GetMediaArtsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The available background artwork for the library item.
	Object *GetMediaArtsResponseBody
}

func (o *GetMediaArtsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetMediaArtsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetMediaArtsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetMediaArtsResponse) GetObject() *GetMediaArtsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
