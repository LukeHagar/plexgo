// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type TranscodeSession struct {
	Key                  *string  `json:"key,omitempty"`
	Throttled            *bool    `json:"throttled,omitempty"`
	Complete             *bool    `json:"complete,omitempty"`
	Progress             *float64 `json:"progress,omitempty"`
	Size                 *int     `json:"size,omitempty"`
	Speed                *float64 `json:"speed,omitempty"`
	Error                *bool    `json:"error,omitempty"`
	Duration             *int     `json:"duration,omitempty"`
	Remaining            *int     `json:"remaining,omitempty"`
	Context              *string  `json:"context,omitempty"`
	SourceVideoCodec     *string  `json:"sourceVideoCodec,omitempty"`
	SourceAudioCodec     *string  `json:"sourceAudioCodec,omitempty"`
	VideoDecision        *string  `json:"videoDecision,omitempty"`
	AudioDecision        *string  `json:"audioDecision,omitempty"`
	SubtitleDecision     *string  `json:"subtitleDecision,omitempty"`
	Protocol             *string  `json:"protocol,omitempty"`
	Container            *string  `json:"container,omitempty"`
	VideoCodec           *string  `json:"videoCodec,omitempty"`
	AudioCodec           *string  `json:"audioCodec,omitempty"`
	AudioChannels        *int     `json:"audioChannels,omitempty"`
	TranscodeHwRequested *bool    `json:"transcodeHwRequested,omitempty"`
	TimeStamp            *float64 `json:"timeStamp,omitempty"`
	MaxOffsetAvailable   *float64 `json:"maxOffsetAvailable,omitempty"`
	MinOffsetAvailable   *float64 `json:"minOffsetAvailable,omitempty"`
}

func (t *TranscodeSession) GetKey() *string {
	if t == nil {
		return nil
	}
	return t.Key
}

func (t *TranscodeSession) GetThrottled() *bool {
	if t == nil {
		return nil
	}
	return t.Throttled
}

func (t *TranscodeSession) GetComplete() *bool {
	if t == nil {
		return nil
	}
	return t.Complete
}

func (t *TranscodeSession) GetProgress() *float64 {
	if t == nil {
		return nil
	}
	return t.Progress
}

func (t *TranscodeSession) GetSize() *int {
	if t == nil {
		return nil
	}
	return t.Size
}

func (t *TranscodeSession) GetSpeed() *float64 {
	if t == nil {
		return nil
	}
	return t.Speed
}

func (t *TranscodeSession) GetError() *bool {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TranscodeSession) GetDuration() *int {
	if t == nil {
		return nil
	}
	return t.Duration
}

func (t *TranscodeSession) GetRemaining() *int {
	if t == nil {
		return nil
	}
	return t.Remaining
}

func (t *TranscodeSession) GetContext() *string {
	if t == nil {
		return nil
	}
	return t.Context
}

func (t *TranscodeSession) GetSourceVideoCodec() *string {
	if t == nil {
		return nil
	}
	return t.SourceVideoCodec
}

func (t *TranscodeSession) GetSourceAudioCodec() *string {
	if t == nil {
		return nil
	}
	return t.SourceAudioCodec
}

func (t *TranscodeSession) GetVideoDecision() *string {
	if t == nil {
		return nil
	}
	return t.VideoDecision
}

func (t *TranscodeSession) GetAudioDecision() *string {
	if t == nil {
		return nil
	}
	return t.AudioDecision
}

func (t *TranscodeSession) GetSubtitleDecision() *string {
	if t == nil {
		return nil
	}
	return t.SubtitleDecision
}

func (t *TranscodeSession) GetProtocol() *string {
	if t == nil {
		return nil
	}
	return t.Protocol
}

func (t *TranscodeSession) GetContainer() *string {
	if t == nil {
		return nil
	}
	return t.Container
}

func (t *TranscodeSession) GetVideoCodec() *string {
	if t == nil {
		return nil
	}
	return t.VideoCodec
}

func (t *TranscodeSession) GetAudioCodec() *string {
	if t == nil {
		return nil
	}
	return t.AudioCodec
}

func (t *TranscodeSession) GetAudioChannels() *int {
	if t == nil {
		return nil
	}
	return t.AudioChannels
}

func (t *TranscodeSession) GetTranscodeHwRequested() *bool {
	if t == nil {
		return nil
	}
	return t.TranscodeHwRequested
}

func (t *TranscodeSession) GetTimeStamp() *float64 {
	if t == nil {
		return nil
	}
	return t.TimeStamp
}

func (t *TranscodeSession) GetMaxOffsetAvailable() *float64 {
	if t == nil {
		return nil
	}
	return t.MaxOffsetAvailable
}

func (t *TranscodeSession) GetMinOffsetAvailable() *float64 {
	if t == nil {
		return nil
	}
	return t.MinOffsetAvailable
}

type GetTranscodeSessionsMediaContainer struct {
	Size             *int               `json:"size,omitempty"`
	TranscodeSession []TranscodeSession `json:"TranscodeSession,omitempty"`
}

func (g *GetTranscodeSessionsMediaContainer) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetTranscodeSessionsMediaContainer) GetTranscodeSession() []TranscodeSession {
	if g == nil {
		return nil
	}
	return g.TranscodeSession
}

// GetTranscodeSessionsResponseBody - The Transcode Sessions
type GetTranscodeSessionsResponseBody struct {
	MediaContainer *GetTranscodeSessionsMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetTranscodeSessionsResponseBody) GetMediaContainer() *GetTranscodeSessionsMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetTranscodeSessionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The Transcode Sessions
	Object *GetTranscodeSessionsResponseBody
}

func (g *GetTranscodeSessionsResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetTranscodeSessionsResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetTranscodeSessionsResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetTranscodeSessionsResponse) GetObject() *GetTranscodeSessionsResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
