// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type ComputeChannelMapGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (c ComputeChannelMapGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeChannelMapGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ComputeChannelMapGlobals) GetAccepts() *components.Accepts {
	if c == nil {
		return nil
	}
	return c.Accepts
}

func (c *ComputeChannelMapGlobals) GetClientIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.ClientIdentifier
}

func (c *ComputeChannelMapGlobals) GetProduct() *string {
	if c == nil {
		return nil
	}
	return c.Product
}

func (c *ComputeChannelMapGlobals) GetVersion() *string {
	if c == nil {
		return nil
	}
	return c.Version
}

func (c *ComputeChannelMapGlobals) GetPlatform() *string {
	if c == nil {
		return nil
	}
	return c.Platform
}

func (c *ComputeChannelMapGlobals) GetPlatformVersion() *string {
	if c == nil {
		return nil
	}
	return c.PlatformVersion
}

func (c *ComputeChannelMapGlobals) GetDevice() *string {
	if c == nil {
		return nil
	}
	return c.Device
}

func (c *ComputeChannelMapGlobals) GetModel() *string {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *ComputeChannelMapGlobals) GetDeviceVendor() *string {
	if c == nil {
		return nil
	}
	return c.DeviceVendor
}

func (c *ComputeChannelMapGlobals) GetDeviceName() *string {
	if c == nil {
		return nil
	}
	return c.DeviceName
}

func (c *ComputeChannelMapGlobals) GetMarketplace() *string {
	if c == nil {
		return nil
	}
	return c.Marketplace
}

type ComputeChannelMapRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The URI describing the device
	DeviceQueryParameter string `queryParam:"style=form,explode=true,name=device"`
	// The URI describing the lineup
	Lineup string `queryParam:"style=form,explode=true,name=lineup"`
}

func (c ComputeChannelMapRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeChannelMapRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"device", "lineup"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeChannelMapRequest) GetAccepts() *components.Accepts {
	if c == nil {
		return nil
	}
	return c.Accepts
}

func (c *ComputeChannelMapRequest) GetClientIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.ClientIdentifier
}

func (c *ComputeChannelMapRequest) GetProduct() *string {
	if c == nil {
		return nil
	}
	return c.Product
}

func (c *ComputeChannelMapRequest) GetVersion() *string {
	if c == nil {
		return nil
	}
	return c.Version
}

func (c *ComputeChannelMapRequest) GetPlatform() *string {
	if c == nil {
		return nil
	}
	return c.Platform
}

func (c *ComputeChannelMapRequest) GetPlatformVersion() *string {
	if c == nil {
		return nil
	}
	return c.PlatformVersion
}

func (c *ComputeChannelMapRequest) GetDevice() *string {
	if c == nil {
		return nil
	}
	return c.Device
}

func (c *ComputeChannelMapRequest) GetModel() *string {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *ComputeChannelMapRequest) GetDeviceVendor() *string {
	if c == nil {
		return nil
	}
	return c.DeviceVendor
}

func (c *ComputeChannelMapRequest) GetDeviceName() *string {
	if c == nil {
		return nil
	}
	return c.DeviceName
}

func (c *ComputeChannelMapRequest) GetMarketplace() *string {
	if c == nil {
		return nil
	}
	return c.Marketplace
}

func (c *ComputeChannelMapRequest) GetDeviceQueryParameter() string {
	if c == nil {
		return ""
	}
	return c.DeviceQueryParameter
}

func (c *ComputeChannelMapRequest) GetLineup() string {
	if c == nil {
		return ""
	}
	return c.Lineup
}

type ComputeChannelMapChannelMapping struct {
	ChannelKey *string `json:"channelKey,omitempty"`
	// The channel description on the device
	DeviceIdentifier *string `json:"deviceIdentifier,omitempty"`
	Favorite         *bool   `json:"favorite,omitempty"`
	// The channel identifier in the lineup
	LineupIdentifier *string `json:"lineupIdentifier,omitempty"`
}

func (c *ComputeChannelMapChannelMapping) GetChannelKey() *string {
	if c == nil {
		return nil
	}
	return c.ChannelKey
}

func (c *ComputeChannelMapChannelMapping) GetDeviceIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.DeviceIdentifier
}

func (c *ComputeChannelMapChannelMapping) GetFavorite() *bool {
	if c == nil {
		return nil
	}
	return c.Favorite
}

func (c *ComputeChannelMapChannelMapping) GetLineupIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.LineupIdentifier
}

// ComputeChannelMapMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type ComputeChannelMapMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize      *int64                            `json:"totalSize,omitempty"`
	ChannelMapping []ComputeChannelMapChannelMapping `json:"ChannelMapping,omitempty"`
}

func (c *ComputeChannelMapMediaContainer) GetIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.Identifier
}

func (c *ComputeChannelMapMediaContainer) GetOffset() *int64 {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *ComputeChannelMapMediaContainer) GetSize() *int64 {
	if c == nil {
		return nil
	}
	return c.Size
}

func (c *ComputeChannelMapMediaContainer) GetTotalSize() *int64 {
	if c == nil {
		return nil
	}
	return c.TotalSize
}

func (c *ComputeChannelMapMediaContainer) GetChannelMapping() []ComputeChannelMapChannelMapping {
	if c == nil {
		return nil
	}
	return c.ChannelMapping
}

// ComputeChannelMapResponseBody - OK
type ComputeChannelMapResponseBody struct {
	MediaContainer *ComputeChannelMapMediaContainer `json:"MediaContainer,omitempty"`
}

func (c *ComputeChannelMapResponseBody) GetMediaContainer() *ComputeChannelMapMediaContainer {
	if c == nil {
		return nil
	}
	return c.MediaContainer
}

type ComputeChannelMapResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object  *ComputeChannelMapResponseBody
	Headers map[string][]string
}

func (c *ComputeChannelMapResponse) GetContentType() string {
	if c == nil {
		return ""
	}
	return c.ContentType
}

func (c *ComputeChannelMapResponse) GetStatusCode() int {
	if c == nil {
		return 0
	}
	return c.StatusCode
}

func (c *ComputeChannelMapResponse) GetRawResponse() *http.Response {
	if c == nil {
		return nil
	}
	return c.RawResponse
}

func (c *ComputeChannelMapResponse) GetObject() *ComputeChannelMapResponseBody {
	if c == nil {
		return nil
	}
	return c.Object
}

func (c *ComputeChannelMapResponse) GetHeaders() map[string][]string {
	if c == nil {
		return map[string][]string{}
	}
	return c.Headers
}
