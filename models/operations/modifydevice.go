// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/models/components"
	"net/http"
)

type ModifyDeviceGlobals struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
}

func (m ModifyDeviceGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *ModifyDeviceGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (m *ModifyDeviceGlobals) GetAccepts() *components.Accepts {
	if m == nil {
		return nil
	}
	return m.Accepts
}

func (m *ModifyDeviceGlobals) GetClientIdentifier() *string {
	if m == nil {
		return nil
	}
	return m.ClientIdentifier
}

func (m *ModifyDeviceGlobals) GetProduct() *string {
	if m == nil {
		return nil
	}
	return m.Product
}

func (m *ModifyDeviceGlobals) GetVersion() *string {
	if m == nil {
		return nil
	}
	return m.Version
}

func (m *ModifyDeviceGlobals) GetPlatform() *string {
	if m == nil {
		return nil
	}
	return m.Platform
}

func (m *ModifyDeviceGlobals) GetPlatformVersion() *string {
	if m == nil {
		return nil
	}
	return m.PlatformVersion
}

func (m *ModifyDeviceGlobals) GetDevice() *string {
	if m == nil {
		return nil
	}
	return m.Device
}

func (m *ModifyDeviceGlobals) GetModel() *string {
	if m == nil {
		return nil
	}
	return m.Model
}

func (m *ModifyDeviceGlobals) GetDeviceVendor() *string {
	if m == nil {
		return nil
	}
	return m.DeviceVendor
}

func (m *ModifyDeviceGlobals) GetDeviceName() *string {
	if m == nil {
		return nil
	}
	return m.DeviceName
}

func (m *ModifyDeviceGlobals) GetMarketplace() *string {
	if m == nil {
		return nil
	}
	return m.Marketplace
}

type ModifyDeviceRequest struct {
	// Indicates the client accepts the indicated media types
	Accepts *components.Accepts `default:"application/xml" header:"style=simple,explode=false,name=accepts"`
	// An opaque identifier unique to the client
	ClientIdentifier *string `header:"style=simple,explode=false,name=X-Plex-Client-Identifier"`
	// The name of the client product
	Product *string `header:"style=simple,explode=false,name=X-Plex-Product"`
	// The version of the client application
	Version *string `header:"style=simple,explode=false,name=X-Plex-Version"`
	// The platform of the client
	Platform *string `header:"style=simple,explode=false,name=X-Plex-Platform"`
	// The version of the platform
	PlatformVersion *string `header:"style=simple,explode=false,name=X-Plex-Platform-Version"`
	// A relatively friendly name for the client device
	Device *string `header:"style=simple,explode=false,name=X-Plex-Device"`
	// A potentially less friendly identifier for the device model
	Model *string `header:"style=simple,explode=false,name=X-Plex-Model"`
	// The device vendor
	DeviceVendor *string `header:"style=simple,explode=false,name=X-Plex-Device-Vendor"`
	// A friendly name for the client
	DeviceName *string `header:"style=simple,explode=false,name=X-Plex-Device-Name"`
	// The marketplace on which the client application is distributed
	Marketplace *string `header:"style=simple,explode=false,name=X-Plex-Marketplace"`
	// The ID of the device.
	DeviceID int64 `pathParam:"style=simple,explode=false,name=deviceId"`
	// Whether to enable the device
	Enabled *components.BoolInt `queryParam:"style=form,explode=true,name=enabled"`
}

func (m ModifyDeviceRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *ModifyDeviceRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"deviceId"}); err != nil {
		return err
	}
	return nil
}

func (m *ModifyDeviceRequest) GetAccepts() *components.Accepts {
	if m == nil {
		return nil
	}
	return m.Accepts
}

func (m *ModifyDeviceRequest) GetClientIdentifier() *string {
	if m == nil {
		return nil
	}
	return m.ClientIdentifier
}

func (m *ModifyDeviceRequest) GetProduct() *string {
	if m == nil {
		return nil
	}
	return m.Product
}

func (m *ModifyDeviceRequest) GetVersion() *string {
	if m == nil {
		return nil
	}
	return m.Version
}

func (m *ModifyDeviceRequest) GetPlatform() *string {
	if m == nil {
		return nil
	}
	return m.Platform
}

func (m *ModifyDeviceRequest) GetPlatformVersion() *string {
	if m == nil {
		return nil
	}
	return m.PlatformVersion
}

func (m *ModifyDeviceRequest) GetDevice() *string {
	if m == nil {
		return nil
	}
	return m.Device
}

func (m *ModifyDeviceRequest) GetModel() *string {
	if m == nil {
		return nil
	}
	return m.Model
}

func (m *ModifyDeviceRequest) GetDeviceVendor() *string {
	if m == nil {
		return nil
	}
	return m.DeviceVendor
}

func (m *ModifyDeviceRequest) GetDeviceName() *string {
	if m == nil {
		return nil
	}
	return m.DeviceName
}

func (m *ModifyDeviceRequest) GetMarketplace() *string {
	if m == nil {
		return nil
	}
	return m.Marketplace
}

func (m *ModifyDeviceRequest) GetDeviceID() int64 {
	if m == nil {
		return 0
	}
	return m.DeviceID
}

func (m *ModifyDeviceRequest) GetEnabled() *components.BoolInt {
	if m == nil {
		return nil
	}
	return m.Enabled
}

// ModifyDeviceMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type ModifyDeviceMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize *int64  `json:"totalSize,omitempty"`
	Message   *string `json:"message,omitempty"`
	Status    *int64  `json:"status,omitempty"`
}

func (m *ModifyDeviceMediaContainer) GetIdentifier() *string {
	if m == nil {
		return nil
	}
	return m.Identifier
}

func (m *ModifyDeviceMediaContainer) GetOffset() *int64 {
	if m == nil {
		return nil
	}
	return m.Offset
}

func (m *ModifyDeviceMediaContainer) GetSize() *int64 {
	if m == nil {
		return nil
	}
	return m.Size
}

func (m *ModifyDeviceMediaContainer) GetTotalSize() *int64 {
	if m == nil {
		return nil
	}
	return m.TotalSize
}

func (m *ModifyDeviceMediaContainer) GetMessage() *string {
	if m == nil {
		return nil
	}
	return m.Message
}

func (m *ModifyDeviceMediaContainer) GetStatus() *int64 {
	if m == nil {
		return nil
	}
	return m.Status
}

// ModifyDeviceResponseBody - OK
type ModifyDeviceResponseBody struct {
	MediaContainer *ModifyDeviceMediaContainer `json:"MediaContainer,omitempty"`
}

func (m *ModifyDeviceResponseBody) GetMediaContainer() *ModifyDeviceMediaContainer {
	if m == nil {
		return nil
	}
	return m.MediaContainer
}

type ModifyDeviceResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object  *ModifyDeviceResponseBody
	Headers map[string][]string
}

func (m *ModifyDeviceResponse) GetContentType() string {
	if m == nil {
		return ""
	}
	return m.ContentType
}

func (m *ModifyDeviceResponse) GetStatusCode() int {
	if m == nil {
		return 0
	}
	return m.StatusCode
}

func (m *ModifyDeviceResponse) GetRawResponse() *http.Response {
	if m == nil {
		return nil
	}
	return m.RawResponse
}

func (m *ModifyDeviceResponse) GetObject() *ModifyDeviceResponseBody {
	if m == nil {
		return nil
	}
	return m.Object
}

func (m *ModifyDeviceResponse) GetHeaders() map[string][]string {
	if m == nil {
		return map[string][]string{}
	}
	return m.Headers
}
