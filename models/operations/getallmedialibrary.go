// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/LukeHagar/plexgo/internal/utils"
	"github.com/LukeHagar/plexgo/types"
	"net/http"
)

// GetAllMediaLibraryQueryParamType - The type of media to retrieve or filter by.
// 1 = movie
// 2 = show
// 3 = season
// 4 = episode
// E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
type GetAllMediaLibraryQueryParamType int64

const (
	GetAllMediaLibraryQueryParamTypeMovie   GetAllMediaLibraryQueryParamType = 1
	GetAllMediaLibraryQueryParamTypeTvShow  GetAllMediaLibraryQueryParamType = 2
	GetAllMediaLibraryQueryParamTypeSeason  GetAllMediaLibraryQueryParamType = 3
	GetAllMediaLibraryQueryParamTypeEpisode GetAllMediaLibraryQueryParamType = 4
	GetAllMediaLibraryQueryParamTypeAudio   GetAllMediaLibraryQueryParamType = 8
	GetAllMediaLibraryQueryParamTypeAlbum   GetAllMediaLibraryQueryParamType = 9
	GetAllMediaLibraryQueryParamTypeTrack   GetAllMediaLibraryQueryParamType = 10
)

func (e GetAllMediaLibraryQueryParamType) ToPointer() *GetAllMediaLibraryQueryParamType {
	return &e
}
func (e *GetAllMediaLibraryQueryParamType) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		*e = GetAllMediaLibraryQueryParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryQueryParamType: %v", v)
	}
}

// GetAllMediaLibraryQueryParamIncludeMeta - Adds the Meta object to the response
type GetAllMediaLibraryQueryParamIncludeMeta int

const (
	GetAllMediaLibraryQueryParamIncludeMetaDisable GetAllMediaLibraryQueryParamIncludeMeta = 0
	GetAllMediaLibraryQueryParamIncludeMetaEnable  GetAllMediaLibraryQueryParamIncludeMeta = 1
)

func (e GetAllMediaLibraryQueryParamIncludeMeta) ToPointer() *GetAllMediaLibraryQueryParamIncludeMeta {
	return &e
}
func (e *GetAllMediaLibraryQueryParamIncludeMeta) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetAllMediaLibraryQueryParamIncludeMeta(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryQueryParamIncludeMeta: %v", v)
	}
}

// QueryParamIncludeGuids - Adds the Guid object to the response
type QueryParamIncludeGuids int

const (
	QueryParamIncludeGuidsDisable QueryParamIncludeGuids = 0
	QueryParamIncludeGuidsEnable  QueryParamIncludeGuids = 1
)

func (e QueryParamIncludeGuids) ToPointer() *QueryParamIncludeGuids {
	return &e
}
func (e *QueryParamIncludeGuids) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = QueryParamIncludeGuids(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamIncludeGuids: %v", v)
	}
}

type IncludeAdvanced int

const (
	IncludeAdvancedDisable IncludeAdvanced = 0
	IncludeAdvancedEnable  IncludeAdvanced = 1
)

func (e IncludeAdvanced) ToPointer() *IncludeAdvanced {
	return &e
}
func (e *IncludeAdvanced) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = IncludeAdvanced(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncludeAdvanced: %v", v)
	}
}

type QueryParamIncludeCollections int

const (
	QueryParamIncludeCollectionsDisable QueryParamIncludeCollections = 0
	QueryParamIncludeCollectionsEnable  QueryParamIncludeCollections = 1
)

func (e QueryParamIncludeCollections) ToPointer() *QueryParamIncludeCollections {
	return &e
}
func (e *QueryParamIncludeCollections) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = QueryParamIncludeCollections(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamIncludeCollections: %v", v)
	}
}

type QueryParamIncludeExternalMedia int

const (
	QueryParamIncludeExternalMediaDisable QueryParamIncludeExternalMedia = 0
	QueryParamIncludeExternalMediaEnable  QueryParamIncludeExternalMedia = 1
)

func (e QueryParamIncludeExternalMedia) ToPointer() *QueryParamIncludeExternalMedia {
	return &e
}
func (e *QueryParamIncludeExternalMedia) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = QueryParamIncludeExternalMedia(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamIncludeExternalMedia: %v", v)
	}
}

type GetAllMediaLibraryRequest struct {
	// The unique key of the Plex library.
	// Note: This is unique in the context of the Plex server.
	//
	SectionKey int `pathParam:"style=simple,explode=false,name=sectionKey"`
	// The type of media to retrieve or filter by.
	// 1 = movie
	// 2 = show
	// 3 = season
	// 4 = episode
	// E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
	//
	Type GetAllMediaLibraryQueryParamType `queryParam:"style=form,explode=true,name=type"`
	// Adds the Meta object to the response
	//
	IncludeMeta *GetAllMediaLibraryQueryParamIncludeMeta `default:"0" queryParam:"style=form,explode=true,name=includeMeta"`
	// Adds the Guid object to the response
	//
	IncludeGuids         *QueryParamIncludeGuids         `default:"0" queryParam:"style=form,explode=true,name=includeGuids"`
	IncludeAdvanced      *IncludeAdvanced                `default:"0" queryParam:"style=form,explode=true,name=includeAdvanced"`
	IncludeCollections   *QueryParamIncludeCollections   `default:"0" queryParam:"style=form,explode=true,name=includeCollections"`
	IncludeExternalMedia *QueryParamIncludeExternalMedia `default:"0" queryParam:"style=form,explode=true,name=includeExternalMedia"`
	// The index of the first item to return. If not specified, the first item will be returned.
	// If the number of items exceeds the limit, the response will be paginated.
	// By default this is 0
	//
	XPlexContainerStart *int `default:"0" queryParam:"style=form,explode=true,name=X-Plex-Container-Start"`
	// The number of items to return. If not specified, all items will be returned.
	// If the number of items exceeds the limit, the response will be paginated.
	// By default this is 50
	//
	XPlexContainerSize *int `default:"50" queryParam:"style=form,explode=true,name=X-Plex-Container-Size"`
}

func (g GetAllMediaLibraryRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAllMediaLibraryRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAllMediaLibraryRequest) GetSectionKey() int {
	if o == nil {
		return 0
	}
	return o.SectionKey
}

func (o *GetAllMediaLibraryRequest) GetType() GetAllMediaLibraryQueryParamType {
	if o == nil {
		return GetAllMediaLibraryQueryParamType(0)
	}
	return o.Type
}

func (o *GetAllMediaLibraryRequest) GetIncludeMeta() *GetAllMediaLibraryQueryParamIncludeMeta {
	if o == nil {
		return nil
	}
	return o.IncludeMeta
}

func (o *GetAllMediaLibraryRequest) GetIncludeGuids() *QueryParamIncludeGuids {
	if o == nil {
		return nil
	}
	return o.IncludeGuids
}

func (o *GetAllMediaLibraryRequest) GetIncludeAdvanced() *IncludeAdvanced {
	if o == nil {
		return nil
	}
	return o.IncludeAdvanced
}

func (o *GetAllMediaLibraryRequest) GetIncludeCollections() *QueryParamIncludeCollections {
	if o == nil {
		return nil
	}
	return o.IncludeCollections
}

func (o *GetAllMediaLibraryRequest) GetIncludeExternalMedia() *QueryParamIncludeExternalMedia {
	if o == nil {
		return nil
	}
	return o.IncludeExternalMedia
}

func (o *GetAllMediaLibraryRequest) GetXPlexContainerStart() *int {
	if o == nil {
		return nil
	}
	return o.XPlexContainerStart
}

func (o *GetAllMediaLibraryRequest) GetXPlexContainerSize() *int {
	if o == nil {
		return nil
	}
	return o.XPlexContainerSize
}

type GetAllMediaLibraryFilter struct {
	Filter     string `json:"filter"`
	FilterType string `json:"filterType"`
	Key        string `json:"key"`
	Title      string `json:"title"`
	Type       string `json:"type"`
	Advanced   *bool  `json:"advanced,omitempty"`
}

func (o *GetAllMediaLibraryFilter) GetFilter() string {
	if o == nil {
		return ""
	}
	return o.Filter
}

func (o *GetAllMediaLibraryFilter) GetFilterType() string {
	if o == nil {
		return ""
	}
	return o.FilterType
}

func (o *GetAllMediaLibraryFilter) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetAllMediaLibraryFilter) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAllMediaLibraryFilter) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetAllMediaLibraryFilter) GetAdvanced() *bool {
	if o == nil {
		return nil
	}
	return o.Advanced
}

// GetAllMediaLibraryActiveDirection - The direction of the sort. Can be either `asc` or `desc`.
type GetAllMediaLibraryActiveDirection string

const (
	GetAllMediaLibraryActiveDirectionAscending  GetAllMediaLibraryActiveDirection = "asc"
	GetAllMediaLibraryActiveDirectionDescending GetAllMediaLibraryActiveDirection = "desc"
)

func (e GetAllMediaLibraryActiveDirection) ToPointer() *GetAllMediaLibraryActiveDirection {
	return &e
}
func (e *GetAllMediaLibraryActiveDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAllMediaLibraryActiveDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryActiveDirection: %v", v)
	}
}

// GetAllMediaLibraryDefaultDirection - The direction of the sort. Can be either `asc` or `desc`.
type GetAllMediaLibraryDefaultDirection string

const (
	GetAllMediaLibraryDefaultDirectionAscending  GetAllMediaLibraryDefaultDirection = "asc"
	GetAllMediaLibraryDefaultDirectionDescending GetAllMediaLibraryDefaultDirection = "desc"
)

func (e GetAllMediaLibraryDefaultDirection) ToPointer() *GetAllMediaLibraryDefaultDirection {
	return &e
}
func (e *GetAllMediaLibraryDefaultDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAllMediaLibraryDefaultDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryDefaultDirection: %v", v)
	}
}

type GetAllMediaLibrarySort struct {
	Default *string `json:"default,omitempty"`
	Active  *bool   `json:"active,omitempty"`
	// The direction of the sort. Can be either `asc` or `desc`.
	//
	ActiveDirection *GetAllMediaLibraryActiveDirection `default:"asc" json:"activeDirection"`
	// The direction of the sort. Can be either `asc` or `desc`.
	//
	DefaultDirection  *GetAllMediaLibraryDefaultDirection `default:"asc" json:"defaultDirection"`
	DescKey           *string                             `json:"descKey,omitempty"`
	FirstCharacterKey *string                             `json:"firstCharacterKey,omitempty"`
	Key               string                              `json:"key"`
	Title             string                              `json:"title"`
}

func (g GetAllMediaLibrarySort) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAllMediaLibrarySort) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAllMediaLibrarySort) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *GetAllMediaLibrarySort) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *GetAllMediaLibrarySort) GetActiveDirection() *GetAllMediaLibraryActiveDirection {
	if o == nil {
		return nil
	}
	return o.ActiveDirection
}

func (o *GetAllMediaLibrarySort) GetDefaultDirection() *GetAllMediaLibraryDefaultDirection {
	if o == nil {
		return nil
	}
	return o.DefaultDirection
}

func (o *GetAllMediaLibrarySort) GetDescKey() *string {
	if o == nil {
		return nil
	}
	return o.DescKey
}

func (o *GetAllMediaLibrarySort) GetFirstCharacterKey() *string {
	if o == nil {
		return nil
	}
	return o.FirstCharacterKey
}

func (o *GetAllMediaLibrarySort) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetAllMediaLibrarySort) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetAllMediaLibraryField struct {
	Key     string  `json:"key"`
	Title   string  `json:"title"`
	Type    string  `json:"type"`
	SubType *string `json:"subType,omitempty"`
}

func (o *GetAllMediaLibraryField) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetAllMediaLibraryField) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAllMediaLibraryField) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetAllMediaLibraryField) GetSubType() *string {
	if o == nil {
		return nil
	}
	return o.SubType
}

type GetAllMediaLibraryType struct {
	Key     string                     `json:"key"`
	Type    string                     `json:"type"`
	Subtype *string                    `json:"subtype,omitempty"`
	Title   string                     `json:"title"`
	Active  bool                       `json:"active"`
	Filter  []GetAllMediaLibraryFilter `json:"Filter,omitempty"`
	Sort    []GetAllMediaLibrarySort   `json:"Sort,omitempty"`
	Field   []GetAllMediaLibraryField  `json:"Field,omitempty"`
}

func (o *GetAllMediaLibraryType) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetAllMediaLibraryType) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetAllMediaLibraryType) GetSubtype() *string {
	if o == nil {
		return nil
	}
	return o.Subtype
}

func (o *GetAllMediaLibraryType) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAllMediaLibraryType) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetAllMediaLibraryType) GetFilter() []GetAllMediaLibraryFilter {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetAllMediaLibraryType) GetSort() []GetAllMediaLibrarySort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *GetAllMediaLibraryType) GetField() []GetAllMediaLibraryField {
	if o == nil {
		return nil
	}
	return o.Field
}

type GetAllMediaLibraryOperator struct {
	Key   string `json:"key"`
	Title string `json:"title"`
}

func (o *GetAllMediaLibraryOperator) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetAllMediaLibraryOperator) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

type GetAllMediaLibraryFieldType struct {
	Type     string                       `json:"type"`
	Operator []GetAllMediaLibraryOperator `json:"Operator"`
}

func (o *GetAllMediaLibraryFieldType) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetAllMediaLibraryFieldType) GetOperator() []GetAllMediaLibraryOperator {
	if o == nil {
		return []GetAllMediaLibraryOperator{}
	}
	return o.Operator
}

// GetAllMediaLibraryMeta - The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
type GetAllMediaLibraryMeta struct {
	Type      []GetAllMediaLibraryType      `json:"Type,omitempty"`
	FieldType []GetAllMediaLibraryFieldType `json:"FieldType,omitempty"`
}

func (o *GetAllMediaLibraryMeta) GetType() []GetAllMediaLibraryType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetAllMediaLibraryMeta) GetFieldType() []GetAllMediaLibraryFieldType {
	if o == nil {
		return nil
	}
	return o.FieldType
}

// GetAllMediaLibraryLibraryType - The type of media content
type GetAllMediaLibraryLibraryType string

const (
	GetAllMediaLibraryLibraryTypeMovie   GetAllMediaLibraryLibraryType = "movie"
	GetAllMediaLibraryLibraryTypeTvShow  GetAllMediaLibraryLibraryType = "show"
	GetAllMediaLibraryLibraryTypeSeason  GetAllMediaLibraryLibraryType = "season"
	GetAllMediaLibraryLibraryTypeEpisode GetAllMediaLibraryLibraryType = "episode"
	GetAllMediaLibraryLibraryTypeArtist  GetAllMediaLibraryLibraryType = "artist"
	GetAllMediaLibraryLibraryTypeAlbum   GetAllMediaLibraryLibraryType = "album"
)

func (e GetAllMediaLibraryLibraryType) ToPointer() *GetAllMediaLibraryLibraryType {
	return &e
}
func (e *GetAllMediaLibraryLibraryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "movie":
		fallthrough
	case "show":
		fallthrough
	case "season":
		fallthrough
	case "episode":
		fallthrough
	case "artist":
		fallthrough
	case "album":
		*e = GetAllMediaLibraryLibraryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryLibraryType: %v", v)
	}
}

type GetAllMediaLibraryLibraryResponseType string

const (
	GetAllMediaLibraryLibraryResponseTypeCoverPoster GetAllMediaLibraryLibraryResponseType = "coverPoster"
	GetAllMediaLibraryLibraryResponseTypeBackground  GetAllMediaLibraryLibraryResponseType = "background"
	GetAllMediaLibraryLibraryResponseTypeSnapshot    GetAllMediaLibraryLibraryResponseType = "snapshot"
	GetAllMediaLibraryLibraryResponseTypeClearLogo   GetAllMediaLibraryLibraryResponseType = "clearLogo"
)

func (e GetAllMediaLibraryLibraryResponseType) ToPointer() *GetAllMediaLibraryLibraryResponseType {
	return &e
}
func (e *GetAllMediaLibraryLibraryResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "coverPoster":
		fallthrough
	case "background":
		fallthrough
	case "snapshot":
		fallthrough
	case "clearLogo":
		*e = GetAllMediaLibraryLibraryResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryLibraryResponseType: %v", v)
	}
}

type GetAllMediaLibraryImage struct {
	Alt  string                                `json:"alt"`
	Type GetAllMediaLibraryLibraryResponseType `json:"type"`
	URL  string                                `json:"url"`
}

func (o *GetAllMediaLibraryImage) GetAlt() string {
	if o == nil {
		return ""
	}
	return o.Alt
}

func (o *GetAllMediaLibraryImage) GetType() GetAllMediaLibraryLibraryResponseType {
	if o == nil {
		return GetAllMediaLibraryLibraryResponseType("")
	}
	return o.Type
}

func (o *GetAllMediaLibraryImage) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetAllMediaLibraryUltraBlurColors struct {
	TopLeft     string `json:"topLeft"`
	TopRight    string `json:"topRight"`
	BottomRight string `json:"bottomRight"`
	BottomLeft  string `json:"bottomLeft"`
}

func (o *GetAllMediaLibraryUltraBlurColors) GetTopLeft() string {
	if o == nil {
		return ""
	}
	return o.TopLeft
}

func (o *GetAllMediaLibraryUltraBlurColors) GetTopRight() string {
	if o == nil {
		return ""
	}
	return o.TopRight
}

func (o *GetAllMediaLibraryUltraBlurColors) GetBottomRight() string {
	if o == nil {
		return ""
	}
	return o.BottomRight
}

func (o *GetAllMediaLibraryUltraBlurColors) GetBottomLeft() string {
	if o == nil {
		return ""
	}
	return o.BottomLeft
}

type OptimizedForStreaming1 int

const (
	OptimizedForStreaming1Zero OptimizedForStreaming1 = 0
	OptimizedForStreaming1One  OptimizedForStreaming1 = 1
)

func (e OptimizedForStreaming1) ToPointer() *OptimizedForStreaming1 {
	return &e
}
func (e *OptimizedForStreaming1) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = OptimizedForStreaming1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OptimizedForStreaming1: %v", v)
	}
}

type GetAllMediaLibraryOptimizedForStreamingType string

const (
	GetAllMediaLibraryOptimizedForStreamingTypeOptimizedForStreaming1 GetAllMediaLibraryOptimizedForStreamingType = "optimizedForStreaming_1"
	GetAllMediaLibraryOptimizedForStreamingTypeBoolean                GetAllMediaLibraryOptimizedForStreamingType = "boolean"
)

// GetAllMediaLibraryOptimizedForStreaming - Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
type GetAllMediaLibraryOptimizedForStreaming struct {
	OptimizedForStreaming1 *OptimizedForStreaming1 `queryParam:"inline"`
	Boolean                *bool                   `queryParam:"inline"`

	Type GetAllMediaLibraryOptimizedForStreamingType
}

func CreateGetAllMediaLibraryOptimizedForStreamingOptimizedForStreaming1(optimizedForStreaming1 OptimizedForStreaming1) GetAllMediaLibraryOptimizedForStreaming {
	typ := GetAllMediaLibraryOptimizedForStreamingTypeOptimizedForStreaming1

	return GetAllMediaLibraryOptimizedForStreaming{
		OptimizedForStreaming1: &optimizedForStreaming1,
		Type:                   typ,
	}
}

func CreateGetAllMediaLibraryOptimizedForStreamingBoolean(boolean bool) GetAllMediaLibraryOptimizedForStreaming {
	typ := GetAllMediaLibraryOptimizedForStreamingTypeBoolean

	return GetAllMediaLibraryOptimizedForStreaming{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetAllMediaLibraryOptimizedForStreaming) UnmarshalJSON(data []byte) error {

	var optimizedForStreaming1 OptimizedForStreaming1 = OptimizedForStreaming1(0)
	if err := utils.UnmarshalJSON(data, &optimizedForStreaming1, "", true, true); err == nil {
		u.OptimizedForStreaming1 = &optimizedForStreaming1
		u.Type = GetAllMediaLibraryOptimizedForStreamingTypeOptimizedForStreaming1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetAllMediaLibraryOptimizedForStreamingTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetAllMediaLibraryOptimizedForStreaming", string(data))
}

func (u GetAllMediaLibraryOptimizedForStreaming) MarshalJSON() ([]byte, error) {
	if u.OptimizedForStreaming1 != nil {
		return utils.MarshalJSON(u.OptimizedForStreaming1, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetAllMediaLibraryOptimizedForStreaming: all fields are null")
}

type GetAllMediaLibraryOptimizedForStreaming1 int

const (
	GetAllMediaLibraryOptimizedForStreaming1Zero GetAllMediaLibraryOptimizedForStreaming1 = 0
	GetAllMediaLibraryOptimizedForStreaming1One  GetAllMediaLibraryOptimizedForStreaming1 = 1
)

func (e GetAllMediaLibraryOptimizedForStreaming1) ToPointer() *GetAllMediaLibraryOptimizedForStreaming1 {
	return &e
}
func (e *GetAllMediaLibraryOptimizedForStreaming1) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetAllMediaLibraryOptimizedForStreaming1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryOptimizedForStreaming1: %v", v)
	}
}

type GetAllMediaLibraryLibraryOptimizedForStreamingType string

const (
	GetAllMediaLibraryLibraryOptimizedForStreamingTypeGetAllMediaLibraryOptimizedForStreaming1 GetAllMediaLibraryLibraryOptimizedForStreamingType = "get-all-media-library_optimizedForStreaming_1"
	GetAllMediaLibraryLibraryOptimizedForStreamingTypeBoolean                                  GetAllMediaLibraryLibraryOptimizedForStreamingType = "boolean"
)

// GetAllMediaLibraryLibraryOptimizedForStreaming - Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
type GetAllMediaLibraryLibraryOptimizedForStreaming struct {
	GetAllMediaLibraryOptimizedForStreaming1 *GetAllMediaLibraryOptimizedForStreaming1 `queryParam:"inline"`
	Boolean                                  *bool                                     `queryParam:"inline"`

	Type GetAllMediaLibraryLibraryOptimizedForStreamingType
}

func CreateGetAllMediaLibraryLibraryOptimizedForStreamingGetAllMediaLibraryOptimizedForStreaming1(getAllMediaLibraryOptimizedForStreaming1 GetAllMediaLibraryOptimizedForStreaming1) GetAllMediaLibraryLibraryOptimizedForStreaming {
	typ := GetAllMediaLibraryLibraryOptimizedForStreamingTypeGetAllMediaLibraryOptimizedForStreaming1

	return GetAllMediaLibraryLibraryOptimizedForStreaming{
		GetAllMediaLibraryOptimizedForStreaming1: &getAllMediaLibraryOptimizedForStreaming1,
		Type:                                     typ,
	}
}

func CreateGetAllMediaLibraryLibraryOptimizedForStreamingBoolean(boolean bool) GetAllMediaLibraryLibraryOptimizedForStreaming {
	typ := GetAllMediaLibraryLibraryOptimizedForStreamingTypeBoolean

	return GetAllMediaLibraryLibraryOptimizedForStreaming{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetAllMediaLibraryLibraryOptimizedForStreaming) UnmarshalJSON(data []byte) error {

	var getAllMediaLibraryOptimizedForStreaming1 GetAllMediaLibraryOptimizedForStreaming1 = GetAllMediaLibraryOptimizedForStreaming1(0)
	if err := utils.UnmarshalJSON(data, &getAllMediaLibraryOptimizedForStreaming1, "", true, true); err == nil {
		u.GetAllMediaLibraryOptimizedForStreaming1 = &getAllMediaLibraryOptimizedForStreaming1
		u.Type = GetAllMediaLibraryLibraryOptimizedForStreamingTypeGetAllMediaLibraryOptimizedForStreaming1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetAllMediaLibraryLibraryOptimizedForStreamingTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetAllMediaLibraryLibraryOptimizedForStreaming", string(data))
}

func (u GetAllMediaLibraryLibraryOptimizedForStreaming) MarshalJSON() ([]byte, error) {
	if u.GetAllMediaLibraryOptimizedForStreaming1 != nil {
		return utils.MarshalJSON(u.GetAllMediaLibraryOptimizedForStreaming1, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetAllMediaLibraryLibraryOptimizedForStreaming: all fields are null")
}

// GetAllMediaLibraryHasThumbnail - Indicates if the part has a thumbnail.
type GetAllMediaLibraryHasThumbnail string

const (
	GetAllMediaLibraryHasThumbnailFalse GetAllMediaLibraryHasThumbnail = "0"
	GetAllMediaLibraryHasThumbnailTrue  GetAllMediaLibraryHasThumbnail = "1"
)

func (e GetAllMediaLibraryHasThumbnail) ToPointer() *GetAllMediaLibraryHasThumbnail {
	return &e
}
func (e *GetAllMediaLibraryHasThumbnail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		*e = GetAllMediaLibraryHasThumbnail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllMediaLibraryHasThumbnail: %v", v)
	}
}

type GetAllMediaLibraryStream struct {
	// Unique stream identifier.
	ID int64 `json:"id"`
	// Stream type (1=video, 2=audio, 3=subtitle).
	StreamType int `json:"streamType"`
	// Indicates if this stream is default.
	Default *bool `json:"default,omitempty"`
	// Codec used by the stream.
	Codec string `json:"codec"`
	// Index of the stream.
	Index int `json:"index"`
	// Bitrate of the stream.
	Bitrate *int `json:"bitrate,omitempty"`
	// Language of the stream.
	Language *string `json:"language,omitempty"`
	// Language tag (e.g., en).
	LanguageTag *string `json:"languageTag,omitempty"`
	// ISO language code.
	LanguageCode *string `json:"languageCode,omitempty"`
	// Indicates whether header compression is enabled.
	HeaderCompression *bool `json:"headerCompression,omitempty"`
	// Dolby Vision BL compatibility ID.
	DOVIBLCompatID *int `json:"DOVIBLCompatID,omitempty"`
	// Indicates if Dolby Vision BL is present.
	DOVIBLPresent *bool `json:"DOVIBLPresent,omitempty"`
	// Indicates if Dolby Vision EL is present.
	DOVIELPresent *bool `json:"DOVIELPresent,omitempty"`
	// Dolby Vision level.
	DOVILevel *int `json:"DOVILevel,omitempty"`
	// Indicates if Dolby Vision is present.
	DOVIPresent *bool `json:"DOVIPresent,omitempty"`
	// Dolby Vision profile.
	DOVIProfile *int `json:"DOVIProfile,omitempty"`
	// Indicates if Dolby Vision RPU is present.
	DOVIRPUPresent *bool `json:"DOVIRPUPresent,omitempty"`
	// Dolby Vision version.
	DOVIVersion *string `json:"DOVIVersion,omitempty"`
	// Bit depth of the video stream.
	BitDepth *int `json:"bitDepth,omitempty"`
	// Chroma sample location.
	ChromaLocation *string `json:"chromaLocation,omitempty"`
	// Chroma subsampling format.
	ChromaSubsampling *string `json:"chromaSubsampling,omitempty"`
	// Coded video height.
	CodedHeight *int `json:"codedHeight,omitempty"`
	// Coded video width.
	CodedWidth     *int  `json:"codedWidth,omitempty"`
	ClosedCaptions *bool `json:"closedCaptions,omitempty"`
	// Color primaries used.
	ColorPrimaries *string `json:"colorPrimaries,omitempty"`
	// Color range (e.g., tv).
	ColorRange *string `json:"colorRange,omitempty"`
	// Color space.
	ColorSpace *string `json:"colorSpace,omitempty"`
	// Color transfer characteristics.
	ColorTrc *string `json:"colorTrc,omitempty"`
	// Frame rate of the stream.
	FrameRate *float32 `json:"frameRate,omitempty"`
	// Height of the video stream.
	Height *int `json:"height,omitempty"`
	// Video level.
	Level *int `json:"level,omitempty"`
	// Indicates if this is the original stream.
	Original         *bool `json:"original,omitempty"`
	HasScalingMatrix *bool `json:"hasScalingMatrix,omitempty"`
	// Video profile.
	Profile         *string `json:"profile,omitempty"`
	ScanType        *string `json:"scanType,omitempty"`
	EmbeddedInVideo *string `json:"embeddedInVideo,omitempty"`
	// Number of reference frames.
	RefFrames *int `json:"refFrames,omitempty"`
	// Width of the video stream.
	Width *int `json:"width,omitempty"`
	// Display title for the stream.
	DisplayTitle string `json:"displayTitle"`
	// Extended display title for the stream.
	ExtendedDisplayTitle string `json:"extendedDisplayTitle"`
	// Indicates if this stream is selected (applicable for audio streams).
	Selected *bool `json:"selected,omitempty"`
	Forced   *bool `json:"forced,omitempty"`
	// Number of audio channels (for audio streams).
	Channels *int `json:"channels,omitempty"`
	// Audio channel layout.
	AudioChannelLayout *string `json:"audioChannelLayout,omitempty"`
	// Sampling rate for the audio stream.
	SamplingRate *int `json:"samplingRate,omitempty"`
	// Indicates if the stream can auto-sync.
	CanAutoSync *bool `json:"canAutoSync,omitempty"`
	// Indicates if the stream is for the hearing impaired.
	HearingImpaired *bool `json:"hearingImpaired,omitempty"`
	// Indicates if the stream is a dub.
	Dub *bool `json:"dub,omitempty"`
	// Optional title for the stream (e.g., language variant).
	Title *string `json:"title,omitempty"`
}

func (o *GetAllMediaLibraryStream) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetAllMediaLibraryStream) GetStreamType() int {
	if o == nil {
		return 0
	}
	return o.StreamType
}

func (o *GetAllMediaLibraryStream) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *GetAllMediaLibraryStream) GetCodec() string {
	if o == nil {
		return ""
	}
	return o.Codec
}

func (o *GetAllMediaLibraryStream) GetIndex() int {
	if o == nil {
		return 0
	}
	return o.Index
}

func (o *GetAllMediaLibraryStream) GetBitrate() *int {
	if o == nil {
		return nil
	}
	return o.Bitrate
}

func (o *GetAllMediaLibraryStream) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *GetAllMediaLibraryStream) GetLanguageTag() *string {
	if o == nil {
		return nil
	}
	return o.LanguageTag
}

func (o *GetAllMediaLibraryStream) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *GetAllMediaLibraryStream) GetHeaderCompression() *bool {
	if o == nil {
		return nil
	}
	return o.HeaderCompression
}

func (o *GetAllMediaLibraryStream) GetDOVIBLCompatID() *int {
	if o == nil {
		return nil
	}
	return o.DOVIBLCompatID
}

func (o *GetAllMediaLibraryStream) GetDOVIBLPresent() *bool {
	if o == nil {
		return nil
	}
	return o.DOVIBLPresent
}

func (o *GetAllMediaLibraryStream) GetDOVIELPresent() *bool {
	if o == nil {
		return nil
	}
	return o.DOVIELPresent
}

func (o *GetAllMediaLibraryStream) GetDOVILevel() *int {
	if o == nil {
		return nil
	}
	return o.DOVILevel
}

func (o *GetAllMediaLibraryStream) GetDOVIPresent() *bool {
	if o == nil {
		return nil
	}
	return o.DOVIPresent
}

func (o *GetAllMediaLibraryStream) GetDOVIProfile() *int {
	if o == nil {
		return nil
	}
	return o.DOVIProfile
}

func (o *GetAllMediaLibraryStream) GetDOVIRPUPresent() *bool {
	if o == nil {
		return nil
	}
	return o.DOVIRPUPresent
}

func (o *GetAllMediaLibraryStream) GetDOVIVersion() *string {
	if o == nil {
		return nil
	}
	return o.DOVIVersion
}

func (o *GetAllMediaLibraryStream) GetBitDepth() *int {
	if o == nil {
		return nil
	}
	return o.BitDepth
}

func (o *GetAllMediaLibraryStream) GetChromaLocation() *string {
	if o == nil {
		return nil
	}
	return o.ChromaLocation
}

func (o *GetAllMediaLibraryStream) GetChromaSubsampling() *string {
	if o == nil {
		return nil
	}
	return o.ChromaSubsampling
}

func (o *GetAllMediaLibraryStream) GetCodedHeight() *int {
	if o == nil {
		return nil
	}
	return o.CodedHeight
}

func (o *GetAllMediaLibraryStream) GetCodedWidth() *int {
	if o == nil {
		return nil
	}
	return o.CodedWidth
}

func (o *GetAllMediaLibraryStream) GetClosedCaptions() *bool {
	if o == nil {
		return nil
	}
	return o.ClosedCaptions
}

func (o *GetAllMediaLibraryStream) GetColorPrimaries() *string {
	if o == nil {
		return nil
	}
	return o.ColorPrimaries
}

func (o *GetAllMediaLibraryStream) GetColorRange() *string {
	if o == nil {
		return nil
	}
	return o.ColorRange
}

func (o *GetAllMediaLibraryStream) GetColorSpace() *string {
	if o == nil {
		return nil
	}
	return o.ColorSpace
}

func (o *GetAllMediaLibraryStream) GetColorTrc() *string {
	if o == nil {
		return nil
	}
	return o.ColorTrc
}

func (o *GetAllMediaLibraryStream) GetFrameRate() *float32 {
	if o == nil {
		return nil
	}
	return o.FrameRate
}

func (o *GetAllMediaLibraryStream) GetHeight() *int {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *GetAllMediaLibraryStream) GetLevel() *int {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *GetAllMediaLibraryStream) GetOriginal() *bool {
	if o == nil {
		return nil
	}
	return o.Original
}

func (o *GetAllMediaLibraryStream) GetHasScalingMatrix() *bool {
	if o == nil {
		return nil
	}
	return o.HasScalingMatrix
}

func (o *GetAllMediaLibraryStream) GetProfile() *string {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *GetAllMediaLibraryStream) GetScanType() *string {
	if o == nil {
		return nil
	}
	return o.ScanType
}

func (o *GetAllMediaLibraryStream) GetEmbeddedInVideo() *string {
	if o == nil {
		return nil
	}
	return o.EmbeddedInVideo
}

func (o *GetAllMediaLibraryStream) GetRefFrames() *int {
	if o == nil {
		return nil
	}
	return o.RefFrames
}

func (o *GetAllMediaLibraryStream) GetWidth() *int {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *GetAllMediaLibraryStream) GetDisplayTitle() string {
	if o == nil {
		return ""
	}
	return o.DisplayTitle
}

func (o *GetAllMediaLibraryStream) GetExtendedDisplayTitle() string {
	if o == nil {
		return ""
	}
	return o.ExtendedDisplayTitle
}

func (o *GetAllMediaLibraryStream) GetSelected() *bool {
	if o == nil {
		return nil
	}
	return o.Selected
}

func (o *GetAllMediaLibraryStream) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetAllMediaLibraryStream) GetChannels() *int {
	if o == nil {
		return nil
	}
	return o.Channels
}

func (o *GetAllMediaLibraryStream) GetAudioChannelLayout() *string {
	if o == nil {
		return nil
	}
	return o.AudioChannelLayout
}

func (o *GetAllMediaLibraryStream) GetSamplingRate() *int {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *GetAllMediaLibraryStream) GetCanAutoSync() *bool {
	if o == nil {
		return nil
	}
	return o.CanAutoSync
}

func (o *GetAllMediaLibraryStream) GetHearingImpaired() *bool {
	if o == nil {
		return nil
	}
	return o.HearingImpaired
}

func (o *GetAllMediaLibraryStream) GetDub() *bool {
	if o == nil {
		return nil
	}
	return o.Dub
}

func (o *GetAllMediaLibraryStream) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type GetAllMediaLibraryPart struct {
	// Indicates if the part is accessible.
	Accessible *bool `json:"accessible,omitempty"`
	// Indicates if the part exists.
	Exists *bool `json:"exists,omitempty"`
	// Unique part identifier.
	ID int64 `json:"id"`
	// Key to access this part.
	Key     string  `json:"key"`
	Indexes *string `json:"indexes,omitempty"`
	// Duration of the part in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// File path for the part.
	File string `json:"file"`
	// File size in bytes.
	Size         int64 `json:"size"`
	PacketLength *int  `json:"packetLength,omitempty"`
	// Container format of the part.
	Container *string `json:"container,omitempty"`
	// Video profile for the part.
	VideoProfile *string `json:"videoProfile,omitempty"`
	// The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
	AudioProfile    *string `json:"audioProfile,omitempty"`
	Has64bitOffsets *bool   `json:"has64bitOffsets,omitempty"`
	// Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
	OptimizedForStreaming *GetAllMediaLibraryLibraryOptimizedForStreaming `json:"optimizedForStreaming,omitempty"`
	HasThumbnail          *GetAllMediaLibraryHasThumbnail                 `default:"0" json:"hasThumbnail"`
	// An array of streams for this part.
	Stream []GetAllMediaLibraryStream `json:"Stream,omitempty"`
}

func (g GetAllMediaLibraryPart) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAllMediaLibraryPart) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAllMediaLibraryPart) GetAccessible() *bool {
	if o == nil {
		return nil
	}
	return o.Accessible
}

func (o *GetAllMediaLibraryPart) GetExists() *bool {
	if o == nil {
		return nil
	}
	return o.Exists
}

func (o *GetAllMediaLibraryPart) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetAllMediaLibraryPart) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetAllMediaLibraryPart) GetIndexes() *string {
	if o == nil {
		return nil
	}
	return o.Indexes
}

func (o *GetAllMediaLibraryPart) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetAllMediaLibraryPart) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

func (o *GetAllMediaLibraryPart) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *GetAllMediaLibraryPart) GetPacketLength() *int {
	if o == nil {
		return nil
	}
	return o.PacketLength
}

func (o *GetAllMediaLibraryPart) GetContainer() *string {
	if o == nil {
		return nil
	}
	return o.Container
}

func (o *GetAllMediaLibraryPart) GetVideoProfile() *string {
	if o == nil {
		return nil
	}
	return o.VideoProfile
}

func (o *GetAllMediaLibraryPart) GetAudioProfile() *string {
	if o == nil {
		return nil
	}
	return o.AudioProfile
}

func (o *GetAllMediaLibraryPart) GetHas64bitOffsets() *bool {
	if o == nil {
		return nil
	}
	return o.Has64bitOffsets
}

func (o *GetAllMediaLibraryPart) GetOptimizedForStreaming() *GetAllMediaLibraryLibraryOptimizedForStreaming {
	if o == nil {
		return nil
	}
	return o.OptimizedForStreaming
}

func (o *GetAllMediaLibraryPart) GetHasThumbnail() *GetAllMediaLibraryHasThumbnail {
	if o == nil {
		return nil
	}
	return o.HasThumbnail
}

func (o *GetAllMediaLibraryPart) GetStream() []GetAllMediaLibraryStream {
	if o == nil {
		return nil
	}
	return o.Stream
}

type GetAllMediaLibraryMedia struct {
	// Unique media identifier.
	ID int64 `json:"id"`
	// Duration of the media in milliseconds.
	Duration *int `json:"duration,omitempty"`
	// Bitrate in bits per second.
	Bitrate *int `json:"bitrate,omitempty"`
	// Video width in pixels.
	Width *int `json:"width,omitempty"`
	// Video height in pixels.
	Height *int `json:"height,omitempty"`
	// Aspect ratio of the video.
	AspectRatio *float32 `json:"aspectRatio,omitempty"`
	// Number of audio channels.
	AudioChannels *int `json:"audioChannels,omitempty"`
	DisplayOffset *int `json:"displayOffset,omitempty"`
	// Audio codec used.
	AudioCodec *string `json:"audioCodec,omitempty"`
	// Video codec used.
	VideoCodec *string `json:"videoCodec,omitempty"`
	// Video resolution (e.g., 4k).
	VideoResolution *string `json:"videoResolution,omitempty"`
	// File container type.
	Container *string `json:"container,omitempty"`
	// Frame rate of the video. Values found include NTSC, PAL, 24p
	//
	VideoFrameRate *string `json:"videoFrameRate,omitempty"`
	// Video profile (e.g., main 10).
	VideoProfile *string `json:"videoProfile,omitempty"`
	// Indicates whether voice activity is detected.
	HasVoiceActivity *bool `json:"hasVoiceActivity,omitempty"`
	// The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
	AudioProfile *string `json:"audioProfile,omitempty"`
	// Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
	OptimizedForStreaming *GetAllMediaLibraryOptimizedForStreaming `json:"optimizedForStreaming,omitempty"`
	Has64bitOffsets       *bool                                    `json:"has64bitOffsets,omitempty"`
	// An array of parts for this media item.
	Part []GetAllMediaLibraryPart `json:"Part,omitempty"`
}

func (o *GetAllMediaLibraryMedia) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GetAllMediaLibraryMedia) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *GetAllMediaLibraryMedia) GetBitrate() *int {
	if o == nil {
		return nil
	}
	return o.Bitrate
}

func (o *GetAllMediaLibraryMedia) GetWidth() *int {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *GetAllMediaLibraryMedia) GetHeight() *int {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *GetAllMediaLibraryMedia) GetAspectRatio() *float32 {
	if o == nil {
		return nil
	}
	return o.AspectRatio
}

func (o *GetAllMediaLibraryMedia) GetAudioChannels() *int {
	if o == nil {
		return nil
	}
	return o.AudioChannels
}

func (o *GetAllMediaLibraryMedia) GetDisplayOffset() *int {
	if o == nil {
		return nil
	}
	return o.DisplayOffset
}

func (o *GetAllMediaLibraryMedia) GetAudioCodec() *string {
	if o == nil {
		return nil
	}
	return o.AudioCodec
}

func (o *GetAllMediaLibraryMedia) GetVideoCodec() *string {
	if o == nil {
		return nil
	}
	return o.VideoCodec
}

func (o *GetAllMediaLibraryMedia) GetVideoResolution() *string {
	if o == nil {
		return nil
	}
	return o.VideoResolution
}

func (o *GetAllMediaLibraryMedia) GetContainer() *string {
	if o == nil {
		return nil
	}
	return o.Container
}

func (o *GetAllMediaLibraryMedia) GetVideoFrameRate() *string {
	if o == nil {
		return nil
	}
	return o.VideoFrameRate
}

func (o *GetAllMediaLibraryMedia) GetVideoProfile() *string {
	if o == nil {
		return nil
	}
	return o.VideoProfile
}

func (o *GetAllMediaLibraryMedia) GetHasVoiceActivity() *bool {
	if o == nil {
		return nil
	}
	return o.HasVoiceActivity
}

func (o *GetAllMediaLibraryMedia) GetAudioProfile() *string {
	if o == nil {
		return nil
	}
	return o.AudioProfile
}

func (o *GetAllMediaLibraryMedia) GetOptimizedForStreaming() *GetAllMediaLibraryOptimizedForStreaming {
	if o == nil {
		return nil
	}
	return o.OptimizedForStreaming
}

func (o *GetAllMediaLibraryMedia) GetHas64bitOffsets() *bool {
	if o == nil {
		return nil
	}
	return o.Has64bitOffsets
}

func (o *GetAllMediaLibraryMedia) GetPart() []GetAllMediaLibraryPart {
	if o == nil {
		return nil
	}
	return o.Part
}

type GetAllMediaLibraryGenre struct {
	// The genre name of this media-item
	//
	Tag string `json:"tag"`
}

func (o *GetAllMediaLibraryGenre) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type GetAllMediaLibraryCountry struct {
	// The country of origin of this media item
	Tag string `json:"tag"`
}

func (o *GetAllMediaLibraryCountry) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type GetAllMediaLibraryDirector struct {
	// The role of Director
	Tag string `json:"tag"`
}

func (o *GetAllMediaLibraryDirector) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type GetAllMediaLibraryWriter struct {
	// The role of Writer
	Tag string `json:"tag"`
}

func (o *GetAllMediaLibraryWriter) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type GetAllMediaLibraryRole struct {
	// The display tag for the actor (typically the actor's name).
	Tag string `json:"tag"`
}

func (o *GetAllMediaLibraryRole) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type GetAllMediaLibraryGuids struct {
	// The unique identifier for the Guid. Can be imdb://tt0286347, tmdb://1763, tvdb://2337
	//
	ID *string `json:"id,omitempty"`
}

func (o *GetAllMediaLibraryGuids) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type GetAllMediaLibraryCollection struct {
	// The user-made collection this media item belongs to
	Tag string `json:"tag"`
}

func (o *GetAllMediaLibraryCollection) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

// GetAllMediaLibraryMetadata - Unknown
type GetAllMediaLibraryMetadata struct {
	// The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
	RatingKey string `json:"ratingKey"`
	// The unique key for the media item.
	Key string `json:"key"`
	// The globally unique identifier for the media item.
	GUID string `json:"guid"`
	// A URL‐friendly version of the media title.
	Slug string `json:"slug"`
	// The studio that produced the media item.
	Studio *string                       `json:"studio,omitempty"`
	Type   GetAllMediaLibraryLibraryType `json:"type"`
	// The title of the media item.
	Title string `json:"title"`
	// The sort title used for ordering media items.
	TitleSort string `json:"titleSort"`
	// The content rating for the media item.
	ContentRating *string `json:"contentRating,omitempty"`
	// A synopsis of the media item.
	Summary string `json:"summary"`
	// The critic rating for the media item.
	Rating float32 `json:"rating"`
	// The audience rating for the media item.
	AudienceRating float64 `json:"audienceRating"`
	// The release year of the media item.
	Year *int `json:"year,omitempty"`
	// A brief tagline for the media item.
	Tagline string `json:"tagline"`
	// The thumbnail image URL for the media item.
	Thumb string `json:"thumb"`
	// The art image URL for the media item.
	Art string `json:"art"`
	// The theme URL for the media item.
	Theme string `json:"theme"`
	// The index position of the media item.
	Index int `json:"index"`
	// The number of leaf items (end nodes) under this media item.
	LeafCount *int `json:"leafCount,omitempty"`
	// The number of leaf items that have been viewed.
	ViewedLeafCount *int `json:"viewedLeafCount,omitempty"`
	// The number of child items associated with this media item.
	ChildCount int `json:"childCount"`
	// The total number of seasons (for TV shows).
	SeasonCount int `json:"seasonCount"`
	// The duration of the media item in milliseconds.
	Duration int `json:"duration"`
	// The original release date of the media item.
	OriginallyAvailableAt types.Date `json:"originallyAvailableAt"`
	AddedAt               int64      `json:"addedAt"`
	// Unix epoch datetime in seconds
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
	// The URL for the audience rating image.
	AudienceRatingImage *string `json:"audienceRatingImage,omitempty"`
	// The source from which chapter data is derived.
	ChapterSource *string `json:"chapterSource,omitempty"`
	// The primary extra key associated with this media item.
	PrimaryExtraKey *string `json:"primaryExtraKey,omitempty"`
	// The original title of the media item (if different).
	OriginalTitle *string `json:"originalTitle,omitempty"`
	// The rating key of the parent media item.
	ParentRatingKey *string `json:"parentRatingKey,omitempty"`
	// The rating key of the grandparent media item.
	GrandparentRatingKey *string `json:"grandparentRatingKey,omitempty"`
	// The GUID of the parent media item.
	ParentGUID *string `json:"parentGuid,omitempty"`
	// The GUID of the grandparent media item.
	GrandparentGUID *string `json:"grandparentGuid,omitempty"`
	// The slug for the grandparent media item.
	GrandparentSlug *string `json:"grandparentSlug,omitempty"`
	// The key of the grandparent media item.
	GrandparentKey *string `json:"grandparentKey,omitempty"`
	// The key of the parent media item.
	ParentKey *string `json:"parentKey,omitempty"`
	// The title of the grandparent media item.
	GrandparentTitle *string `json:"grandparentTitle,omitempty"`
	// The thumbnail URL for the grandparent media item.
	GrandparentThumb *string `json:"grandparentThumb,omitempty"`
	// The theme URL for the grandparent media item.
	GrandparentTheme *string `json:"grandparentTheme,omitempty"`
	// The art URL for the grandparent media item.
	GrandparentArt *string `json:"grandparentArt,omitempty"`
	// The title of the parent media item.
	ParentTitle *string `json:"parentTitle,omitempty"`
	// The index position of the parent media item.
	ParentIndex *int `json:"parentIndex,omitempty"`
	// The thumbnail URL for the parent media item.
	ParentThumb *string `json:"parentThumb,omitempty"`
	// The URL for the rating image.
	RatingImage *string `json:"ratingImage,omitempty"`
	// The number of times this media item has been viewed.
	ViewCount *int `json:"viewCount,omitempty"`
	// The current playback offset (in milliseconds).
	ViewOffset *int `json:"viewOffset,omitempty"`
	// The number of times this media item has been skipped.
	SkipCount *int `json:"skipCount,omitempty"`
	// A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
	Subtype *string `json:"subtype,omitempty"`
	// The Unix timestamp representing the last time the item was rated.
	LastRatedAt *int64 `json:"lastRatedAt,omitempty"`
	// The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
	CreatedAtAccuracy *string `json:"createdAtAccuracy,omitempty"`
	// The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
	CreatedAtTZOffset *string `json:"createdAtTZOffset,omitempty"`
	// Unix timestamp for when the media item was last viewed.
	LastViewedAt *int `json:"lastViewedAt,omitempty"`
	// The rating provided by a user for the item. This value is expressed as a decimal number.
	UserRating      *float32                           `json:"userRating,omitempty"`
	Image           []GetAllMediaLibraryImage          `json:"Image,omitempty"`
	UltraBlurColors *GetAllMediaLibraryUltraBlurColors `json:"UltraBlurColors,omitempty"`
	Media           []GetAllMediaLibraryMedia          `json:"Media,omitempty"`
	Genre           []GetAllMediaLibraryGenre          `json:"Genre,omitempty"`
	Country         []GetAllMediaLibraryCountry        `json:"Country,omitempty"`
	Director        []GetAllMediaLibraryDirector       `json:"Director,omitempty"`
	Writer          []GetAllMediaLibraryWriter         `json:"Writer,omitempty"`
	Role            []GetAllMediaLibraryRole           `json:"Role,omitempty"`
	Guids           []GetAllMediaLibraryGuids          `json:"Guid,omitempty"`
	Collection      []GetAllMediaLibraryCollection     `json:"Collection,omitempty"`
}

func (g GetAllMediaLibraryMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAllMediaLibraryMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAllMediaLibraryMetadata) GetRatingKey() string {
	if o == nil {
		return ""
	}
	return o.RatingKey
}

func (o *GetAllMediaLibraryMetadata) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetAllMediaLibraryMetadata) GetGUID() string {
	if o == nil {
		return ""
	}
	return o.GUID
}

func (o *GetAllMediaLibraryMetadata) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetAllMediaLibraryMetadata) GetStudio() *string {
	if o == nil {
		return nil
	}
	return o.Studio
}

func (o *GetAllMediaLibraryMetadata) GetType() GetAllMediaLibraryLibraryType {
	if o == nil {
		return GetAllMediaLibraryLibraryType("")
	}
	return o.Type
}

func (o *GetAllMediaLibraryMetadata) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetAllMediaLibraryMetadata) GetTitleSort() string {
	if o == nil {
		return ""
	}
	return o.TitleSort
}

func (o *GetAllMediaLibraryMetadata) GetContentRating() *string {
	if o == nil {
		return nil
	}
	return o.ContentRating
}

func (o *GetAllMediaLibraryMetadata) GetSummary() string {
	if o == nil {
		return ""
	}
	return o.Summary
}

func (o *GetAllMediaLibraryMetadata) GetRating() float32 {
	if o == nil {
		return 0.0
	}
	return o.Rating
}

func (o *GetAllMediaLibraryMetadata) GetAudienceRating() float64 {
	if o == nil {
		return 0.0
	}
	return o.AudienceRating
}

func (o *GetAllMediaLibraryMetadata) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

func (o *GetAllMediaLibraryMetadata) GetTagline() string {
	if o == nil {
		return ""
	}
	return o.Tagline
}

func (o *GetAllMediaLibraryMetadata) GetThumb() string {
	if o == nil {
		return ""
	}
	return o.Thumb
}

func (o *GetAllMediaLibraryMetadata) GetArt() string {
	if o == nil {
		return ""
	}
	return o.Art
}

func (o *GetAllMediaLibraryMetadata) GetTheme() string {
	if o == nil {
		return ""
	}
	return o.Theme
}

func (o *GetAllMediaLibraryMetadata) GetIndex() int {
	if o == nil {
		return 0
	}
	return o.Index
}

func (o *GetAllMediaLibraryMetadata) GetLeafCount() *int {
	if o == nil {
		return nil
	}
	return o.LeafCount
}

func (o *GetAllMediaLibraryMetadata) GetViewedLeafCount() *int {
	if o == nil {
		return nil
	}
	return o.ViewedLeafCount
}

func (o *GetAllMediaLibraryMetadata) GetChildCount() int {
	if o == nil {
		return 0
	}
	return o.ChildCount
}

func (o *GetAllMediaLibraryMetadata) GetSeasonCount() int {
	if o == nil {
		return 0
	}
	return o.SeasonCount
}

func (o *GetAllMediaLibraryMetadata) GetDuration() int {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *GetAllMediaLibraryMetadata) GetOriginallyAvailableAt() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.OriginallyAvailableAt
}

func (o *GetAllMediaLibraryMetadata) GetAddedAt() int64 {
	if o == nil {
		return 0
	}
	return o.AddedAt
}

func (o *GetAllMediaLibraryMetadata) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetAllMediaLibraryMetadata) GetAudienceRatingImage() *string {
	if o == nil {
		return nil
	}
	return o.AudienceRatingImage
}

func (o *GetAllMediaLibraryMetadata) GetChapterSource() *string {
	if o == nil {
		return nil
	}
	return o.ChapterSource
}

func (o *GetAllMediaLibraryMetadata) GetPrimaryExtraKey() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryExtraKey
}

func (o *GetAllMediaLibraryMetadata) GetOriginalTitle() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTitle
}

func (o *GetAllMediaLibraryMetadata) GetParentRatingKey() *string {
	if o == nil {
		return nil
	}
	return o.ParentRatingKey
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentRatingKey() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentRatingKey
}

func (o *GetAllMediaLibraryMetadata) GetParentGUID() *string {
	if o == nil {
		return nil
	}
	return o.ParentGUID
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentGUID() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentGUID
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentSlug() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentSlug
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentKey() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentKey
}

func (o *GetAllMediaLibraryMetadata) GetParentKey() *string {
	if o == nil {
		return nil
	}
	return o.ParentKey
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentTitle() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentTitle
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentThumb() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentThumb
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentTheme() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentTheme
}

func (o *GetAllMediaLibraryMetadata) GetGrandparentArt() *string {
	if o == nil {
		return nil
	}
	return o.GrandparentArt
}

func (o *GetAllMediaLibraryMetadata) GetParentTitle() *string {
	if o == nil {
		return nil
	}
	return o.ParentTitle
}

func (o *GetAllMediaLibraryMetadata) GetParentIndex() *int {
	if o == nil {
		return nil
	}
	return o.ParentIndex
}

func (o *GetAllMediaLibraryMetadata) GetParentThumb() *string {
	if o == nil {
		return nil
	}
	return o.ParentThumb
}

func (o *GetAllMediaLibraryMetadata) GetRatingImage() *string {
	if o == nil {
		return nil
	}
	return o.RatingImage
}

func (o *GetAllMediaLibraryMetadata) GetViewCount() *int {
	if o == nil {
		return nil
	}
	return o.ViewCount
}

func (o *GetAllMediaLibraryMetadata) GetViewOffset() *int {
	if o == nil {
		return nil
	}
	return o.ViewOffset
}

func (o *GetAllMediaLibraryMetadata) GetSkipCount() *int {
	if o == nil {
		return nil
	}
	return o.SkipCount
}

func (o *GetAllMediaLibraryMetadata) GetSubtype() *string {
	if o == nil {
		return nil
	}
	return o.Subtype
}

func (o *GetAllMediaLibraryMetadata) GetLastRatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.LastRatedAt
}

func (o *GetAllMediaLibraryMetadata) GetCreatedAtAccuracy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAtAccuracy
}

func (o *GetAllMediaLibraryMetadata) GetCreatedAtTZOffset() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAtTZOffset
}

func (o *GetAllMediaLibraryMetadata) GetLastViewedAt() *int {
	if o == nil {
		return nil
	}
	return o.LastViewedAt
}

func (o *GetAllMediaLibraryMetadata) GetUserRating() *float32 {
	if o == nil {
		return nil
	}
	return o.UserRating
}

func (o *GetAllMediaLibraryMetadata) GetImage() []GetAllMediaLibraryImage {
	if o == nil {
		return nil
	}
	return o.Image
}

func (o *GetAllMediaLibraryMetadata) GetUltraBlurColors() *GetAllMediaLibraryUltraBlurColors {
	if o == nil {
		return nil
	}
	return o.UltraBlurColors
}

func (o *GetAllMediaLibraryMetadata) GetMedia() []GetAllMediaLibraryMedia {
	if o == nil {
		return nil
	}
	return o.Media
}

func (o *GetAllMediaLibraryMetadata) GetGenre() []GetAllMediaLibraryGenre {
	if o == nil {
		return nil
	}
	return o.Genre
}

func (o *GetAllMediaLibraryMetadata) GetCountry() []GetAllMediaLibraryCountry {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *GetAllMediaLibraryMetadata) GetDirector() []GetAllMediaLibraryDirector {
	if o == nil {
		return nil
	}
	return o.Director
}

func (o *GetAllMediaLibraryMetadata) GetWriter() []GetAllMediaLibraryWriter {
	if o == nil {
		return nil
	}
	return o.Writer
}

func (o *GetAllMediaLibraryMetadata) GetRole() []GetAllMediaLibraryRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *GetAllMediaLibraryMetadata) GetGuids() []GetAllMediaLibraryGuids {
	if o == nil {
		return nil
	}
	return o.Guids
}

func (o *GetAllMediaLibraryMetadata) GetCollection() []GetAllMediaLibraryCollection {
	if o == nil {
		return nil
	}
	return o.Collection
}

type GetAllMediaLibraryMediaContainer struct {
	// Number of media items returned in this response.
	Size int `json:"size"`
	// Total number of media items in the library.
	TotalSize int `json:"totalSize"`
	// Offset value for pagination.
	Offset int64 `json:"offset"`
	// Indicates whether syncing is allowed.
	AllowSync bool `json:"allowSync"`
	// URL for the background artwork of the media container.
	Art string `json:"art"`
	// The content type or mode.
	Content string `json:"content"`
	// An plugin identifier for the media container.
	Identifier string `json:"identifier"`
	// The unique identifier for the library section.
	LibrarySectionID int64 `json:"librarySectionID"`
	// The title of the library section.
	LibrarySectionTitle string `json:"librarySectionTitle"`
	// The universally unique identifier for the library section.
	LibrarySectionUUID *string `json:"librarySectionUUID,omitempty"`
	// The prefix used for media tag resource paths.
	MediaTagPrefix string `json:"mediaTagPrefix"`
	// The version number for media tags.
	MediaTagVersion int64 `json:"mediaTagVersion"`
	// URL for the thumbnail image of the media container.
	Thumb string `json:"thumb"`
	// Specifies whether caching is disabled.
	Nocache bool `json:"nocache"`
	// The primary title of the media container.
	Title1 string `json:"title1"`
	// The secondary title of the media container.
	Title2 string `json:"title2"`
	// Identifier for the view group layout.
	ViewGroup string `json:"viewGroup"`
	// The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
	//
	Meta *GetAllMediaLibraryMeta `json:"Meta,omitempty"`
	// An array of metadata items.
	Metadata []GetAllMediaLibraryMetadata `json:"Metadata,omitempty"`
}

func (o *GetAllMediaLibraryMediaContainer) GetSize() int {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *GetAllMediaLibraryMediaContainer) GetTotalSize() int {
	if o == nil {
		return 0
	}
	return o.TotalSize
}

func (o *GetAllMediaLibraryMediaContainer) GetOffset() int64 {
	if o == nil {
		return 0
	}
	return o.Offset
}

func (o *GetAllMediaLibraryMediaContainer) GetAllowSync() bool {
	if o == nil {
		return false
	}
	return o.AllowSync
}

func (o *GetAllMediaLibraryMediaContainer) GetArt() string {
	if o == nil {
		return ""
	}
	return o.Art
}

func (o *GetAllMediaLibraryMediaContainer) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *GetAllMediaLibraryMediaContainer) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *GetAllMediaLibraryMediaContainer) GetLibrarySectionID() int64 {
	if o == nil {
		return 0
	}
	return o.LibrarySectionID
}

func (o *GetAllMediaLibraryMediaContainer) GetLibrarySectionTitle() string {
	if o == nil {
		return ""
	}
	return o.LibrarySectionTitle
}

func (o *GetAllMediaLibraryMediaContainer) GetLibrarySectionUUID() *string {
	if o == nil {
		return nil
	}
	return o.LibrarySectionUUID
}

func (o *GetAllMediaLibraryMediaContainer) GetMediaTagPrefix() string {
	if o == nil {
		return ""
	}
	return o.MediaTagPrefix
}

func (o *GetAllMediaLibraryMediaContainer) GetMediaTagVersion() int64 {
	if o == nil {
		return 0
	}
	return o.MediaTagVersion
}

func (o *GetAllMediaLibraryMediaContainer) GetThumb() string {
	if o == nil {
		return ""
	}
	return o.Thumb
}

func (o *GetAllMediaLibraryMediaContainer) GetNocache() bool {
	if o == nil {
		return false
	}
	return o.Nocache
}

func (o *GetAllMediaLibraryMediaContainer) GetTitle1() string {
	if o == nil {
		return ""
	}
	return o.Title1
}

func (o *GetAllMediaLibraryMediaContainer) GetTitle2() string {
	if o == nil {
		return ""
	}
	return o.Title2
}

func (o *GetAllMediaLibraryMediaContainer) GetViewGroup() string {
	if o == nil {
		return ""
	}
	return o.ViewGroup
}

func (o *GetAllMediaLibraryMediaContainer) GetMeta() *GetAllMediaLibraryMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetAllMediaLibraryMediaContainer) GetMetadata() []GetAllMediaLibraryMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

// GetAllMediaLibraryResponseBody - Successful response containing media container data.
type GetAllMediaLibraryResponseBody struct {
	MediaContainer *GetAllMediaLibraryMediaContainer `json:"MediaContainer,omitempty"`
}

func (o *GetAllMediaLibraryResponseBody) GetMediaContainer() *GetAllMediaLibraryMediaContainer {
	if o == nil {
		return nil
	}
	return o.MediaContainer
}

type GetAllMediaLibraryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response containing media container data.
	Object *GetAllMediaLibraryResponseBody
}

func (o *GetAllMediaLibraryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAllMediaLibraryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAllMediaLibraryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetAllMediaLibraryResponse) GetObject() *GetAllMediaLibraryResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
