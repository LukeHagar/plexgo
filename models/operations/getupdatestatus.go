// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type Release struct {
	Key         *string `json:"key,omitempty"`
	Version     *string `json:"version,omitempty"`
	Added       *string `json:"added,omitempty"`
	Fixed       *string `json:"fixed,omitempty"`
	DownloadURL *string `json:"downloadURL,omitempty"`
	State       *string `json:"state,omitempty"`
}

func (r *Release) GetKey() *string {
	if r == nil {
		return nil
	}
	return r.Key
}

func (r *Release) GetVersion() *string {
	if r == nil {
		return nil
	}
	return r.Version
}

func (r *Release) GetAdded() *string {
	if r == nil {
		return nil
	}
	return r.Added
}

func (r *Release) GetFixed() *string {
	if r == nil {
		return nil
	}
	return r.Fixed
}

func (r *Release) GetDownloadURL() *string {
	if r == nil {
		return nil
	}
	return r.DownloadURL
}

func (r *Release) GetState() *string {
	if r == nil {
		return nil
	}
	return r.State
}

type GetUpdateStatusMediaContainer struct {
	Size        *int      `json:"size,omitempty"`
	CanInstall  *bool     `json:"canInstall,omitempty"`
	CheckedAt   *int      `json:"checkedAt,omitempty"`
	DownloadURL *string   `json:"downloadURL,omitempty"`
	Status      *int      `json:"status,omitempty"`
	Release     []Release `json:"Release,omitempty"`
}

func (g *GetUpdateStatusMediaContainer) GetSize() *int {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetUpdateStatusMediaContainer) GetCanInstall() *bool {
	if g == nil {
		return nil
	}
	return g.CanInstall
}

func (g *GetUpdateStatusMediaContainer) GetCheckedAt() *int {
	if g == nil {
		return nil
	}
	return g.CheckedAt
}

func (g *GetUpdateStatusMediaContainer) GetDownloadURL() *string {
	if g == nil {
		return nil
	}
	return g.DownloadURL
}

func (g *GetUpdateStatusMediaContainer) GetStatus() *int {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GetUpdateStatusMediaContainer) GetRelease() []Release {
	if g == nil {
		return nil
	}
	return g.Release
}

// GetUpdateStatusResponseBody - The Server Updates
type GetUpdateStatusResponseBody struct {
	MediaContainer *GetUpdateStatusMediaContainer `json:"MediaContainer,omitempty"`
}

func (g *GetUpdateStatusResponseBody) GetMediaContainer() *GetUpdateStatusMediaContainer {
	if g == nil {
		return nil
	}
	return g.MediaContainer
}

type GetUpdateStatusResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The Server Updates
	Object *GetUpdateStatusResponseBody
}

func (g *GetUpdateStatusResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetUpdateStatusResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetUpdateStatusResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetUpdateStatusResponse) GetObject() *GetUpdateStatusResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
