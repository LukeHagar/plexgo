// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"net/http"
)

type MarkUnplayedMediaErrors struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

func (m *MarkUnplayedMediaErrors) GetCode() *int {
	if m == nil {
		return nil
	}
	return m.Code
}

func (m *MarkUnplayedMediaErrors) GetMessage() *string {
	if m == nil {
		return nil
	}
	return m.Message
}

func (m *MarkUnplayedMediaErrors) GetStatus() *int {
	if m == nil {
		return nil
	}
	return m.Status
}

// MarkUnplayedUnauthorized - Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
type MarkUnplayedUnauthorized struct {
	Errors []MarkUnplayedMediaErrors `json:"errors,omitempty"`
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
}

var _ error = &MarkUnplayedUnauthorized{}

func (e *MarkUnplayedUnauthorized) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type MarkUnplayedErrors struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

func (m *MarkUnplayedErrors) GetCode() *int {
	if m == nil {
		return nil
	}
	return m.Code
}

func (m *MarkUnplayedErrors) GetMessage() *string {
	if m == nil {
		return nil
	}
	return m.Message
}

func (m *MarkUnplayedErrors) GetStatus() *int {
	if m == nil {
		return nil
	}
	return m.Status
}

// MarkUnplayedBadRequest - Bad Request - A parameter was not specified, or was specified incorrectly.
type MarkUnplayedBadRequest struct {
	Errors []MarkUnplayedErrors `json:"errors,omitempty"`
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
}

var _ error = &MarkUnplayedBadRequest{}

func (e *MarkUnplayedBadRequest) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
