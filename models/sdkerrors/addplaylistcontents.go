// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"net/http"
)

type AddPlaylistContentsPlaylistsErrors struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

func (a *AddPlaylistContentsPlaylistsErrors) GetCode() *int {
	if a == nil {
		return nil
	}
	return a.Code
}

func (a *AddPlaylistContentsPlaylistsErrors) GetMessage() *string {
	if a == nil {
		return nil
	}
	return a.Message
}

func (a *AddPlaylistContentsPlaylistsErrors) GetStatus() *int {
	if a == nil {
		return nil
	}
	return a.Status
}

// AddPlaylistContentsUnauthorized - Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
type AddPlaylistContentsUnauthorized struct {
	Errors []AddPlaylistContentsPlaylistsErrors `json:"errors,omitempty"`
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
}

var _ error = &AddPlaylistContentsUnauthorized{}

func (e *AddPlaylistContentsUnauthorized) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type AddPlaylistContentsErrors struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

func (a *AddPlaylistContentsErrors) GetCode() *int {
	if a == nil {
		return nil
	}
	return a.Code
}

func (a *AddPlaylistContentsErrors) GetMessage() *string {
	if a == nil {
		return nil
	}
	return a.Message
}

func (a *AddPlaylistContentsErrors) GetStatus() *int {
	if a == nil {
		return nil
	}
	return a.Status
}

// AddPlaylistContentsBadRequest - Bad Request - A parameter was not specified, or was specified incorrectly.
type AddPlaylistContentsBadRequest struct {
	Errors []AddPlaylistContentsErrors `json:"errors,omitempty"`
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
}

var _ error = &AddPlaylistContentsBadRequest{}

func (e *AddPlaylistContentsBadRequest) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
