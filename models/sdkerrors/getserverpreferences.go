// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"net/http"
)

type GetServerPreferencesServerErrors struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

func (g *GetServerPreferencesServerErrors) GetCode() *int {
	if g == nil {
		return nil
	}
	return g.Code
}

func (g *GetServerPreferencesServerErrors) GetMessage() *string {
	if g == nil {
		return nil
	}
	return g.Message
}

func (g *GetServerPreferencesServerErrors) GetStatus() *int {
	if g == nil {
		return nil
	}
	return g.Status
}

// GetServerPreferencesUnauthorized - Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
type GetServerPreferencesUnauthorized struct {
	Errors []GetServerPreferencesServerErrors `json:"errors,omitempty"`
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
}

var _ error = &GetServerPreferencesUnauthorized{}

func (e *GetServerPreferencesUnauthorized) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type GetServerPreferencesErrors struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

func (g *GetServerPreferencesErrors) GetCode() *int {
	if g == nil {
		return nil
	}
	return g.Code
}

func (g *GetServerPreferencesErrors) GetMessage() *string {
	if g == nil {
		return nil
	}
	return g.Message
}

func (g *GetServerPreferencesErrors) GetStatus() *int {
	if g == nil {
		return nil
	}
	return g.Status
}

// GetServerPreferencesBadRequest - Bad Request - A parameter was not specified, or was specified incorrectly.
type GetServerPreferencesBadRequest struct {
	Errors []GetServerPreferencesErrors `json:"errors,omitempty"`
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
}

var _ error = &GetServerPreferencesBadRequest{}

func (e *GetServerPreferencesBadRequest) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
