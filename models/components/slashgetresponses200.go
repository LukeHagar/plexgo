// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type SlashGetResponses200MediaContainer struct {
	// The flavors of directory found here:
	//   - Primary: (e.g. all, On Deck) These are still used in some clients to provide "shortcuts" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.
	//   - Secondary: These are marked with `"secondary": true` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.
	//   - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there's a completely obsolete entry marked `"search": true` which used to be used to allow clients to build search dialogs on the fly.
	Content          *string    `json:"content,omitempty"`
	AllowSync        *bool      `json:"allowSync,omitempty"`
	Art              *string    `json:"art,omitempty"`
	Directory        []Metadata `json:"Directory,omitempty"`
	Identifier       *string    `json:"identifier,omitempty"`
	LibrarySectionID *int64     `json:"librarySectionID,omitempty"`
	MediaTagPrefix   *string    `json:"mediaTagPrefix,omitempty"`
	MediaTagVersion  *int64     `json:"mediaTagVersion,omitempty"`
	Size             *int64     `json:"size,omitempty"`
	SortAsc          *bool      `json:"sortAsc,omitempty"`
	Thumb            *string    `json:"thumb,omitempty"`
	Title1           *string    `json:"title1,omitempty"`
	ViewGroup        *string    `json:"viewGroup,omitempty"`
	ViewMode         *int64     `json:"viewMode,omitempty"`
}

func (s *SlashGetResponses200MediaContainer) GetContent() *string {
	if s == nil {
		return nil
	}
	return s.Content
}

func (s *SlashGetResponses200MediaContainer) GetAllowSync() *bool {
	if s == nil {
		return nil
	}
	return s.AllowSync
}

func (s *SlashGetResponses200MediaContainer) GetArt() *string {
	if s == nil {
		return nil
	}
	return s.Art
}

func (s *SlashGetResponses200MediaContainer) GetDirectory() []Metadata {
	if s == nil {
		return nil
	}
	return s.Directory
}

func (s *SlashGetResponses200MediaContainer) GetIdentifier() *string {
	if s == nil {
		return nil
	}
	return s.Identifier
}

func (s *SlashGetResponses200MediaContainer) GetLibrarySectionID() *int64 {
	if s == nil {
		return nil
	}
	return s.LibrarySectionID
}

func (s *SlashGetResponses200MediaContainer) GetMediaTagPrefix() *string {
	if s == nil {
		return nil
	}
	return s.MediaTagPrefix
}

func (s *SlashGetResponses200MediaContainer) GetMediaTagVersion() *int64 {
	if s == nil {
		return nil
	}
	return s.MediaTagVersion
}

func (s *SlashGetResponses200MediaContainer) GetSize() *int64 {
	if s == nil {
		return nil
	}
	return s.Size
}

func (s *SlashGetResponses200MediaContainer) GetSortAsc() *bool {
	if s == nil {
		return nil
	}
	return s.SortAsc
}

func (s *SlashGetResponses200MediaContainer) GetThumb() *string {
	if s == nil {
		return nil
	}
	return s.Thumb
}

func (s *SlashGetResponses200MediaContainer) GetTitle1() *string {
	if s == nil {
		return nil
	}
	return s.Title1
}

func (s *SlashGetResponses200MediaContainer) GetViewGroup() *string {
	if s == nil {
		return nil
	}
	return s.ViewGroup
}

func (s *SlashGetResponses200MediaContainer) GetViewMode() *int64 {
	if s == nil {
		return nil
	}
	return s.ViewMode
}

// SlashGetResponses200 - OK
type SlashGetResponses200 struct {
	MediaContainer *SlashGetResponses200MediaContainer `json:"MediaContainer,omitempty"`
}

func (s *SlashGetResponses200) GetMediaContainer() *SlashGetResponses200MediaContainer {
	if s == nil {
		return nil
	}
	return s.MediaContainer
}
