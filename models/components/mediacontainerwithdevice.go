// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type MediaContainerWithDeviceDevice struct {
	ChannelMapping []ChannelMapping `json:"ChannelMapping,omitempty"`
	Key            *string          `json:"key,omitempty"`
	LastSeenAt     *int64           `json:"lastSeenAt,omitempty"`
	Make           *string          `json:"make,omitempty"`
	Model          *string          `json:"model,omitempty"`
	ModelNumber    *string          `json:"modelNumber,omitempty"`
	Protocol       *string          `json:"protocol,omitempty"`
	Sources        *string          `json:"sources,omitempty"`
	State          *string          `json:"state,omitempty"`
	Status         *string          `json:"status,omitempty"`
	Tuners         *string          `json:"tuners,omitempty"`
	URI            *string          `json:"uri,omitempty"`
	UUID           *string          `json:"uuid,omitempty"`
}

func (m *MediaContainerWithDeviceDevice) GetChannelMapping() []ChannelMapping {
	if m == nil {
		return nil
	}
	return m.ChannelMapping
}

func (m *MediaContainerWithDeviceDevice) GetKey() *string {
	if m == nil {
		return nil
	}
	return m.Key
}

func (m *MediaContainerWithDeviceDevice) GetLastSeenAt() *int64 {
	if m == nil {
		return nil
	}
	return m.LastSeenAt
}

func (m *MediaContainerWithDeviceDevice) GetMake() *string {
	if m == nil {
		return nil
	}
	return m.Make
}

func (m *MediaContainerWithDeviceDevice) GetModel() *string {
	if m == nil {
		return nil
	}
	return m.Model
}

func (m *MediaContainerWithDeviceDevice) GetModelNumber() *string {
	if m == nil {
		return nil
	}
	return m.ModelNumber
}

func (m *MediaContainerWithDeviceDevice) GetProtocol() *string {
	if m == nil {
		return nil
	}
	return m.Protocol
}

func (m *MediaContainerWithDeviceDevice) GetSources() *string {
	if m == nil {
		return nil
	}
	return m.Sources
}

func (m *MediaContainerWithDeviceDevice) GetState() *string {
	if m == nil {
		return nil
	}
	return m.State
}

func (m *MediaContainerWithDeviceDevice) GetStatus() *string {
	if m == nil {
		return nil
	}
	return m.Status
}

func (m *MediaContainerWithDeviceDevice) GetTuners() *string {
	if m == nil {
		return nil
	}
	return m.Tuners
}

func (m *MediaContainerWithDeviceDevice) GetURI() *string {
	if m == nil {
		return nil
	}
	return m.URI
}

func (m *MediaContainerWithDeviceDevice) GetUUID() *string {
	if m == nil {
		return nil
	}
	return m.UUID
}

// MediaContainerWithDeviceMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type MediaContainerWithDeviceMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize *int64                           `json:"totalSize,omitempty"`
	Device    []MediaContainerWithDeviceDevice `json:"Device,omitempty"`
}

func (m *MediaContainerWithDeviceMediaContainer) GetIdentifier() *string {
	if m == nil {
		return nil
	}
	return m.Identifier
}

func (m *MediaContainerWithDeviceMediaContainer) GetOffset() *int64 {
	if m == nil {
		return nil
	}
	return m.Offset
}

func (m *MediaContainerWithDeviceMediaContainer) GetSize() *int64 {
	if m == nil {
		return nil
	}
	return m.Size
}

func (m *MediaContainerWithDeviceMediaContainer) GetTotalSize() *int64 {
	if m == nil {
		return nil
	}
	return m.TotalSize
}

func (m *MediaContainerWithDeviceMediaContainer) GetDevice() []MediaContainerWithDeviceDevice {
	if m == nil {
		return nil
	}
	return m.Device
}

type MediaContainerWithDevice struct {
	MediaContainer *MediaContainerWithDeviceMediaContainer `json:"MediaContainer,omitempty"`
}

func (m *MediaContainerWithDevice) GetMediaContainer() *MediaContainerWithDeviceMediaContainer {
	if m == nil {
		return nil
	}
	return m.MediaContainer
}
