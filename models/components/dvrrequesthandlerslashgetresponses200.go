// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize *int64 `json:"totalSize,omitempty"`
	// A status indicator. If present and non-zero, indicates an error
	Status *int64 `json:"status,omitempty"`
}

func (d *DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer) GetIdentifier() *string {
	if d == nil {
		return nil
	}
	return d.Identifier
}

func (d *DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer) GetOffset() *int64 {
	if d == nil {
		return nil
	}
	return d.Offset
}

func (d *DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer) GetSize() *int64 {
	if d == nil {
		return nil
	}
	return d.Size
}

func (d *DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer) GetTotalSize() *int64 {
	if d == nil {
		return nil
	}
	return d.TotalSize
}

func (d *DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer) GetStatus() *int64 {
	if d == nil {
		return nil
	}
	return d.Status
}

type Dvr struct {
	Device   []Device `json:"Device,omitempty"`
	Key      *string  `json:"key,omitempty"`
	Language *string  `json:"language,omitempty"`
	Lineup   *string  `json:"lineup,omitempty"`
	UUID     *string  `json:"uuid,omitempty"`
}

func (d *Dvr) GetDevice() []Device {
	if d == nil {
		return nil
	}
	return d.Device
}

func (d *Dvr) GetKey() *string {
	if d == nil {
		return nil
	}
	return d.Key
}

func (d *Dvr) GetLanguage() *string {
	if d == nil {
		return nil
	}
	return d.Language
}

func (d *Dvr) GetLineup() *string {
	if d == nil {
		return nil
	}
	return d.Lineup
}

func (d *Dvr) GetUUID() *string {
	if d == nil {
		return nil
	}
	return d.UUID
}

type DvrRequestHandlerSlashGetResponses200MediaContainer struct {
	MediaContainer *DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer `json:"MediaContainer,omitempty"`
	Dvr            []Dvr                                                              `json:"DVR,omitempty"`
}

func (d *DvrRequestHandlerSlashGetResponses200MediaContainer) GetMediaContainer() *DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer {
	if d == nil {
		return nil
	}
	return d.MediaContainer
}

func (d *DvrRequestHandlerSlashGetResponses200MediaContainer) GetDvr() []Dvr {
	if d == nil {
		return nil
	}
	return d.Dvr
}

// DvrRequestHandlerSlashGetResponses200 - OK
type DvrRequestHandlerSlashGetResponses200 struct {
	MediaContainer *DvrRequestHandlerSlashGetResponses200MediaContainer `json:"MediaContainer,omitempty"`
}

func (d *DvrRequestHandlerSlashGetResponses200) GetMediaContainer() *DvrRequestHandlerSlashGetResponses200MediaContainer {
	if d == nil {
		return nil
	}
	return d.MediaContainer
}
