// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type RequestHandlerSlashGetResponses200Directory struct {
	Count *int64 `json:"count,omitempty"`
	// The key where this directory is found
	Key   *string `json:"key,omitempty"`
	Title *string `json:"title,omitempty"`
}

func (r *RequestHandlerSlashGetResponses200Directory) GetCount() *int64 {
	if r == nil {
		return nil
	}
	return r.Count
}

func (r *RequestHandlerSlashGetResponses200Directory) GetKey() *string {
	if r == nil {
		return nil
	}
	return r.Key
}

func (r *RequestHandlerSlashGetResponses200Directory) GetTitle() *string {
	if r == nil {
		return nil
	}
	return r.Title
}

// RequestHandlerSlashGetResponses200MediaContainer - `MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
// Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
// The container often "hoists" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.
type RequestHandlerSlashGetResponses200MediaContainer struct {
	Identifier *string `json:"identifier,omitempty"`
	// The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.
	//
	Offset *int64 `json:"offset,omitempty"`
	Size   *int64 `json:"size,omitempty"`
	// The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.
	//
	TotalSize            *int64  `json:"totalSize,omitempty"`
	AllowCameraUpload    *bool   `json:"allowCameraUpload,omitempty"`
	AllowChannelAccess   *bool   `json:"allowChannelAccess,omitempty"`
	AllowMediaDeletion   *bool   `json:"allowMediaDeletion,omitempty"`
	AllowSharing         *bool   `json:"allowSharing,omitempty"`
	AllowSync            *bool   `json:"allowSync,omitempty"`
	AllowTuners          *bool   `json:"allowTuners,omitempty"`
	BackgroundProcessing *bool   `json:"backgroundProcessing,omitempty"`
	Certificate          *bool   `json:"certificate,omitempty"`
	CompanionProxy       *bool   `json:"companionProxy,omitempty"`
	CountryCode          *string `json:"countryCode,omitempty"`
	Diagnostics          *string `json:"diagnostics,omitempty"`
	EventStream          *bool   `json:"eventStream,omitempty"`
	FriendlyName         *string `json:"friendlyName,omitempty"`
	HubSearch            *bool   `json:"hubSearch,omitempty"`
	ItemClusters         *bool   `json:"itemClusters,omitempty"`
	Livetv               *int64  `json:"livetv,omitempty"`
	MachineIdentifier    any     `json:"machineIdentifier,omitempty"`
	MediaProviders       *bool   `json:"mediaProviders,omitempty"`
	Multiuser            *bool   `json:"multiuser,omitempty"`
	MusicAnalysis        *int64  `json:"musicAnalysis,omitempty"`
	MyPlex               *bool   `json:"myPlex,omitempty"`
	MyPlexMappingState   any     `json:"myPlexMappingState,omitempty"`
	MyPlexSigninState    any     `json:"myPlexSigninState,omitempty"`
	MyPlexSubscription   *bool   `json:"myPlexSubscription,omitempty"`
	MyPlexUsername       *string `json:"myPlexUsername,omitempty"`
	OfflineTranscode     any     `json:"offlineTranscode,omitempty"`
	// A comma-separated list of features which are enabled for the server owner
	OwnerFeatures                 *string `json:"ownerFeatures,omitempty"`
	Platform                      *string `json:"platform,omitempty"`
	PlatformVersion               *string `json:"platformVersion,omitempty"`
	PluginHost                    *bool   `json:"pluginHost,omitempty"`
	PushNotifications             *bool   `json:"pushNotifications,omitempty"`
	ReadOnlyLibraries             *bool   `json:"readOnlyLibraries,omitempty"`
	StreamingBrainABRVersion      *int64  `json:"streamingBrainABRVersion,omitempty"`
	StreamingBrainVersion         *int64  `json:"streamingBrainVersion,omitempty"`
	Sync                          *bool   `json:"sync,omitempty"`
	TranscoderActiveVideoSessions *int64  `json:"transcoderActiveVideoSessions,omitempty"`
	TranscoderAudio               *bool   `json:"transcoderAudio,omitempty"`
	TranscoderLyrics              *bool   `json:"transcoderLyrics,omitempty"`
	TranscoderPhoto               *bool   `json:"transcoderPhoto,omitempty"`
	TranscoderSubtitles           *bool   `json:"transcoderSubtitles,omitempty"`
	TranscoderVideo               *bool   `json:"transcoderVideo,omitempty"`
	// The suggested video quality bitrates to present to the user
	TranscoderVideoBitrates  any     `json:"transcoderVideoBitrates,omitempty"`
	TranscoderVideoQualities *string `json:"transcoderVideoQualities,omitempty"`
	// The suggested video resolutions to the above quality bitrates
	TranscoderVideoResolutions any                                           `json:"transcoderVideoResolutions,omitempty"`
	UpdatedAt                  *int64                                        `json:"updatedAt,omitempty"`
	Updater                    *bool                                         `json:"updater,omitempty"`
	Version                    *string                                       `json:"version,omitempty"`
	VoiceSearch                *bool                                         `json:"voiceSearch,omitempty"`
	Directory                  []RequestHandlerSlashGetResponses200Directory `json:"Directory,omitempty"`
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetIdentifier() *string {
	if r == nil {
		return nil
	}
	return r.Identifier
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetOffset() *int64 {
	if r == nil {
		return nil
	}
	return r.Offset
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetSize() *int64 {
	if r == nil {
		return nil
	}
	return r.Size
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTotalSize() *int64 {
	if r == nil {
		return nil
	}
	return r.TotalSize
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetAllowCameraUpload() *bool {
	if r == nil {
		return nil
	}
	return r.AllowCameraUpload
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetAllowChannelAccess() *bool {
	if r == nil {
		return nil
	}
	return r.AllowChannelAccess
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetAllowMediaDeletion() *bool {
	if r == nil {
		return nil
	}
	return r.AllowMediaDeletion
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetAllowSharing() *bool {
	if r == nil {
		return nil
	}
	return r.AllowSharing
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetAllowSync() *bool {
	if r == nil {
		return nil
	}
	return r.AllowSync
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetAllowTuners() *bool {
	if r == nil {
		return nil
	}
	return r.AllowTuners
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetBackgroundProcessing() *bool {
	if r == nil {
		return nil
	}
	return r.BackgroundProcessing
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetCertificate() *bool {
	if r == nil {
		return nil
	}
	return r.Certificate
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetCompanionProxy() *bool {
	if r == nil {
		return nil
	}
	return r.CompanionProxy
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetCountryCode() *string {
	if r == nil {
		return nil
	}
	return r.CountryCode
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetDiagnostics() *string {
	if r == nil {
		return nil
	}
	return r.Diagnostics
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetEventStream() *bool {
	if r == nil {
		return nil
	}
	return r.EventStream
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetFriendlyName() *string {
	if r == nil {
		return nil
	}
	return r.FriendlyName
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetHubSearch() *bool {
	if r == nil {
		return nil
	}
	return r.HubSearch
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetItemClusters() *bool {
	if r == nil {
		return nil
	}
	return r.ItemClusters
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetLivetv() *int64 {
	if r == nil {
		return nil
	}
	return r.Livetv
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMachineIdentifier() any {
	if r == nil {
		return nil
	}
	return r.MachineIdentifier
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMediaProviders() *bool {
	if r == nil {
		return nil
	}
	return r.MediaProviders
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMultiuser() *bool {
	if r == nil {
		return nil
	}
	return r.Multiuser
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMusicAnalysis() *int64 {
	if r == nil {
		return nil
	}
	return r.MusicAnalysis
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMyPlex() *bool {
	if r == nil {
		return nil
	}
	return r.MyPlex
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMyPlexMappingState() any {
	if r == nil {
		return nil
	}
	return r.MyPlexMappingState
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMyPlexSigninState() any {
	if r == nil {
		return nil
	}
	return r.MyPlexSigninState
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMyPlexSubscription() *bool {
	if r == nil {
		return nil
	}
	return r.MyPlexSubscription
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetMyPlexUsername() *string {
	if r == nil {
		return nil
	}
	return r.MyPlexUsername
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetOfflineTranscode() any {
	if r == nil {
		return nil
	}
	return r.OfflineTranscode
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetOwnerFeatures() *string {
	if r == nil {
		return nil
	}
	return r.OwnerFeatures
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetPlatform() *string {
	if r == nil {
		return nil
	}
	return r.Platform
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetPlatformVersion() *string {
	if r == nil {
		return nil
	}
	return r.PlatformVersion
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetPluginHost() *bool {
	if r == nil {
		return nil
	}
	return r.PluginHost
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetPushNotifications() *bool {
	if r == nil {
		return nil
	}
	return r.PushNotifications
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetReadOnlyLibraries() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnlyLibraries
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetStreamingBrainABRVersion() *int64 {
	if r == nil {
		return nil
	}
	return r.StreamingBrainABRVersion
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetStreamingBrainVersion() *int64 {
	if r == nil {
		return nil
	}
	return r.StreamingBrainVersion
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetSync() *bool {
	if r == nil {
		return nil
	}
	return r.Sync
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderActiveVideoSessions() *int64 {
	if r == nil {
		return nil
	}
	return r.TranscoderActiveVideoSessions
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderAudio() *bool {
	if r == nil {
		return nil
	}
	return r.TranscoderAudio
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderLyrics() *bool {
	if r == nil {
		return nil
	}
	return r.TranscoderLyrics
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderPhoto() *bool {
	if r == nil {
		return nil
	}
	return r.TranscoderPhoto
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderSubtitles() *bool {
	if r == nil {
		return nil
	}
	return r.TranscoderSubtitles
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderVideo() *bool {
	if r == nil {
		return nil
	}
	return r.TranscoderVideo
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderVideoBitrates() any {
	if r == nil {
		return nil
	}
	return r.TranscoderVideoBitrates
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderVideoQualities() *string {
	if r == nil {
		return nil
	}
	return r.TranscoderVideoQualities
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetTranscoderVideoResolutions() any {
	if r == nil {
		return nil
	}
	return r.TranscoderVideoResolutions
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetUpdatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.UpdatedAt
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetUpdater() *bool {
	if r == nil {
		return nil
	}
	return r.Updater
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetVersion() *string {
	if r == nil {
		return nil
	}
	return r.Version
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetVoiceSearch() *bool {
	if r == nil {
		return nil
	}
	return r.VoiceSearch
}

func (r *RequestHandlerSlashGetResponses200MediaContainer) GetDirectory() []RequestHandlerSlashGetResponses200Directory {
	if r == nil {
		return nil
	}
	return r.Directory
}

// RequestHandlerSlashGetResponses200 - OK
type RequestHandlerSlashGetResponses200 struct {
	MediaContainer *RequestHandlerSlashGetResponses200MediaContainer `json:"MediaContainer,omitempty"`
}

func (r *RequestHandlerSlashGetResponses200) GetMediaContainer() *RequestHandlerSlashGetResponses200MediaContainer {
	if r == nil {
		return nil
	}
	return r.MediaContainer
}
